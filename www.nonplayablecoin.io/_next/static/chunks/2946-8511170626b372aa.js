(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [2946], {
        70723: function(a, s, p) {
            "use strict";
            p.d(s, {
                $0: function() {
                    return Jn
                },
                $t: function() {
                    return Ft
                },
                AW: function() {
                    return J
                },
                Au: function() {
                    return jn
                },
                Bv: function() {
                    return Nt
                },
                Bw: function() {
                    return dt
                },
                D: function() {
                    return zn
                },
                D6: function() {
                    return U
                },
                DQ: function() {
                    return ve
                },
                Dd: function() {
                    return Vt
                },
                E0: function() {
                    return ft
                },
                EJ: function() {
                    return xt
                },
                EN: function() {
                    return Re
                },
                Gg: function() {
                    return Zt
                },
                Gq: function() {
                    return at
                },
                H1: function() {
                    return st
                },
                HI: function() {
                    return Kn
                },
                Hh: function() {
                    return pt
                },
                IP: function() {
                    return nt
                },
                Ih: function() {
                    return $t
                },
                JT: function() {
                    return qt
                },
                KC: function() {
                    return et
                },
                L5: function() {
                    return B
                },
                Ll: function() {
                    return xn
                },
                M: function() {
                    return Xe
                },
                M_: function() {
                    return h
                },
                O6: function() {
                    return er
                },
                ON: function() {
                    return Qt
                },
                PM: function() {
                    return Kt
                },
                Q0: function() {
                    return Lt
                },
                Q8: function() {
                    return Fn
                },
                UG: function() {
                    return te
                },
                WG: function() {
                    return $
                },
                Ym: function() {
                    return Vn
                },
                Z2: function() {
                    return an
                },
                Z4: function() {
                    return ct
                },
                Z7: function() {
                    return N
                },
                _H: function() {
                    return mt
                },
                al: function() {
                    return Wt
                },
                b$: function() {
                    return j
                },
                cO: function() {
                    return yt
                },
                eG: function() {
                    return S
                },
                fK: function() {
                    return se
                },
                fc: function() {
                    return At
                },
                gn: function() {
                    return lt
                },
                gp: function() {
                    return oe
                },
                gu: function() {
                    return Rn
                },
                h1: function() {
                    return kt
                },
                hF: function() {
                    return it
                },
                hH: function() {
                    return Ht
                },
                he: function() {
                    return bt
                },
                iP: function() {
                    return ut
                },
                in: function() {
                    return cn
                },
                jU: function() {
                    return q
                },
                jd: function() {
                    return Dn
                },
                jv: function() {
                    return jt
                },
                m$: function() {
                    return kn
                },
                n: function() {
                    return Mt
                },
                nf: function() {
                    return Bt
                },
                o8: function() {
                    return w
                },
                p8: function() {
                    return Gt
                },
                pe: function() {
                    return Ln
                },
                qt: function() {
                    return D
                },
                rF: function() {
                    return un
                },
                rV: function() {
                    return eo
                },
                rj: function() {
                    return Mn
                },
                sI: function() {
                    return zt
                },
                uw: function() {
                    return Xt
                },
                vB: function() {
                    return ee
                },
                xW: function() {
                    return Dt
                }
            });
            var g = p(51040),
                m = p(20342),
                v = p(35077),
                x = p(87853),
                _ = p(38195),
                E = p(71188),
                T = p(69954),
                F = p(58619),
                W = p(849),
                z = p(36073),
                Z = p(43824),
                Q = p(43869),
                Y = p(25566);

            function ve(a) {
                let [s, p] = a.split(":");
                return {
                    namespace: s,
                    reference: p
                }
            }

            function Rn(a, s = []) {
                let p = [];
                return Object.keys(a).forEach(g => {
                    if (s.length && !s.includes(g)) return;
                    let m = a[g];
                    p.push(...m.accounts)
                }), p
            }

            function K(a, s) {
                return a.includes(":") ? [a] : s.chains || []
            }
            let X = "base10",
                J = "base16",
                ei = "base64pad",
                en = "utf8",
                eo = 1;

            function jn() {
                let a = _.Au();
                return {
                    privateKey: (0, E.BB)(a.secretKey, J),
                    publicKey: (0, E.BB)(a.publicKey, J)
                }
            }

            function Dn() {
                let a = (0, v.randomBytes)(32);
                return (0, E.BB)(a, J)
            }

            function kn(a, s) {
                let p = _.gi((0, E.mL)(a, J), (0, E.mL)(s, J), !0),
                    g = new m.t(x.mE, p).expand(32);
                return (0, E.BB)(g, J)
            }

            function Vn(a) {
                let s = (0, x.vp)((0, E.mL)(a, J));
                return (0, E.BB)(s, J)
            }

            function Mn(a) {
                let s = (0, x.vp)((0, E.mL)(a, en));
                return (0, E.BB)(s, J)
            }

            function $(a) {
                return Number((0, E.BB)(a, X))
            }

            function Kn(a) {
                var s;
                let p = (s = "u" > typeof a.type ? a.type : 0, (0, E.mL)(`${s}`, X));
                if ($(p) === eo && typeof a.senderPublicKey > "u") throw Error("Missing sender public key for type 1 envelope");
                let m = "u" > typeof a.senderPublicKey ? (0, E.mL)(a.senderPublicKey, J) : void 0,
                    x = "u" > typeof a.iv ? (0, E.mL)(a.iv, J) : (0, v.randomBytes)(12),
                    _ = new g.OK((0, E.mL)(a.symKey, J)).seal(x, (0, E.mL)(a.message, en));
                return function(a) {
                    if ($(a.type) === eo) {
                        if (typeof a.senderPublicKey > "u") throw Error("Missing sender public key for type 1 envelope");
                        return (0, E.BB)((0, E.zo)([a.type, a.senderPublicKey, a.iv, a.sealed]), ei)
                    }
                    return (0, E.BB)((0, E.zo)([a.type, a.iv, a.sealed]), ei)
                }({
                    type: p,
                    sealed: _,
                    iv: x,
                    senderPublicKey: m
                })
            }

            function Ln(a) {
                let s = new g.OK((0, E.mL)(a.symKey, J)),
                    {
                        sealed: p,
                        iv: m
                    } = ee(a.encoded),
                    v = s.open(m, p);
                if (null === v) throw Error("Failed to decrypt");
                return (0, E.BB)(v, en)
            }

            function ee(a) {
                let s = (0, E.mL)(a, ei),
                    p = s.slice(0, 1);
                if ($(p) === eo) {
                    let a = s.slice(1, 33),
                        g = s.slice(33, 45),
                        m = s.slice(45);
                    return {
                        type: p,
                        sealed: m,
                        iv: g,
                        senderPublicKey: a
                    }
                }
                let g = s.slice(1, 13),
                    m = s.slice(13);
                return {
                    type: p,
                    sealed: m,
                    iv: g
                }
            }

            function xn(a, s) {
                let p = ee(a);
                return Re({
                    type: $(p.type),
                    senderPublicKey: "u" > typeof p.senderPublicKey ? (0, E.BB)(p.senderPublicKey, J) : void 0,
                    receiverPublicKey: s ? .receiverPublicKey
                })
            }

            function Re(a) {
                let s = a ? .type || 0;
                if (s === eo) {
                    if (typeof a ? .senderPublicKey > "u") throw Error("missing sender public key");
                    if (typeof a ? .receiverPublicKey > "u") throw Error("missing receiver public key")
                }
                return {
                    type: s,
                    senderPublicKey: a ? .senderPublicKey,
                    receiverPublicKey: a ? .receiverPublicKey
                }
            }

            function Fn(a) {
                return a.type === eo && "string" == typeof a.senderPublicKey && "string" == typeof a.receiverPublicKey
            }
            var ea = Object.defineProperty,
                es = Object.getOwnPropertySymbols,
                el = Object.prototype.hasOwnProperty,
                ec = Object.prototype.propertyIsEnumerable,
                Ue = (a, s, p) => s in a ? ea(a, s, {
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                    value: p
                }) : a[s] = p,
                _e = (a, s) => {
                    for (var p in s || (s = {})) el.call(s, p) && Ue(a, p, s[p]);
                    if (es)
                        for (var p of es(s)) ec.call(s, p) && Ue(a, p, s[p]);
                    return a
                };
            let eu = {
                reactNative: "react-native",
                node: "node",
                browser: "browser",
                unknown: "unknown"
            };

            function te() {
                return "u" > typeof Y && "u" > typeof Y.versions && "u" > typeof Y.versions.node
            }

            function j() {
                return !(0, W.getDocument)() && !!(0, W.getNavigator)() && "ReactNative" === navigator.product
            }

            function q() {
                return !te() && !!(0, W.getNavigator)()
            }

            function R() {
                return j() ? eu.reactNative : te() ? eu.node : q() ? eu.browser : eu.unknown
            }

            function zn() {
                return (0, z.D)() || {
                    name: "",
                    description: "",
                    url: "",
                    icons: [""]
                }
            }

            function Jn({
                protocol: a,
                version: s,
                relayUrl: g,
                sdkVersion: m,
                auth: v,
                projectId: x,
                useOnCloseEvent: _
            }) {
                var E;
                let F;
                let z = g.split("?"),
                    Q = function(a, s, g) {
                        let m = function() {
                                if (R() === eu.reactNative && "u" > typeof p.g && "u" > typeof(null == p.g ? void 0 : p.g.Platform)) {
                                    let {
                                        OS: a,
                                        Version: s
                                    } = p.g.Platform;
                                    return [a, s].join("-")
                                }
                                let a = (0, T.qY)();
                                if (null === a) return "unknown";
                                let s = a.os ? a.os.replace(" ", "").toLowerCase() : "unknown";
                                return "browser" === a.type ? [s, a.name, a.version].join("-") : [s, a.version].join("-")
                            }(),
                            v = function() {
                                var a;
                                let s = R();
                                return s === eu.browser ? [s, (null == (a = (0, W.getLocation)()) ? void 0 : a.host) || "unknown"].join(":") : s
                            }();
                        return [
                            [a, s].join("-"), ["js", g].join("-"), m, v
                        ].join("/")
                    }(a, s, m),
                    Y = (E = z[1] || "", F = _e(_e({}, F = Z.parse(E)), {
                        auth: v,
                        ua: Q,
                        projectId: x,
                        useOnCloseEvent: _ || void 0
                    }), E = Z.stringify(F));
                return z[0] + "?" + Y
            }

            function O(a, s) {
                return a.filter(a => s.includes(a)).length === a.length
            }

            function et(a) {
                return Object.fromEntries(a.entries())
            }

            function nt(a) {
                return new Map(Object.entries(a))
            }

            function st(a = F.FIVE_MINUTES, s) {
                let p, g, m;
                let v = (0, F.toMiliseconds)(a || F.FIVE_MINUTES);
                return {
                    resolve: a => {
                        m && p && (clearTimeout(m), p(a))
                    },
                    reject: a => {
                        m && g && (clearTimeout(m), g(a))
                    },
                    done: () => new Promise((a, x) => {
                        m = setTimeout(() => {
                            x(Error(s))
                        }, v), p = a, g = x
                    })
                }
            }

            function it(a, s, p) {
                return new Promise(async (g, m) => {
                    let v = setTimeout(() => m(Error(p)), s);
                    try {
                        let s = await a;
                        g(s)
                    } catch (a) {
                        m(a)
                    }
                    clearTimeout(v)
                })
            }

            function re(a, s) {
                if ("string" == typeof s && s.startsWith(`${a}:`)) return s;
                if ("topic" === a.toLowerCase()) {
                    if ("string" != typeof s) throw Error('Value must be "string" for expirer target type: topic');
                    return `topic:${s}`
                }
                if ("id" === a.toLowerCase()) {
                    if ("number" != typeof s) throw Error('Value must be "number" for expirer target type: id');
                    return `id:${s}`
                }
                throw Error(`Unknown expirer target type: ${a}`)
            }

            function ct(a) {
                return re("topic", a)
            }

            function at(a) {
                return re("id", a)
            }

            function ut(a) {
                let [s, p] = a.split(":"), g = {
                    id: void 0,
                    topic: void 0
                };
                if ("topic" === s && "string" == typeof p) g.topic = p;
                else if ("id" === s && Number.isInteger(Number(p))) g.id = Number(p);
                else throw Error(`Invalid target, expected id:number or topic:string, got ${s}:${p}`);
                return g
            }

            function lt(a, s) {
                return (0, F.fromMiliseconds)((s || Date.now()) + (0, F.toMiliseconds)(a))
            }

            function dt(a) {
                return Date.now() >= (0, F.toMiliseconds)(a)
            }

            function ft(a, s) {
                return `${a}${s?`:${s}`:""}`
            }

            function S(a = [], s = []) {
                return [...new Set([...a, ...s])]
            }
            async function pt({
                id: a,
                topic: s,
                wcDeepLink: g
            }) {
                try {
                    if (!g) return;
                    let m = "string" == typeof g ? JSON.parse(g) : g,
                        v = m ? .href;
                    if ("string" != typeof v) return;
                    v.endsWith("/") && (v = v.slice(0, -1));
                    let x = `${v}/wc?requestId=${a}&sessionTopic=${s}`,
                        _ = R();
                    _ === eu.browser ? x.startsWith("https://") ? window.open(x, "_blank", "noreferrer noopener") : window.open(x, "_self", "noreferrer noopener") : _ === eu.reactNative && "u" > typeof(null == p.g ? void 0 : p.g.Linking) && await p.g.Linking.openURL(x)
                } catch (a) {
                    console.error(a)
                }
            }

            function mt(a) {
                return a ? .relay || {
                    protocol: "irn"
                }
            }

            function yt(a) {
                let s = Q.RELAY_JSONRPC[a];
                if (typeof s > "u") throw Error(`Relay Protocol not supported: ${a}`);
                return s
            }
            var ed = Object.defineProperty,
                eh = Object.getOwnPropertySymbols,
                ep = Object.prototype.hasOwnProperty,
                ef = Object.prototype.propertyIsEnumerable,
                qe = (a, s, p) => s in a ? ed(a, s, {
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                    value: p
                }) : a[s] = p,
                Et = (a, s) => {
                    for (var p in s || (s = {})) ep.call(s, p) && qe(a, p, s[p]);
                    if (eh)
                        for (var p of eh(s)) ef.call(s, p) && qe(a, p, s[p]);
                    return a
                };

            function bt(a) {
                var s;
                let p = a.indexOf(":"),
                    g = -1 !== a.indexOf("?") ? a.indexOf("?") : void 0,
                    m = a.substring(0, p),
                    v = a.substring(p + 1, g).split("@"),
                    x = "u" > typeof g ? a.substring(g) : "",
                    _ = Z.parse(x);
                return {
                    protocol: m,
                    topic: (s = v[0]).startsWith("//") ? s.substring(2) : s,
                    version: parseInt(v[1], 10),
                    symKey: _.symKey,
                    relay: function(a, s = "-") {
                        let p = {},
                            g = "relay" + s;
                        return Object.keys(a).forEach(s => {
                            if (s.startsWith(g)) {
                                let m = s.replace(g, ""),
                                    v = a[s];
                                p[m] = v
                            }
                        }), p
                    }(_)
                }
            }

            function Nt(a) {
                return `${a.protocol}:${a.topic}@${a.version}?` + Z.stringify(Et({
                    symKey: a.symKey
                }, function(a, s = "-") {
                    let p = {};
                    return Object.keys(a).forEach(g => {
                        a[g] && (p["relay" + s + g] = a[g])
                    }), p
                }(a.relay)))
            }
            var eg = Object.defineProperty,
                ew = Object.defineProperties,
                em = Object.getOwnPropertyDescriptors,
                eb = Object.getOwnPropertySymbols,
                ev = Object.prototype.hasOwnProperty,
                ey = Object.prototype.propertyIsEnumerable,
                Ye = (a, s, p) => s in a ? eg(a, s, {
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                    value: p
                }) : a[s] = p,
                Tt = (a, s) => {
                    for (var p in s || (s = {})) ev.call(s, p) && Ye(a, p, s[p]);
                    if (eb)
                        for (var p of eb(s)) ey.call(s, p) && Ye(a, p, s[p]);
                    return a
                },
                Rt = (a, s) => ew(a, em(s));

            function A(a) {
                let s = [];
                return a.forEach(a => {
                    let [p, g] = a.split(":");
                    s.push(`${p}:${g}`)
                }), s
            }

            function At(a, s) {
                let p = cn(a, s);
                if (p) throw Error(p.message);
                let g = {};
                for (let [s, p] of Object.entries(a)) g[s] = {
                    methods: p.methods,
                    events: p.events,
                    chains: p.accounts.map(a => `${a.split(":")[0]}:${a.split(":")[1]}`)
                };
                return g
            }

            function oe(a) {
                return a.includes(":")
            }

            function Xe(a) {
                return oe(a) ? a.split(":")[0] : a
            }

            function se(a) {
                var s, p, g;
                let m = {};
                if (!B(a)) return m;
                for (let [v, x] of Object.entries(a)) {
                    let a = oe(v) ? [v] : x.chains,
                        _ = x.methods || [],
                        E = x.events || [],
                        T = Xe(v);
                    m[T] = Rt(Tt({}, m[T]), {
                        chains: S(a, null == (s = m[T]) ? void 0 : s.chains),
                        methods: S(_, null == (p = m[T]) ? void 0 : p.methods),
                        events: S(E, null == (g = m[T]) ? void 0 : g.events)
                    })
                }
                return m
            }
            let eC = {
                    INVALID_METHOD: {
                        message: "Invalid method.",
                        code: 1001
                    },
                    INVALID_EVENT: {
                        message: "Invalid event.",
                        code: 1002
                    },
                    INVALID_UPDATE_REQUEST: {
                        message: "Invalid update request.",
                        code: 1003
                    },
                    INVALID_EXTEND_REQUEST: {
                        message: "Invalid extend request.",
                        code: 1004
                    },
                    INVALID_SESSION_SETTLE_REQUEST: {
                        message: "Invalid session settle request.",
                        code: 1005
                    },
                    UNAUTHORIZED_METHOD: {
                        message: "Unauthorized method.",
                        code: 3001
                    },
                    UNAUTHORIZED_EVENT: {
                        message: "Unauthorized event.",
                        code: 3002
                    },
                    UNAUTHORIZED_UPDATE_REQUEST: {
                        message: "Unauthorized update request.",
                        code: 3003
                    },
                    UNAUTHORIZED_EXTEND_REQUEST: {
                        message: "Unauthorized extend request.",
                        code: 3004
                    },
                    USER_REJECTED: {
                        message: "User rejected.",
                        code: 5e3
                    },
                    USER_REJECTED_CHAINS: {
                        message: "User rejected chains.",
                        code: 5001
                    },
                    USER_REJECTED_METHODS: {
                        message: "User rejected methods.",
                        code: 5002
                    },
                    USER_REJECTED_EVENTS: {
                        message: "User rejected events.",
                        code: 5003
                    },
                    UNSUPPORTED_CHAINS: {
                        message: "Unsupported chains.",
                        code: 5100
                    },
                    UNSUPPORTED_METHODS: {
                        message: "Unsupported methods.",
                        code: 5101
                    },
                    UNSUPPORTED_EVENTS: {
                        message: "Unsupported events.",
                        code: 5102
                    },
                    UNSUPPORTED_ACCOUNTS: {
                        message: "Unsupported accounts.",
                        code: 5103
                    },
                    UNSUPPORTED_NAMESPACE_KEY: {
                        message: "Unsupported namespace key.",
                        code: 5104
                    },
                    USER_DISCONNECTED: {
                        message: "User disconnected.",
                        code: 6e3
                    },
                    SESSION_SETTLEMENT_FAILED: {
                        message: "Session settlement failed.",
                        code: 7e3
                    },
                    WC_METHOD_UNSUPPORTED: {
                        message: "Unsupported wc_ method.",
                        code: 10001
                    }
                },
                ex = {
                    NOT_INITIALIZED: {
                        message: "Not initialized.",
                        code: 1
                    },
                    NO_MATCHING_KEY: {
                        message: "No matching key.",
                        code: 2
                    },
                    RESTORE_WILL_OVERRIDE: {
                        message: "Restore will override.",
                        code: 3
                    },
                    RESUBSCRIBED: {
                        message: "Resubscribed.",
                        code: 4
                    },
                    MISSING_OR_INVALID: {
                        message: "Missing or invalid.",
                        code: 5
                    },
                    EXPIRED: {
                        message: "Expired.",
                        code: 6
                    },
                    UNKNOWN_TYPE: {
                        message: "Unknown type.",
                        code: 7
                    },
                    MISMATCHED_TOPIC: {
                        message: "Mismatched topic.",
                        code: 8
                    },
                    NON_CONFORMING_NAMESPACES: {
                        message: "Non conforming namespaces.",
                        code: 9
                    }
                };

            function N(a, s) {
                let {
                    message: p,
                    code: g
                } = ex[a];
                return {
                    message: s ? `${p} ${s}` : p,
                    code: g
                }
            }

            function U(a, s) {
                let {
                    message: p,
                    code: g
                } = eC[a];
                return {
                    message: s ? `${p} ${s}` : p,
                    code: g
                }
            }

            function D(a, s) {
                return !!Array.isArray(a) && (!("u" > typeof s) || !a.length || a.every(s))
            }

            function B(a) {
                return Object.getPrototypeOf(a) === Object.prototype && Object.keys(a).length
            }

            function w(a) {
                return typeof a > "u"
            }

            function h(a, s) {
                return !!(s && w(a)) || "string" == typeof a && !!a.trim().length
            }

            function G(a, s) {
                return !!(s && w(a)) || "number" == typeof a && !isNaN(a)
            }

            function $t(a, s) {
                let {
                    requiredNamespaces: p
                } = s, g = Object.keys(a.namespaces), m = Object.keys(p), v = !0;
                return !!O(m, g) && (g.forEach(s => {
                    let {
                        accounts: g,
                        methods: m,
                        events: x
                    } = a.namespaces[s], _ = A(g), E = p[s];
                    O(K(s, E), _) && O(E.methods, m) && O(E.events, x) || (v = !1)
                }), v)
            }

            function k(a) {
                return !!(h(a, !1) && a.includes(":")) && 2 === a.split(":").length
            }

            function jt(a) {
                if (h(a, !1)) try {
                    return "u" > typeof new URL(a)
                } catch {}
                return !1
            }

            function Dt(a) {
                var s;
                return null == (s = a ? .proposer) ? void 0 : s.publicKey
            }

            function kt(a) {
                return a ? .topic
            }

            function Vt(a, s) {
                let p = null;
                return h(a ? .publicKey, !1) || (p = N("MISSING_OR_INVALID", `${s} controller public key should be a string`)), p
            }

            function ie(a) {
                let s = !0;
                return D(a) ? a.length && (s = a.every(a => h(a, !1))) : s = !1, s
            }

            function ce(a, s) {
                let p = null;
                return Object.values(a).forEach(a => {
                    var g;
                    let m;
                    if (p) return;
                    let v = (g = `${s}, namespace`, m = null, ie(a ? .methods) ? ie(a ? .events) || (m = U("UNSUPPORTED_EVENTS", `${g}, events should be an array of strings or empty array for no events`)) : m = U("UNSUPPORTED_METHODS", `${g}, methods should be an array of strings or empty array for no methods`), m);
                    v && (p = v)
                }), p
            }

            function Mt(a, s, p) {
                let g = null;
                if (a && B(a)) {
                    let m;
                    let v = ce(a, s);
                    v && (g = v);
                    let x = (m = null, Object.entries(a).forEach(([a, g]) => {
                        var v, x;
                        let _;
                        if (m) return;
                        let E = (v = K(a, g), x = `${s} ${p}`, _ = null, D(v) && v.length ? v.forEach(a => {
                            _ || k(a) || (_ = U("UNSUPPORTED_CHAINS", `${x}, chain ${a} should be a string and conform to "namespace:chainId" format`))
                        }) : k(a) || (_ = U("UNSUPPORTED_CHAINS", `${x}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), _);
                        E && (m = E)
                    }), m);
                    x && (g = x)
                } else g = N("MISSING_OR_INVALID", `${s}, ${p} should be an object with data`);
                return g
            }

            function cn(a, s) {
                let p = null;
                if (a && B(a)) {
                    let g;
                    let m = ce(a, s);
                    m && (p = m);
                    let v = (g = null, Object.values(a).forEach(a => {
                        var p, m;
                        let v;
                        if (g) return;
                        let x = (p = a ? .accounts, m = `${s} namespace`, v = null, D(p) ? p.forEach(a => {
                            v || function(a) {
                                if (h(a, !1) && a.includes(":")) {
                                    let s = a.split(":");
                                    if (3 === s.length) {
                                        let a = s[0] + ":" + s[1];
                                        return !!s[2] && k(a)
                                    }
                                }
                                return !1
                            }(a) || (v = U("UNSUPPORTED_ACCOUNTS", `${m}, account ${a} should be a string and conform to "namespace:chainId:address" format`))
                        }) : v = U("UNSUPPORTED_ACCOUNTS", `${m}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), v);
                        x && (g = x)
                    }), g);
                    v && (p = v)
                } else p = N("MISSING_OR_INVALID", `${s}, namespaces should be an object with data`);
                return p
            }

            function an(a) {
                return h(a.protocol, !0)
            }

            function Kt(a, s) {
                let p = !1;
                return s && !a ? p = !0 : a && D(a) && a.length && a.forEach(a => {
                    p = an(a)
                }), p
            }

            function Lt(a) {
                return "number" == typeof a
            }

            function xt(a) {
                return "u" > typeof a
            }

            function Ft(a) {
                return !(!a || "object" != typeof a || !a.code || !G(a.code, !1) || !a.message || !h(a.message, !1))
            }

            function Ht(a) {
                return !(w(a) || !h(a.method, !1))
            }

            function qt(a) {
                return !(w(a) || w(a.result) && w(a.error) || !G(a.id, !1) || !h(a.jsonrpc, !1))
            }

            function Bt(a) {
                return !(w(a) || !h(a.name, !1))
            }

            function Gt(a, s) {
                return !(!k(s) || !(function(a) {
                    let s = [];
                    return Object.values(a).forEach(a => {
                        s.push(...A(a.accounts))
                    }), s
                })(a).includes(s))
            }

            function Wt(a, s, p) {
                return !!h(p, !1) && (function(a, s) {
                    let p = [];
                    return Object.values(a).forEach(a => {
                        A(a.accounts).includes(s) && p.push(...a.methods)
                    }), p
                })(a, s).includes(p)
            }

            function zt(a, s, p) {
                return !!h(p, !1) && (function(a, s) {
                    let p = [];
                    return Object.values(a).forEach(a => {
                        A(a.accounts).includes(s) && p.push(...a.events)
                    }), p
                })(a, s).includes(p)
            }

            function un(a, s, p) {
                let g = null,
                    m = function(a) {
                        let s = {};
                        return Object.keys(a).forEach(p => {
                            var g;
                            p.includes(":") ? s[p] = a[p] : null == (g = a[p].chains) || g.forEach(g => {
                                s[g] = {
                                    methods: a[p].methods,
                                    events: a[p].events
                                }
                            })
                        }), s
                    }(a),
                    v = function(a) {
                        let s = {};
                        return Object.keys(a).forEach(p => {
                            if (p.includes(":")) s[p] = a[p];
                            else {
                                let g = A(a[p].accounts);
                                g ? .forEach(g => {
                                    s[g] = {
                                        accounts: a[p].accounts.filter(a => a.includes(`${g}:`)),
                                        methods: a[p].methods,
                                        events: a[p].events
                                    }
                                })
                            }
                        }), s
                    }(s),
                    x = Object.keys(m),
                    _ = Object.keys(v),
                    E = ln(Object.keys(a)),
                    T = ln(Object.keys(s)),
                    F = E.filter(a => !T.includes(a));
                return F.length && (g = N("NON_CONFORMING_NAMESPACES", `${p} namespaces keys don't satisfy requiredNamespaces.
      Required: ${F.toString()}
      Received: ${Object.keys(s).toString()}`)), O(x, _) || (g = N("NON_CONFORMING_NAMESPACES", `${p} namespaces chains don't satisfy required namespaces.
      Required: ${x.toString()}
      Approved: ${_.toString()}`)), Object.keys(s).forEach(a => {
                    if (!a.includes(":") || g) return;
                    let m = A(s[a].accounts);
                    m.includes(a) || (g = N("NON_CONFORMING_NAMESPACES", `${p} namespaces accounts don't satisfy namespace accounts for ${a}
        Required: ${a}
        Approved: ${m.toString()}`))
                }), x.forEach(a => {
                    g || (O(m[a].methods, v[a].methods) ? O(m[a].events, v[a].events) || (g = N("NON_CONFORMING_NAMESPACES", `${p} namespaces events don't satisfy namespace events for ${a}`)) : g = N("NON_CONFORMING_NAMESPACES", `${p} namespaces methods don't satisfy namespace methods for ${a}`))
                }), g
            }

            function ln(a) {
                return [...new Set(a.map(a => a.includes(":") ? a.split(":")[0] : a))]
            }

            function Qt(a, s) {
                return G(a, !1) && a <= s.max && a >= s.min
            }

            function Zt() {
                let a = R();
                return new Promise(s => {
                    switch (a) {
                        case eu.browser:
                            s(q() && navigator ? .onLine);
                            break;
                        case eu.reactNative:
                            s(fn());
                            break;
                        case eu.node:
                        default:
                            s(!0)
                    }
                })
            }
            async function fn() {
                if (j() && "u" > typeof p.g && null != p.g && p.g.NetInfo) {
                    let a = await (null == p.g ? void 0 : p.g.NetInfo.fetch());
                    return a ? .isConnected
                }
                return !0
            }

            function Xt(a) {
                switch (R()) {
                    case eu.browser:
                        !j() && q() && (window.addEventListener("online", () => a(!0)), window.addEventListener("offline", () => a(!1)));
                        break;
                    case eu.reactNative:
                        j() && "u" > typeof p.g && null != p.g && p.g.NetInfo && p.g ? .NetInfo.addEventListener(s => a(s ? .isConnected));
                    case eu.node:
                }
            }
            let e_ = {};
            let er = class er {
                static get(a) {
                    return e_[a]
                }
                static set(a, s) {
                    e_[a] = s
                }
                static delete(a) {
                    delete e_[a]
                }
            }
        },
        43824: function(a, s, p) {
            "use strict";
            let g = p(67116),
                m = p(58005),
                v = p(34470),
                x = p(61820),
                isNullOrUndefined = a => null == a,
                _ = Symbol("encodeFragmentIdentifier");

            function validateArrayFormatSeparator(a) {
                if ("string" != typeof a || 1 !== a.length) throw TypeError("arrayFormatSeparator must be single character string")
            }

            function encode(a, s) {
                return s.encode ? s.strict ? g(a) : encodeURIComponent(a) : a
            }

            function decode(a, s) {
                return s.decode ? m(a) : a
            }

            function removeHash(a) {
                let s = a.indexOf("#");
                return -1 !== s && (a = a.slice(0, s)), a
            }

            function extract(a) {
                a = removeHash(a);
                let s = a.indexOf("?");
                return -1 === s ? "" : a.slice(s + 1)
            }

            function parseValue(a, s) {
                return s.parseNumbers && !Number.isNaN(Number(a)) && "string" == typeof a && "" !== a.trim() ? a = Number(a) : s.parseBooleans && null !== a && ("true" === a.toLowerCase() || "false" === a.toLowerCase()) && (a = "true" === a.toLowerCase()), a
            }

            function parse(a, s) {
                validateArrayFormatSeparator((s = Object.assign({
                    decode: !0,
                    sort: !0,
                    arrayFormat: "none",
                    arrayFormatSeparator: ",",
                    parseNumbers: !1,
                    parseBooleans: !1
                }, s)).arrayFormatSeparator);
                let p = function(a) {
                        let s;
                        switch (a.arrayFormat) {
                            case "index":
                                return (a, p, g) => {
                                    if (s = /\[(\d*)\]$/.exec(a), a = a.replace(/\[\d*\]$/, ""), !s) {
                                        g[a] = p;
                                        return
                                    }
                                    void 0 === g[a] && (g[a] = {}), g[a][s[1]] = p
                                };
                            case "bracket":
                                return (a, p, g) => {
                                    if (s = /(\[\])$/.exec(a), a = a.replace(/\[\]$/, ""), !s) {
                                        g[a] = p;
                                        return
                                    }
                                    if (void 0 === g[a]) {
                                        g[a] = [p];
                                        return
                                    }
                                    g[a] = [].concat(g[a], p)
                                };
                            case "colon-list-separator":
                                return (a, p, g) => {
                                    if (s = /(:list)$/.exec(a), a = a.replace(/:list$/, ""), !s) {
                                        g[a] = p;
                                        return
                                    }
                                    if (void 0 === g[a]) {
                                        g[a] = [p];
                                        return
                                    }
                                    g[a] = [].concat(g[a], p)
                                };
                            case "comma":
                            case "separator":
                                return (s, p, g) => {
                                    let m = "string" == typeof p && p.includes(a.arrayFormatSeparator),
                                        v = "string" == typeof p && !m && decode(p, a).includes(a.arrayFormatSeparator);
                                    p = v ? decode(p, a) : p;
                                    let x = m || v ? p.split(a.arrayFormatSeparator).map(s => decode(s, a)) : null === p ? p : decode(p, a);
                                    g[s] = x
                                };
                            case "bracket-separator":
                                return (s, p, g) => {
                                    let m = /(\[\])$/.test(s);
                                    if (s = s.replace(/\[\]$/, ""), !m) {
                                        g[s] = p ? decode(p, a) : p;
                                        return
                                    }
                                    let v = null === p ? [] : p.split(a.arrayFormatSeparator).map(s => decode(s, a));
                                    if (void 0 === g[s]) {
                                        g[s] = v;
                                        return
                                    }
                                    g[s] = [].concat(g[s], v)
                                };
                            default:
                                return (a, s, p) => {
                                    if (void 0 === p[a]) {
                                        p[a] = s;
                                        return
                                    }
                                    p[a] = [].concat(p[a], s)
                                }
                        }
                    }(s),
                    g = Object.create(null);
                if ("string" != typeof a || !(a = a.trim().replace(/^[?#&]/, ""))) return g;
                for (let m of a.split("&")) {
                    if ("" === m) continue;
                    let [a, x] = v(s.decode ? m.replace(/\+/g, " ") : m, "=");
                    x = void 0 === x ? null : ["comma", "separator", "bracket-separator"].includes(s.arrayFormat) ? x : decode(x, s), p(decode(a, s), x, g)
                }
                for (let a of Object.keys(g)) {
                    let p = g[a];
                    if ("object" == typeof p && null !== p)
                        for (let a of Object.keys(p)) p[a] = parseValue(p[a], s);
                    else g[a] = parseValue(p, s)
                }
                return !1 === s.sort ? g : (!0 === s.sort ? Object.keys(g).sort() : Object.keys(g).sort(s.sort)).reduce((a, s) => {
                    let p = g[s];
                    return p && "object" == typeof p && !Array.isArray(p) ? a[s] = function keysSorter(a) {
                        return Array.isArray(a) ? a.sort() : "object" == typeof a ? keysSorter(Object.keys(a)).sort((a, s) => Number(a) - Number(s)).map(s => a[s]) : a
                    }(p) : a[s] = p, a
                }, Object.create(null))
            }
            s.extract = extract, s.parse = parse, s.stringify = (a, s) => {
                if (!a) return "";
                validateArrayFormatSeparator((s = Object.assign({
                    encode: !0,
                    strict: !0,
                    arrayFormat: "none",
                    arrayFormatSeparator: ","
                }, s)).arrayFormatSeparator);
                let shouldFilter = p => s.skipNull && isNullOrUndefined(a[p]) || s.skipEmptyString && "" === a[p],
                    p = function(a) {
                        switch (a.arrayFormat) {
                            case "index":
                                return s => (p, g) => {
                                    let m = p.length;
                                    return void 0 === g || a.skipNull && null === g || a.skipEmptyString && "" === g ? p : null === g ? [...p, [encode(s, a), "[", m, "]"].join("")] : [...p, [encode(s, a), "[", encode(m, a), "]=", encode(g, a)].join("")]
                                };
                            case "bracket":
                                return s => (p, g) => void 0 === g || a.skipNull && null === g || a.skipEmptyString && "" === g ? p : null === g ? [...p, [encode(s, a), "[]"].join("")] : [...p, [encode(s, a), "[]=", encode(g, a)].join("")];
                            case "colon-list-separator":
                                return s => (p, g) => void 0 === g || a.skipNull && null === g || a.skipEmptyString && "" === g ? p : null === g ? [...p, [encode(s, a), ":list="].join("")] : [...p, [encode(s, a), ":list=", encode(g, a)].join("")];
                            case "comma":
                            case "separator":
                            case "bracket-separator":
                                {
                                    let s = "bracket-separator" === a.arrayFormat ? "[]=" : "=";
                                    return p => (g, m) => void 0 === m || a.skipNull && null === m || a.skipEmptyString && "" === m ? g : (m = null === m ? "" : m, 0 === g.length) ? [
                                        [encode(p, a), s, encode(m, a)].join("")
                                    ] : [
                                        [g, encode(m, a)].join(a.arrayFormatSeparator)
                                    ]
                                }
                            default:
                                return s => (p, g) => void 0 === g || a.skipNull && null === g || a.skipEmptyString && "" === g ? p : null === g ? [...p, encode(s, a)] : [...p, [encode(s, a), "=", encode(g, a)].join("")]
                        }
                    }(s),
                    g = {};
                for (let s of Object.keys(a)) shouldFilter(s) || (g[s] = a[s]);
                let m = Object.keys(g);
                return !1 !== s.sort && m.sort(s.sort), m.map(g => {
                    let m = a[g];
                    return void 0 === m ? "" : null === m ? encode(g, s) : Array.isArray(m) ? 0 === m.length && "bracket-separator" === s.arrayFormat ? encode(g, s) + "[]" : m.reduce(p(g), []).join("&") : encode(g, s) + "=" + encode(m, s)
                }).filter(a => a.length > 0).join("&")
            }, s.parseUrl = (a, s) => {
                s = Object.assign({
                    decode: !0
                }, s);
                let [p, g] = v(a, "#");
                return Object.assign({
                    url: p.split("?")[0] || "",
                    query: parse(extract(a), s)
                }, s && s.parseFragmentIdentifier && g ? {
                    fragmentIdentifier: decode(g, s)
                } : {})
            }, s.stringifyUrl = (a, p) => {
                p = Object.assign({
                    encode: !0,
                    strict: !0,
                    [_]: !0
                }, p);
                let g = removeHash(a.url).split("?")[0] || "",
                    m = s.extract(a.url),
                    v = s.parse(m, {
                        sort: !1
                    }),
                    x = Object.assign(v, a.query),
                    E = s.stringify(x, p);
                E && (E = `?${E}`);
                let T = function(a) {
                    let s = "",
                        p = a.indexOf("#");
                    return -1 !== p && (s = a.slice(p)), s
                }(a.url);
                return a.fragmentIdentifier && (T = `#${p[_]?encode(a.fragmentIdentifier,p):a.fragmentIdentifier}`), `${g}${E}${T}`
            }, s.pick = (a, p, g) => {
                g = Object.assign({
                    parseFragmentIdentifier: !0,
                    [_]: !1
                }, g);
                let {
                    url: m,
                    query: v,
                    fragmentIdentifier: E
                } = s.parseUrl(a, g);
                return s.stringifyUrl({
                    url: m,
                    query: x(v, p),
                    fragmentIdentifier: E
                }, g)
            }, s.exclude = (a, p, g) => {
                let m = Array.isArray(p) ? a => !p.includes(a) : (a, s) => !p(a, s);
                return s.pick(a, m, g)
            }
        },
        7404: function(a, s, p) {
            "use strict";
            p.d(s, {
                j: function() {
                    return cva
                }
            });
            let falsyToString = a => "boolean" == typeof a ? "".concat(a) : 0 === a ? "0" : a,
                cx = function() {
                    for (var a = arguments.length, s = Array(a), p = 0; p < a; p++) s[p] = arguments[p];
                    return s.flat(1 / 0).filter(Boolean).join(" ")
                },
                cva = (a, s) => p => {
                    var g;
                    if ((null == s ? void 0 : s.variants) == null) return cx(a, null == p ? void 0 : p.class, null == p ? void 0 : p.className);
                    let {
                        variants: m,
                        defaultVariants: v
                    } = s, x = Object.keys(m).map(a => {
                        let s = null == p ? void 0 : p[a],
                            g = null == v ? void 0 : v[a];
                        if (null === s) return null;
                        let x = falsyToString(s) || falsyToString(g);
                        return m[a][x]
                    }), _ = p && Object.entries(p).reduce((a, s) => {
                        let [p, g] = s;
                        return void 0 === g || (a[p] = g), a
                    }, {}), E = null == s ? void 0 : null === (g = s.compoundVariants) || void 0 === g ? void 0 : g.reduce((a, s) => {
                        let {
                            class: p,
                            className: g,
                            ...m
                        } = s;
                        return Object.entries(m).every(a => {
                            let [s, p] = a;
                            return Array.isArray(p) ? p.includes({ ...v,
                                ..._
                            }[s]) : ({ ...v,
                                ..._
                            })[s] === p
                        }) ? [...a, p, g] : a
                    }, []);
                    return cx(a, x, E, null == p ? void 0 : p.class, null == p ? void 0 : p.className)
                }
        },
        74548: function(a) {
            var s, p, g, m, v, x, _, E, T, F, W, z, Z, Q, Y, X, J, ei, en, eo, ea, es;
            a.exports = (s = "millisecond", p = "second", g = "minute", m = "hour", v = "week", x = "month", _ = "quarter", E = "year", T = "date", F = "Invalid Date", W = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, z = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, Z = function(a, s, p) {
                var g = String(a);
                return !g || g.length >= s ? a : "" + Array(s + 1 - g.length).join(p) + a
            }, (Y = {})[Q = "en"] = {
                name: "en",
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                ordinal: function(a) {
                    var s = ["th", "st", "nd", "rd"],
                        p = a % 100;
                    return "[" + a + (s[(p - 20) % 10] || s[p] || "th") + "]"
                }
            }, X = "$isDayjsObject", J = function(a) {
                return a instanceof ea || !(!a || !a[X])
            }, ei = function t(a, s, p) {
                var g;
                if (!a) return Q;
                if ("string" == typeof a) {
                    var m = a.toLowerCase();
                    Y[m] && (g = m), s && (Y[m] = s, g = m);
                    var v = a.split("-");
                    if (!g && v.length > 1) return t(v[0])
                } else {
                    var x = a.name;
                    Y[x] = a, g = x
                }
                return !p && g && (Q = g), g || !p && Q
            }, en = function(a, s) {
                if (J(a)) return a.clone();
                var p = "object" == typeof s ? s : {};
                return p.date = a, p.args = arguments, new ea(p)
            }, (eo = {
                s: Z,
                z: function(a) {
                    var s = -a.utcOffset(),
                        p = Math.abs(s);
                    return (s <= 0 ? "+" : "-") + Z(Math.floor(p / 60), 2, "0") + ":" + Z(p % 60, 2, "0")
                },
                m: function t(a, s) {
                    if (a.date() < s.date()) return -t(s, a);
                    var p = 12 * (s.year() - a.year()) + (s.month() - a.month()),
                        g = a.clone().add(p, x),
                        m = s - g < 0,
                        v = a.clone().add(p + (m ? -1 : 1), x);
                    return +(-(p + (s - g) / (m ? g - v : v - g)) || 0)
                },
                a: function(a) {
                    return a < 0 ? Math.ceil(a) || 0 : Math.floor(a)
                },
                p: function(a) {
                    return ({
                        M: x,
                        y: E,
                        w: v,
                        d: "day",
                        D: T,
                        h: m,
                        m: g,
                        s: p,
                        ms: s,
                        Q: _
                    })[a] || String(a || "").toLowerCase().replace(/s$/, "")
                },
                u: function(a) {
                    return void 0 === a
                }
            }).l = ei, eo.i = J, eo.w = function(a, s) {
                return en(a, {
                    locale: s.$L,
                    utc: s.$u,
                    x: s.$x,
                    $offset: s.$offset
                })
            }, es = (ea = function() {
                function M(a) {
                    this.$L = ei(a.locale, null, !0), this.parse(a), this.$x = this.$x || a.x || {}, this[X] = !0
                }
                var a = M.prototype;
                return a.parse = function(a) {
                    this.$d = function(a) {
                        var s = a.date,
                            p = a.utc;
                        if (null === s) return new Date(NaN);
                        if (eo.u(s)) return new Date;
                        if (s instanceof Date) return new Date(s);
                        if ("string" == typeof s && !/Z$/i.test(s)) {
                            var g = s.match(W);
                            if (g) {
                                var m = g[2] - 1 || 0,
                                    v = (g[7] || "0").substring(0, 3);
                                return p ? new Date(Date.UTC(g[1], m, g[3] || 1, g[4] || 0, g[5] || 0, g[6] || 0, v)) : new Date(g[1], m, g[3] || 1, g[4] || 0, g[5] || 0, g[6] || 0, v)
                            }
                        }
                        return new Date(s)
                    }(a), this.init()
                }, a.init = function() {
                    var a = this.$d;
                    this.$y = a.getFullYear(), this.$M = a.getMonth(), this.$D = a.getDate(), this.$W = a.getDay(), this.$H = a.getHours(), this.$m = a.getMinutes(), this.$s = a.getSeconds(), this.$ms = a.getMilliseconds()
                }, a.$utils = function() {
                    return eo
                }, a.isValid = function() {
                    return this.$d.toString() !== F
                }, a.isSame = function(a, s) {
                    var p = en(a);
                    return this.startOf(s) <= p && p <= this.endOf(s)
                }, a.isAfter = function(a, s) {
                    return en(a) < this.startOf(s)
                }, a.isBefore = function(a, s) {
                    return this.endOf(s) < en(a)
                }, a.$g = function(a, s, p) {
                    return eo.u(a) ? this[s] : this.set(p, a)
                }, a.unix = function() {
                    return Math.floor(this.valueOf() / 1e3)
                }, a.valueOf = function() {
                    return this.$d.getTime()
                }, a.startOf = function(a, s) {
                    var _ = this,
                        F = !!eo.u(s) || s,
                        W = eo.p(a),
                        l = function(a, s) {
                            var p = eo.w(_.$u ? Date.UTC(_.$y, s, a) : new Date(_.$y, s, a), _);
                            return F ? p : p.endOf("day")
                        },
                        $ = function(a, s) {
                            return eo.w(_.toDate()[a].apply(_.toDate("s"), (F ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(s)), _)
                        },
                        z = this.$W,
                        Z = this.$M,
                        Q = this.$D,
                        Y = "set" + (this.$u ? "UTC" : "");
                    switch (W) {
                        case E:
                            return F ? l(1, 0) : l(31, 11);
                        case x:
                            return F ? l(1, Z) : l(0, Z + 1);
                        case v:
                            var X = this.$locale().weekStart || 0,
                                J = (z < X ? z + 7 : z) - X;
                            return l(F ? Q - J : Q + (6 - J), Z);
                        case "day":
                        case T:
                            return $(Y + "Hours", 0);
                        case m:
                            return $(Y + "Minutes", 1);
                        case g:
                            return $(Y + "Seconds", 2);
                        case p:
                            return $(Y + "Milliseconds", 3);
                        default:
                            return this.clone()
                    }
                }, a.endOf = function(a) {
                    return this.startOf(a, !1)
                }, a.$set = function(a, v) {
                    var _, F = eo.p(a),
                        W = "set" + (this.$u ? "UTC" : ""),
                        z = ((_ = {}).day = W + "Date", _[T] = W + "Date", _[x] = W + "Month", _[E] = W + "FullYear", _[m] = W + "Hours", _[g] = W + "Minutes", _[p] = W + "Seconds", _[s] = W + "Milliseconds", _)[F],
                        Z = "day" === F ? this.$D + (v - this.$W) : v;
                    if (F === x || F === E) {
                        var Q = this.clone().set(T, 1);
                        Q.$d[z](Z), Q.init(), this.$d = Q.set(T, Math.min(this.$D, Q.daysInMonth())).$d
                    } else z && this.$d[z](Z);
                    return this.init(), this
                }, a.set = function(a, s) {
                    return this.clone().$set(a, s)
                }, a.get = function(a) {
                    return this[eo.p(a)]()
                }, a.add = function(a, s) {
                    var _, T = this;
                    a = Number(a);
                    var F = eo.p(s),
                        y = function(s) {
                            var p = en(T);
                            return eo.w(p.date(p.date() + Math.round(s * a)), T)
                        };
                    if (F === x) return this.set(x, this.$M + a);
                    if (F === E) return this.set(E, this.$y + a);
                    if ("day" === F) return y(1);
                    if (F === v) return y(7);
                    var W = ((_ = {})[g] = 6e4, _[m] = 36e5, _[p] = 1e3, _)[F] || 1,
                        z = this.$d.getTime() + a * W;
                    return eo.w(z, this)
                }, a.subtract = function(a, s) {
                    return this.add(-1 * a, s)
                }, a.format = function(a) {
                    var s = this,
                        p = this.$locale();
                    if (!this.isValid()) return p.invalidDate || F;
                    var g = a || "YYYY-MM-DDTHH:mm:ssZ",
                        m = eo.z(this),
                        v = this.$H,
                        x = this.$m,
                        _ = this.$M,
                        E = p.weekdays,
                        T = p.months,
                        W = p.meridiem,
                        h = function(a, p, m, v) {
                            return a && (a[p] || a(s, g)) || m[p].slice(0, v)
                        },
                        d = function(a) {
                            return eo.s(v % 12 || 12, a, "0")
                        },
                        Z = W || function(a, s, p) {
                            var g = a < 12 ? "AM" : "PM";
                            return p ? g.toLowerCase() : g
                        };
                    return g.replace(z, function(a, g) {
                        return g || function(a) {
                            switch (a) {
                                case "YY":
                                    return String(s.$y).slice(-2);
                                case "YYYY":
                                    return eo.s(s.$y, 4, "0");
                                case "M":
                                    return _ + 1;
                                case "MM":
                                    return eo.s(_ + 1, 2, "0");
                                case "MMM":
                                    return h(p.monthsShort, _, T, 3);
                                case "MMMM":
                                    return h(T, _);
                                case "D":
                                    return s.$D;
                                case "DD":
                                    return eo.s(s.$D, 2, "0");
                                case "d":
                                    return String(s.$W);
                                case "dd":
                                    return h(p.weekdaysMin, s.$W, E, 2);
                                case "ddd":
                                    return h(p.weekdaysShort, s.$W, E, 3);
                                case "dddd":
                                    return E[s.$W];
                                case "H":
                                    return String(v);
                                case "HH":
                                    return eo.s(v, 2, "0");
                                case "h":
                                    return d(1);
                                case "hh":
                                    return d(2);
                                case "a":
                                    return Z(v, x, !0);
                                case "A":
                                    return Z(v, x, !1);
                                case "m":
                                    return String(x);
                                case "mm":
                                    return eo.s(x, 2, "0");
                                case "s":
                                    return String(s.$s);
                                case "ss":
                                    return eo.s(s.$s, 2, "0");
                                case "SSS":
                                    return eo.s(s.$ms, 3, "0");
                                case "Z":
                                    return m
                            }
                            return null
                        }(a) || m.replace(":", "")
                    })
                }, a.utcOffset = function() {
                    return -(15 * Math.round(this.$d.getTimezoneOffset() / 15))
                }, a.diff = function(a, s, T) {
                    var F, W = this,
                        z = eo.p(s),
                        Z = en(a),
                        Q = (Z.utcOffset() - this.utcOffset()) * 6e4,
                        Y = this - Z,
                        D = function() {
                            return eo.m(W, Z)
                        };
                    switch (z) {
                        case E:
                            F = D() / 12;
                            break;
                        case x:
                            F = D();
                            break;
                        case _:
                            F = D() / 3;
                            break;
                        case v:
                            F = (Y - Q) / 6048e5;
                            break;
                        case "day":
                            F = (Y - Q) / 864e5;
                            break;
                        case m:
                            F = Y / 36e5;
                            break;
                        case g:
                            F = Y / 6e4;
                            break;
                        case p:
                            F = Y / 1e3;
                            break;
                        default:
                            F = Y
                    }
                    return T ? F : eo.a(F)
                }, a.daysInMonth = function() {
                    return this.endOf(x).$D
                }, a.$locale = function() {
                    return Y[this.$L]
                }, a.locale = function(a, s) {
                    if (!a) return this.$L;
                    var p = this.clone(),
                        g = ei(a, s, !0);
                    return g && (p.$L = g), p
                }, a.clone = function() {
                    return eo.w(this.$d, this)
                }, a.toDate = function() {
                    return new Date(this.valueOf())
                }, a.toJSON = function() {
                    return this.isValid() ? this.toISOString() : null
                }, a.toISOString = function() {
                    return this.$d.toISOString()
                }, a.toString = function() {
                    return this.$d.toUTCString()
                }, M
            }()).prototype, en.prototype = es, [
                ["$ms", s],
                ["$s", p],
                ["$m", g],
                ["$H", m],
                ["$W", "day"],
                ["$M", x],
                ["$y", E],
                ["$D", T]
            ].forEach(function(a) {
                es[a[1]] = function(s) {
                    return this.$g(s, a[0], a[1])
                }
            }), en.extend = function(a, s) {
                return a.$i || (a(s, ea, en), a.$i = !0), en
            }, en.locale = ei, en.isDayjs = J, en.unix = function(a) {
                return en(1e3 * a)
            }, en.en = Y[Q], en.Ls = Y, en.p = {}, en)
        },
        6537: function(a) {
            a.exports = function(a, s, p) {
                a = a || {};
                var g = s.prototype,
                    m = {
                        future: "in %s",
                        past: "%s ago",
                        s: "a few seconds",
                        m: "a minute",
                        mm: "%d minutes",
                        h: "an hour",
                        hh: "%d hours",
                        d: "a day",
                        dd: "%d days",
                        M: "a month",
                        MM: "%d months",
                        y: "a year",
                        yy: "%d years"
                    };

                function i(a, s, p, m) {
                    return g.fromToBase(a, s, p, m)
                }
                p.en.relativeTime = m, g.fromToBase = function(s, g, v, x, _) {
                    for (var E, T, F, W = v.$locale().relativeTime || m, z = a.thresholds || [{
                            l: "s",
                            r: 44,
                            d: "second"
                        }, {
                            l: "m",
                            r: 89
                        }, {
                            l: "mm",
                            r: 44,
                            d: "minute"
                        }, {
                            l: "h",
                            r: 89
                        }, {
                            l: "hh",
                            r: 21,
                            d: "hour"
                        }, {
                            l: "d",
                            r: 35
                        }, {
                            l: "dd",
                            r: 25,
                            d: "day"
                        }, {
                            l: "M",
                            r: 45
                        }, {
                            l: "MM",
                            r: 10,
                            d: "month"
                        }, {
                            l: "y",
                            r: 17
                        }, {
                            l: "yy",
                            d: "year"
                        }], Z = z.length, Q = 0; Q < Z; Q += 1) {
                        var Y = z[Q];
                        Y.d && (E = x ? p(s).diff(v, Y.d, !0) : v.diff(s, Y.d, !0));
                        var X = (a.rounding || Math.round)(Math.abs(E));
                        if (F = E > 0, X <= Y.r || !Y.r) {
                            X <= 1 && Q > 0 && (Y = z[Q - 1]);
                            var J = W[Y.l];
                            _ && (X = _("" + X)), T = "string" == typeof J ? J.replace("%d", X) : J(X, g, Y.l, F);
                            break
                        }
                    }
                    if (g) return T;
                    var ei = F ? W.future : W.past;
                    return "function" == typeof ei ? ei(T) : ei.replace("%s", T)
                }, g.to = function(a, s) {
                    return i(a, s, this, !0)
                }, g.from = function(a, s) {
                    return i(a, s, this)
                };
                var d = function(a) {
                    return a.$u ? p.utc() : p()
                };
                g.toNow = function(a) {
                    return this.to(d(this), a)
                }, g.fromNow = function(a) {
                    return this.from(d(this), a)
                }
            }
        },
        20239: function(a) {
            a.exports = function(a, s, p) {
                p.updateLocale = function(a, s) {
                    var g = p.Ls[a];
                    if (g) return (s ? Object.keys(s) : []).forEach(function(a) {
                        g[a] = s[a]
                    }), g
                }
            }
        },
        23289: function(a, s, p) {
            "use strict";
            p.d(s, {
                Z: function() {
                    return createReactComponent
                }
            });
            var g = p(2265),
                m = {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    stroke: "currentColor",
                    strokeWidth: 2,
                    strokeLinecap: "round",
                    strokeLinejoin: "round"
                };
            let toKebabCase = a => a.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase(),
                createReactComponent = (a, s) => {
                    let p = (0, g.forwardRef)(({
                        color: p = "currentColor",
                        size: v = 24,
                        strokeWidth: x = 2,
                        children: _,
                        ...E
                    }, T) => (0, g.createElement)("svg", {
                        ref: T,
                        ...m,
                        width: v,
                        height: v,
                        stroke: p,
                        strokeWidth: x,
                        className: `lucide lucide-${toKebabCase(a)}`,
                        ...E
                    }, [...s.map(([a, s]) => (0, g.createElement)(a, s)), ...(Array.isArray(_) ? _ : [_]) || []]));
                    return p.displayName = `${a}`, p
                }
        },
        80679: function(a, s, p) {
            "use strict";
            Object.defineProperty(s, "__esModule", {
                value: !0
            });
            var g = p(24670);
            Object.defineProperty(s, "__esModule", {
                    value: !0
                }),
                function(a, s) {
                    for (var p in s) Object.defineProperty(a, p, {
                        enumerable: !0,
                        get: s[p]
                    })
                }(s, {
                    unstable_getImgProps: function() {
                        return unstable_getImgProps
                    },
                    default: function() {
                        return T
                    }
                });
            var m = p(21024),
                v = p(7929),
                x = p(92637),
                _ = p(90413),
                E = m._(p(69950)),
                unstable_getImgProps = function(a) {
                    (0, x.warnOnce)("Warning: unstable_getImgProps() is experimental and may change or be removed at any time. Use at your own risk.");
                    var s = (0, v.getImgProps)(a, {
                            defaultLoader: E.default,
                            imgConf: {
                                deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
                                imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
                                path: "/_next/image",
                                loader: "default",
                                dangerouslyAllowSVG: !1,
                                unoptimized: !1
                            }
                        }).props,
                        p = !0,
                        m = !1,
                        _ = void 0;
                    try {
                        for (var T, F = Object.entries(s)[Symbol.iterator](); !(p = (T = F.next()).done); p = !0) {
                            var W = g._(T.value, 2),
                                z = W[0],
                                Z = W[1];
                            void 0 === Z && delete s[z]
                        }
                    } catch (a) {
                        m = !0, _ = a
                    } finally {
                        try {
                            p || null == F.return || F.return()
                        } finally {
                            if (m) throw _
                        }
                    }
                    return {
                        props: s
                    }
                },
                T = _.Image
        },
        16691: function(a, s, p) {
            a.exports = p(80679)
        },
        42210: function(a, s, p) {
            "use strict";
            p.d(s, {
                F: function() {
                    return $6ed0406888f73fc4$export$43e446d32b3d21af
                },
                e: function() {
                    return $6ed0406888f73fc4$export$c7b2cbe3552a0d05
                }
            });
            var g = p(2265);

            function $6ed0406888f73fc4$export$43e446d32b3d21af(...a) {
                return s => a.forEach(a => {
                    "function" == typeof a ? a(s) : null != a && (a.current = s)
                })
            }

            function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...a) {
                return (0, g.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...a), a)
            }
        },
        12385: function(a, s, p) {
            "use strict";

            function _extends() {
                return (_extends = Object.assign ? Object.assign.bind() : function(a) {
                    for (var s = 1; s < arguments.length; s++) {
                        var p = arguments[s];
                        for (var g in p) Object.prototype.hasOwnProperty.call(p, g) && (a[g] = p[g])
                    }
                    return a
                }).apply(this, arguments)
            }
            p.d(s, {
                g7: function() {
                    return v
                }
            });
            var g = p(2265),
                m = p(42210);
            let v = (0, g.forwardRef)((a, s) => {
                let {
                    children: p,
                    ...m
                } = a, v = g.Children.toArray(p), _ = v.find($5e63c961fc1ce211$var$isSlottable);
                if (_) {
                    let a = _.props.children,
                        p = v.map(s => s !== _ ? s : g.Children.count(a) > 1 ? g.Children.only(null) : (0, g.isValidElement)(a) ? a.props.children : null);
                    return (0, g.createElement)(x, _extends({}, m, {
                        ref: s
                    }), (0, g.isValidElement)(a) ? (0, g.cloneElement)(a, void 0, p) : null)
                }
                return (0, g.createElement)(x, _extends({}, m, {
                    ref: s
                }), p)
            });
            v.displayName = "Slot";
            let x = (0, g.forwardRef)((a, s) => {
                let {
                    children: p,
                    ...v
                } = a;
                return (0, g.isValidElement)(p) ? (0, g.cloneElement)(p, { ... function(a, s) {
                        let p = { ...s
                        };
                        for (let g in s) {
                            let m = a[g],
                                v = s[g],
                                x = /^on[A-Z]/.test(g);
                            x ? m && v ? p[g] = (...a) => {
                                v(...a), m(...a)
                            } : m && (p[g] = m) : "style" === g ? p[g] = { ...m,
                                ...v
                            } : "className" === g && (p[g] = [m, v].filter(Boolean).join(" "))
                        }
                        return { ...a,
                            ...p
                        }
                    }(v, p.props),
                    ref: s ? (0, m.F)(s, p.ref) : p.ref
                }) : g.Children.count(p) > 1 ? g.Children.only(null) : null
            });
            x.displayName = "SlotClone";
            let $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({
                children: a
            }) => (0, g.createElement)(g.Fragment, null, a);

            function $5e63c961fc1ce211$var$isSlottable(a) {
                return (0, g.isValidElement)(a) && a.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45
            }
        },
        17289: function(a, s, p) {
            "use strict";
            p.d(s, {
                _: function() {
                    return z
                }
            });
            var g, m = p(38026),
                v = p(40106),
                x = p(53404),
                _ = p(39803),
                E = p(48519),
                T = p(71061),
                F = p(39730),
                W = p(21693),
                z = class extends x.wR {
                    constructor({
                        chains: a,
                        options: s
                    } = {}) {
                        let p = {
                            shimDisconnect: !0,
                            getProvider() {
                                if ("undefined" == typeof window) return;
                                let a = window.ethereum;
                                return a ? .providers && a.providers.length > 0 ? a.providers[0] : a
                            },
                            ...s
                        };
                        super({
                            chains: a,
                            options: p
                        }), this.id = "injected", (0, x.Ko)(this, g, void 0), this.shimDisconnectKey = `${this.id}.shimDisconnect`, this.onAccountsChanged = a => {
                            0 === a.length ? this.emit("disconnect") : this.emit("change", {
                                account: (0, _.K)(a[0])
                            })
                        }, this.onChainChanged = a => {
                            let s = (0, v.J)(a),
                                p = this.isChainUnsupported(s);
                            this.emit("change", {
                                chain: {
                                    id: s,
                                    unsupported: p
                                }
                            })
                        }, this.onDisconnect = async a => {
                            if (1013 === a.code) {
                                let a = await this.getProvider();
                                if (a) {
                                    let a = await this.getAccount();
                                    if (a) return
                                }
                            }
                            this.emit("disconnect"), this.options.shimDisconnect && this.storage ? .removeItem(this.shimDisconnectKey)
                        };
                        let m = p.getProvider();
                        if ("string" == typeof p.name) this.name = p.name;
                        else if (m) {
                            let a = function(a) {
                                if (!a) return "Injected";
                                let getName = a => a.isApexWallet ? "Apex Wallet" : a.isAvalanche ? "Core Wallet" : a.isBackpack ? "Backpack" : a.isBifrost ? "Bifrost Wallet" : a.isBitKeep ? "BitKeep" : a.isBitski ? "Bitski" : a.isBlockWallet ? "BlockWallet" : a.isBraveWallet ? "Brave Wallet" : a.isCoin98 ? "Coin98 Wallet" : a.isCoinbaseWallet ? "Coinbase Wallet" : a.isDawn ? "Dawn Wallet" : a.isDefiant ? "Defiant" : a.isDesig ? "Desig Wallet" : a.isEnkrypt ? "Enkrypt" : a.isExodus ? "Exodus" : a.isFordefi ? "Fordefi" : a.isFrame ? "Frame" : a.isFrontier ? "Frontier Wallet" : a.isGamestop ? "GameStop Wallet" : a.isHaqqWallet ? "HAQQ Wallet" : a.isHyperPay ? "HyperPay Wallet" : a.isImToken ? "ImToken" : a.isHaloWallet ? "Halo Wallet" : a.isKuCoinWallet ? "KuCoin Wallet" : a.isMathWallet ? "MathWallet" : a.isNovaWallet ? "Nova Wallet" : a.isOkxWallet || a.isOKExWallet ? "OKX Wallet" : a.isOneInchIOSWallet || a.isOneInchAndroidWallet ? "1inch Wallet" : a.isOpera ? "Opera" : a.isPhantom ? "Phantom" : a.isPortal ? "Ripio Portal" : a.isRabby ? "Rabby Wallet" : a.isRainbow ? "Rainbow" : a.isSafePal ? "SafePal Wallet" : a.isStatus ? "Status" : a.isSubWallet ? "SubWallet" : a.isTalisman ? "Talisman" : a.isTally ? "Taho" : a.isTokenPocket ? "TokenPocket" : a.isTokenary ? "Tokenary" : a.isTrust || a.isTrustWallet ? "Trust Wallet" : a.isTTWallet ? "TTWallet" : a.isXDEFI ? "XDEFI Wallet" : a.isZeal ? "Zeal" : a.isZerion ? "Zerion" : a.isMetaMask ? "MetaMask" : void 0;
                                if (a.providers ? .length) {
                                    let s = new Set,
                                        p = 1;
                                    for (let g of a.providers) {
                                        let a = getName(g);
                                        a || (a = `Unknown Wallet #${p}`, p += 1), s.add(a)
                                    }
                                    let g = [...s];
                                    return g.length ? g : g[0] ? ? "Injected"
                                }
                                return getName(a) ? ? "Injected"
                            }(m);
                            p.name ? this.name = p.name(a) : "string" == typeof a ? this.name = a : this.name = a[0]
                        } else this.name = "Injected";
                        this.ready = !!m
                    }
                    async connect({
                        chainId: a
                    } = {}) {
                        try {
                            let s = await this.getProvider();
                            if (!s) throw new m.N;
                            s.on && (s.on("accountsChanged", this.onAccountsChanged), s.on("chainChanged", this.onChainChanged), s.on("disconnect", this.onDisconnect)), this.emit("message", {
                                type: "connecting"
                            });
                            let p = await s.request({
                                    method: "eth_requestAccounts"
                                }),
                                g = (0, _.K)(p[0]),
                                v = await this.getChainId(),
                                x = this.isChainUnsupported(v);
                            if (a && v !== a) {
                                let s = await this.switchChain(a);
                                v = s.id, x = this.isChainUnsupported(v)
                            }
                            return this.options.shimDisconnect && this.storage ? .setItem(this.shimDisconnectKey, !0), {
                                account: g,
                                chain: {
                                    id: v,
                                    unsupported: x
                                }
                            }
                        } catch (a) {
                            if (this.isUserRejectedRequestError(a)) throw new E.ab(a);
                            if (-32002 === a.code) throw new E.pT(a);
                            throw a
                        }
                    }
                    async disconnect() {
                        let a = await this.getProvider();
                        a ? .removeListener && (a.removeListener("accountsChanged", this.onAccountsChanged), a.removeListener("chainChanged", this.onChainChanged), a.removeListener("disconnect", this.onDisconnect), this.options.shimDisconnect && this.storage ? .removeItem(this.shimDisconnectKey))
                    }
                    async getAccount() {
                        let a = await this.getProvider();
                        if (!a) throw new m.N;
                        let s = await a.request({
                            method: "eth_accounts"
                        });
                        return (0, _.K)(s[0])
                    }
                    async getChainId() {
                        let a = await this.getProvider();
                        if (!a) throw new m.N;
                        return a.request({
                            method: "eth_chainId"
                        }).then(v.J)
                    }
                    async getProvider() {
                        let a = this.options.getProvider();
                        return a && (0, x.qx)(this, g, a), (0, x.ac)(this, g)
                    }
                    async getWalletClient({
                        chainId: a
                    } = {}) {
                        let [s, p] = await Promise.all([this.getProvider(), this.getAccount()]), g = this.chains.find(s => s.id === a);
                        if (!s) throw Error("provider is required.");
                        return (0, T.K)({
                            account: p,
                            chain: g,
                            transport: (0, F.P)(s)
                        })
                    }
                    async isAuthorized() {
                        try {
                            if (this.options.shimDisconnect && !this.storage ? .getItem(this.shimDisconnectKey)) return !1;
                            let a = await this.getProvider();
                            if (!a) throw new m.N;
                            let s = await this.getAccount();
                            return !!s
                        } catch {
                            return !1
                        }
                    }
                    async switchChain(a) {
                        let s = await this.getProvider();
                        if (!s) throw new m.N;
                        let p = (0, W.eC)(a);
                        try {
                            return await Promise.all([s.request({
                                method: "wallet_switchEthereumChain",
                                params: [{
                                    chainId: p
                                }]
                            }), new Promise(s => this.on("change", ({
                                chain: p
                            }) => {
                                p ? .id === a && s()
                            }))]), this.chains.find(s => s.id === a) ? ? {
                                id: a,
                                name: `Chain ${p}`,
                                network: `${p}`,
                                nativeCurrency: {
                                    name: "Ether",
                                    decimals: 18,
                                    symbol: "ETH"
                                },
                                rpcUrls: {
                                    default: {
                                        http: [""]
                                    },
                                    public: {
                                        http: [""]
                                    }
                                }
                            }
                        } catch (v) {
                            let g = this.chains.find(s => s.id === a);
                            if (!g) throw new m.B({
                                chainId: a,
                                connectorId: this.id
                            });
                            if (4902 === v.code || v ? .data ? .originalError ? .code === 4902) try {
                                await s.request({
                                    method: "wallet_addEthereumChain",
                                    params: [{
                                        chainId: p,
                                        chainName: g.name,
                                        nativeCurrency: g.nativeCurrency,
                                        rpcUrls: [g.rpcUrls.public ? .http[0] ? ? ""],
                                        blockExplorerUrls: this.getBlockExplorerUrls(g)
                                    }]
                                });
                                let m = await this.getChainId();
                                if (m !== a) throw new E.ab(Error("User rejected switch after adding network."));
                                return g
                            } catch (a) {
                                throw new E.ab(a)
                            }
                            if (this.isUserRejectedRequestError(v)) throw new E.ab(v);
                            throw new E.x3(v)
                        }
                    }
                    async watchAsset({
                        address: a,
                        decimals: s = 18,
                        image: p,
                        symbol: g
                    }) {
                        let v = await this.getProvider();
                        if (!v) throw new m.N;
                        return v.request({
                            method: "wallet_watchAsset",
                            params: {
                                type: "ERC20",
                                options: {
                                    address: a,
                                    decimals: s,
                                    image: p,
                                    symbol: g
                                }
                            }
                        })
                    }
                    isUserRejectedRequestError(a) {
                        return 4001 === a.code
                    }
                };
            g = new WeakMap
        },
        40106: function(a, s, p) {
            "use strict";

            function normalizeChainId(a) {
                return "string" == typeof a ? Number.parseInt(a, "0x" === a.trim().substring(0, 2) ? 16 : 10) : "bigint" == typeof a ? Number(a) : a
            }
            p.d(s, {
                J: function() {
                    return normalizeChainId
                }
            })
        },
        38026: function(a, s, p) {
            "use strict";
            p.d(s, {
                B: function() {
                    return g
                },
                N: function() {
                    return m
                }
            });
            var g = class extends Error {
                    constructor({
                        chainId: a,
                        connectorId: s
                    }) {
                        super(`Chain "${a}" not configured for connector "${s}".`), this.name = "ChainNotConfiguredForConnectorError"
                    }
                },
                m = class extends Error {
                    constructor() {
                        super(...arguments), this.name = "ConnectorNotFoundError", this.message = "Connector not found"
                    }
                }
        },
        53404: function(a, s, p) {
            "use strict";
            p.d(s, {
                wR: function() {
                    return _
                },
                Ko: function() {
                    return __privateAdd
                },
                ac: function() {
                    return __privateGet
                },
                U9: function() {
                    return __privateMethod
                },
                qx: function() {
                    return __privateSet
                }
            });
            var g = p(28729),
                m = p(75404),
                v = p(71186);
            let x = (0, v.a)({
                id: 5,
                network: "goerli",
                name: "Goerli",
                nativeCurrency: {
                    name: "Goerli Ether",
                    symbol: "ETH",
                    decimals: 18
                },
                rpcUrls: {
                    alchemy: {
                        http: ["https://eth-goerli.g.alchemy.com/v2"],
                        webSocket: ["wss://eth-goerli.g.alchemy.com/v2"]
                    },
                    infura: {
                        http: ["https://goerli.infura.io/v3"],
                        webSocket: ["wss://goerli.infura.io/ws/v3"]
                    },
                    default: {
                        http: ["https://rpc.ankr.com/eth_goerli"]
                    },
                    public: {
                        http: ["https://rpc.ankr.com/eth_goerli"]
                    }
                },
                blockExplorers: {
                    etherscan: {
                        name: "Etherscan",
                        url: "https://goerli.etherscan.io"
                    },
                    default: {
                        name: "Etherscan",
                        url: "https://goerli.etherscan.io"
                    }
                },
                contracts: {
                    ensRegistry: {
                        address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
                    },
                    ensUniversalResolver: {
                        address: "0x56522D00C410a43BFfDF00a9A569489297385790",
                        blockCreated: 8765204
                    },
                    multicall3: {
                        address: "0xca11bde05977b3631167028862be2a173976ca11",
                        blockCreated: 6507670
                    }
                },
                testnet: !0
            });
            var __accessCheck = (a, s, p) => {
                    if (!s.has(a)) throw TypeError("Cannot " + p)
                },
                __privateGet = (a, s, p) => (__accessCheck(a, s, "read from private field"), p ? p.call(a) : s.get(a)),
                __privateAdd = (a, s, p) => {
                    if (s.has(a)) throw TypeError("Cannot add the same private member more than once");
                    s instanceof WeakSet ? s.add(a) : s.set(a, p)
                },
                __privateSet = (a, s, p, g) => (__accessCheck(a, s, "write to private field"), g ? g.call(a, p) : s.set(a, p), p),
                __privateMethod = (a, s, p) => (__accessCheck(a, s, "access private method"), p),
                _ = class extends g {
                    constructor({
                        chains: a = [m.R, x],
                        options: s
                    }) {
                        super(), this.chains = a, this.options = s
                    }
                    getBlockExplorerUrls(a) {
                        let {
                            default: s,
                            ...p
                        } = a.blockExplorers ? ? {};
                        if (s) return [s.url, ...Object.values(p).map(a => a.url)]
                    }
                    isChainUnsupported(a) {
                        return !this.chains.some(s => s.id === a)
                    }
                    setStorage(a) {
                        this.storage = a
                    }
                }
        },
        10953: function(a, s, p) {
            "use strict";
            p.d(s, {
                QB: function() {
                    return configureChains
                },
                $j: function() {
                    return connect
                },
                _g: function() {
                    return createConfig
                },
                o6: function() {
                    return createStorage
                },
                vZ: function() {
                    return function deepEqual(a, s) {
                        if (a === s) return !0;
                        if (a && s && "object" == typeof a && "object" == typeof s) {
                            let p, g;
                            if (a.constructor !== s.constructor) return !1;
                            if (Array.isArray(a) && Array.isArray(s)) {
                                if ((p = a.length) != s.length) return !1;
                                for (g = p; 0 != g--;)
                                    if (!deepEqual(a[g], s[g])) return !1;
                                return !0
                            }
                            if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === s.valueOf();
                            if (a.toString !== Object.prototype.toString) return a.toString() === s.toString();
                            let m = Object.keys(a);
                            if ((p = m.length) !== Object.keys(s).length) return !1;
                            for (g = p; 0 != g--;)
                                if (!Object.prototype.hasOwnProperty.call(s, m[g])) return !1;
                            for (g = p; 0 != g--;) {
                                let p = m[g];
                                if (p && !deepEqual(a[p], s[p])) return !1
                            }
                            return !0
                        }
                        return a != a && s != s
                    }
                },
                zP: function() {
                    return disconnect
                },
                EG: function() {
                    return fetchBalance
                },
                RQ: function() {
                    return fetchBlockNumber
                },
                w6: function() {
                    return fetchEnsAvatar
                },
                Lk: function() {
                    return fetchEnsName
                },
                D0: function() {
                    return getAccount
                },
                Hy: function() {
                    return getNetwork
                },
                uV: function() {
                    return getPublicClient
                },
                jr: function() {
                    return getWebSocketPublicClient
                },
                wp: function() {
                    return tt
                },
                a4: function() {
                    return chunk_TSH6VVF4_readContract
                },
                If: function() {
                    return switchNetwork
                },
                Mn: function() {
                    return waitForTransaction
                },
                uH: function() {
                    return watchAccount
                },
                QC: function() {
                    return watchNetwork
                },
                pC: function() {
                    return watchPublicClient
                },
                fq: function() {
                    return watchWebSocketPublicClient
                },
                n9: function() {
                    return writeContract
                }
            });
            var g, m, v, x, _, E = p(17289),
                __accessCheck = (a, s, p) => {
                    if (!s.has(a)) throw TypeError("Cannot " + p)
                },
                __privateGet = (a, s, p) => (__accessCheck(a, s, "read from private field"), p ? p.call(a) : s.get(a)),
                __privateAdd = (a, s, p) => {
                    if (s.has(a)) throw TypeError("Cannot add the same private member more than once");
                    s instanceof WeakSet ? s.add(a) : s.set(a, p)
                },
                __privateSet = (a, s, p, g) => (__accessCheck(a, s, "write to private field"), g ? g.call(a, p) : s.set(a, p), p),
                __privateMethod = (a, s, p) => (__accessCheck(a, s, "access private method"), p),
                T = p(30315),
                F = p(42980),
                W = p(3458),
                z = p(53883),
                Z = p(94540),
                Q = p(94973),
                Y = p(21693),
                X = p(28483),
                J = p(95950),
                ei = p(98458);

            function isNullUniversalResolverError(a, s) {
                if (!(a instanceof J.G)) return !1;
                let p = a.walk(a => a instanceof ei.Lu);
                return p instanceof ei.Lu && (!!(p.data ? .errorName === "ResolverNotFound" || p.data ? .errorName === "ResolverWildcardNotSupported" || p.reason ? .includes("Wildcard on non-extended resolvers is not supported")) || "reverse" === s && p.reason === X.$[50])
            }
            var en = p(69809),
                eo = p(56728),
                ea = p(55852),
                es = p(45008);

            function encodedLabelToLabelhash(a) {
                if (66 !== a.length || 0 !== a.indexOf("[") || 65 !== a.indexOf("]")) return null;
                let s = `0x${a.slice(1,65)}`;
                return (0, es.v)(s) ? s : null
            }

            function namehash(a) {
                let s = new Uint8Array(32).fill(0);
                if (!a) return (0, Y.ci)(s);
                let p = a.split(".");
                for (let a = p.length - 1; a >= 0; a -= 1) {
                    let g = encodedLabelToLabelhash(p[a]),
                        m = g ? (0, eo.O0)(g) : (0, ea.w)((0, eo.qX)(p[a]), "bytes");
                    s = (0, ea.w)((0, en.zo)([s, m]), "bytes")
                }
                return (0, Y.ci)(s)
            }

            function packetToBytes(a) {
                let s = a.replace(/^\.|\.$/gm, "");
                if (0 === s.length) return new Uint8Array(1);
                let p = new Uint8Array((0, eo.qX)(s).byteLength + 2),
                    g = 0,
                    m = s.split(".");
                for (let a = 0; a < m.length; a++) {
                    let s = (0, eo.qX)(m[a]);
                    if (s.byteLength > 255) {
                        var v;
                        s = (0, eo.qX)((v = function(a) {
                            let s = new Uint8Array(32).fill(0);
                            return a ? encodedLabelToLabelhash(a) || (0, ea.w)((0, eo.qX)(a)) : (0, Y.ci)(s)
                        }(m[a]), `[${v.slice(2)}]`))
                    }
                    p[g] = s.length, p.set(s, g + 1), g += s.length + 1
                }
                return p.byteLength !== g + 1 ? p.slice(0, g + 1) : p
            }
            var el = p(82600),
                ec = p(71878),
                eu = p(48519);

            function getContractError(a, {
                abi: s,
                address: p,
                args: g,
                docsPath: m,
                functionName: v,
                sender: x
            }) {
                let {
                    code: _,
                    data: E,
                    message: T,
                    shortMessage: F
                } = a instanceof ei.VQ ? a : a instanceof J.G ? a.walk(a => "data" in a) || a.walk() : {}, W = a instanceof ec.wb ? new ei.Dk({
                    functionName: v
                }) : [3, eu.XS.code].includes(_) && (E || T || F) ? new ei.Lu({
                    abi: s,
                    data: "object" == typeof E ? E.data : E,
                    functionName: v,
                    message: F ? ? T
                }) : a;
                return new ei.uq(W, {
                    abi: s,
                    args: g,
                    contractAddress: p,
                    docsPath: m,
                    functionName: v,
                    sender: x
                })
            }
            var ed = p(98873);
            async function readContract(a, {
                abi: s,
                address: p,
                args: g,
                functionName: m,
                ...v
            }) {
                let x = (0, z.R)({
                    abi: s,
                    args: g,
                    functionName: m
                });
                try {
                    let {
                        data: _
                    } = await (0, el.s)(a, ed.R, "call")({
                        data: x,
                        to: p,
                        ...v
                    });
                    return (0, W.k)({
                        abi: s,
                        args: g,
                        functionName: m,
                        data: _ || "0x"
                    })
                } catch (a) {
                    throw getContractError(a, {
                        abi: s,
                        address: p,
                        args: g,
                        docsPath: "/docs/contract/readContract",
                        functionName: m
                    })
                }
            }
            async function getEnsAddress(a, {
                blockNumber: s,
                blockTag: p,
                coinType: g,
                name: m,
                universalResolverAddress: v
            }) {
                let x = v;
                if (!x) {
                    if (!a.chain) throw Error("client chain not configured. universalResolverAddress is required.");
                    x = (0, Z.L)({
                        blockNumber: s,
                        chain: a.chain,
                        contract: "ensUniversalResolver"
                    })
                }
                try {
                    let v = (0, z.R)({
                            abi: F.X$,
                            functionName: "addr",
                            ...null != g ? {
                                args: [namehash(m), BigInt(g)]
                            } : {
                                args: [namehash(m)]
                            }
                        }),
                        _ = await (0, el.s)(a, readContract, "readContract")({
                            address: x,
                            abi: F.k3,
                            functionName: "resolve",
                            args: [(0, Y.NC)(packetToBytes(m)), v],
                            blockNumber: s,
                            blockTag: p
                        });
                    if ("0x" === _[0]) return null;
                    let E = (0, W.k)({
                        abi: F.X$,
                        args: null != g ? [namehash(m), BigInt(g)] : void 0,
                        functionName: "addr",
                        data: _[0]
                    });
                    if ("0x" === E || "0x00" === (0, Q.f)(E)) return null;
                    return E
                } catch (a) {
                    if (isNullUniversalResolverError(a, "resolve")) return null;
                    throw a
                }
            }
            let EnsAvatarInvalidMetadataError = class EnsAvatarInvalidMetadataError extends J.G {
                constructor({
                    data: a
                }) {
                    super("Unable to extract image from metadata. The metadata may be malformed or invalid.", {
                        metaMessages: ["- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.", "", `Provided data: ${JSON.stringify(a)}`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "EnsAvatarInvalidMetadataError"
                    })
                }
            };
            let EnsAvatarInvalidNftUriError = class EnsAvatarInvalidNftUriError extends J.G {
                constructor({
                    reason: a
                }) {
                    super(`ENS NFT avatar URI is invalid. ${a}`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "EnsAvatarInvalidNftUriError"
                    })
                }
            };
            let EnsAvatarUriResolutionError = class EnsAvatarUriResolutionError extends J.G {
                constructor({
                    uri: a
                }) {
                    super(`Unable to resolve ENS avatar URI "${a}". The URI may be malformed, invalid, or does not respond with a valid image.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "EnsAvatarUriResolutionError"
                    })
                }
            };
            let EnsAvatarUnsupportedNamespaceError = class EnsAvatarUnsupportedNamespaceError extends J.G {
                constructor({
                    namespace: a
                }) {
                    super(`ENS NFT avatar namespace "${a}" is not supported. Must be "erc721" or "erc1155".`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "EnsAvatarUnsupportedNamespaceError"
                    })
                }
            };
            let eh = /(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/,
                ep = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/,
                ef = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/,
                eg = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;
            async function isImageUri(a) {
                try {
                    let s = await fetch(a, {
                        method: "HEAD"
                    });
                    if (200 === s.status) {
                        let a = s.headers.get("content-type");
                        return a ? .startsWith("image/")
                    }
                    return !1
                } catch (s) {
                    if ("object" == typeof s && void 0 !== s.response || !globalThis.hasOwnProperty("Image")) return !1;
                    return new Promise(s => {
                        let p = new Image;
                        p.onload = () => {
                            s(!0)
                        }, p.onerror = () => {
                            s(!1)
                        }, p.src = a
                    })
                }
            }

            function getGateway(a, s) {
                return a ? a.endsWith("/") ? a.slice(0, -1) : a : s
            }

            function resolveAvatarUri({
                uri: a,
                gatewayUrls: s
            }) {
                let p = ef.test(a);
                if (p) return {
                    uri: a,
                    isOnChain: !0,
                    isEncoded: p
                };
                let g = getGateway(s ? .ipfs, "https://ipfs.io"),
                    m = getGateway(s ? .arweave, "https://arweave.net"),
                    v = a.match(eh),
                    {
                        protocol: x,
                        subpath: _,
                        target: E,
                        subtarget: T = ""
                    } = v ? .groups || {},
                    F = "ipns:/" === x || "ipns/" === _,
                    W = "ipfs:/" === x || "ipfs/" === _ || ep.test(a);
                if (a.startsWith("http") && !F && !W) {
                    let p = a;
                    return s ? .arweave && (p = a.replace(/https:\/\/arweave.net/g, s ? .arweave)), {
                        uri: p,
                        isOnChain: !1,
                        isEncoded: !1
                    }
                }
                if ((F || W) && E) return {
                    uri: `${g}/${F?"ipns":"ipfs"}/${E}${T}`,
                    isOnChain: !1,
                    isEncoded: !1
                };
                if ("ar:/" === x && E) return {
                    uri: `${m}/${E}${T||""}`,
                    isOnChain: !1,
                    isEncoded: !1
                };
                let z = a.replace(eg, "");
                if (z.startsWith("<svg") && (z = `data:image/svg+xml;base64,${btoa(z)}`), z.startsWith("data:") || z.startsWith("{")) return {
                    uri: z,
                    isOnChain: !0,
                    isEncoded: !1
                };
                throw new EnsAvatarUriResolutionError({
                    uri: a
                })
            }

            function getJsonImage(a) {
                if ("object" != typeof a || !("image" in a) && !("image_url" in a) && !("image_data" in a)) throw new EnsAvatarInvalidMetadataError({
                    data: a
                });
                return a.image || a.image_url || a.image_data
            }
            async function getMetadataAvatarUri({
                gatewayUrls: a,
                uri: s
            }) {
                try {
                    let p = await fetch(s).then(a => a.json()),
                        g = await parseAvatarUri({
                            gatewayUrls: a,
                            uri: getJsonImage(p)
                        });
                    return g
                } catch {
                    throw new EnsAvatarUriResolutionError({
                        uri: s
                    })
                }
            }
            async function parseAvatarUri({
                gatewayUrls: a,
                uri: s
            }) {
                let {
                    uri: p,
                    isOnChain: g
                } = resolveAvatarUri({
                    uri: s,
                    gatewayUrls: a
                });
                if (g) return p;
                let m = await isImageUri(p);
                if (m) return p;
                throw new EnsAvatarUriResolutionError({
                    uri: s
                })
            }
            async function getNftTokenUri(a, {
                nft: s
            }) {
                if ("erc721" === s.namespace) return readContract(a, {
                    address: s.contractAddress,
                    abi: [{
                        name: "tokenURI",
                        type: "function",
                        stateMutability: "view",
                        inputs: [{
                            name: "tokenId",
                            type: "uint256"
                        }],
                        outputs: [{
                            name: "",
                            type: "string"
                        }]
                    }],
                    functionName: "tokenURI",
                    args: [BigInt(s.tokenID)]
                });
                if ("erc1155" === s.namespace) return readContract(a, {
                    address: s.contractAddress,
                    abi: [{
                        name: "uri",
                        type: "function",
                        stateMutability: "view",
                        inputs: [{
                            name: "_id",
                            type: "uint256"
                        }],
                        outputs: [{
                            name: "",
                            type: "string"
                        }]
                    }],
                    functionName: "uri",
                    args: [BigInt(s.tokenID)]
                });
                throw new EnsAvatarUnsupportedNamespaceError({
                    namespace: s.namespace
                })
            }
            async function parseAvatarRecord(a, {
                gatewayUrls: s,
                record: p
            }) {
                return /eip155:/i.test(p) ? parseNftAvatarUri(a, {
                    gatewayUrls: s,
                    record: p
                }) : parseAvatarUri({
                    uri: p,
                    gatewayUrls: s
                })
            }
            async function parseNftAvatarUri(a, {
                gatewayUrls: s,
                record: p
            }) {
                let g = function(a) {
                        let s = a;
                        s.startsWith("did:nft:") && (s = s.replace("did:nft:", "").replace(/_/g, "/"));
                        let [p, g, m] = s.split("/"), [v, x] = p.split(":"), [_, E] = g.split(":");
                        if (!v || "eip155" !== v.toLowerCase()) throw new EnsAvatarInvalidNftUriError({
                            reason: "Only EIP-155 supported"
                        });
                        if (!x) throw new EnsAvatarInvalidNftUriError({
                            reason: "Chain ID not found"
                        });
                        if (!E) throw new EnsAvatarInvalidNftUriError({
                            reason: "Contract address not found"
                        });
                        if (!m) throw new EnsAvatarInvalidNftUriError({
                            reason: "Token ID not found"
                        });
                        if (!_) throw new EnsAvatarInvalidNftUriError({
                            reason: "ERC namespace not found"
                        });
                        return {
                            chainID: parseInt(x),
                            namespace: _.toLowerCase(),
                            contractAddress: E,
                            tokenID: m
                        }
                    }(p),
                    m = await getNftTokenUri(a, {
                        nft: g
                    }),
                    {
                        uri: v,
                        isOnChain: x,
                        isEncoded: _
                    } = resolveAvatarUri({
                        uri: m,
                        gatewayUrls: s
                    });
                if (x && (v.includes("data:application/json;base64,") || v.startsWith("{"))) {
                    let a = _ ? atob(v.replace("data:application/json;base64,", "")) : v,
                        p = JSON.parse(a);
                    return parseAvatarUri({
                        uri: getJsonImage(p),
                        gatewayUrls: s
                    })
                }
                let E = g.tokenID;
                return "erc1155" === g.namespace && (E = E.replace("0x", "").padStart(64, "0")), getMetadataAvatarUri({
                    gatewayUrls: s,
                    uri: v.replace(/(?:0x)?{id}/, E)
                })
            }
            async function getEnsText(a, {
                blockNumber: s,
                blockTag: p,
                name: g,
                key: m,
                universalResolverAddress: v
            }) {
                let x = v;
                if (!x) {
                    if (!a.chain) throw Error("client chain not configured. universalResolverAddress is required.");
                    x = (0, Z.L)({
                        blockNumber: s,
                        chain: a.chain,
                        contract: "ensUniversalResolver"
                    })
                }
                try {
                    let v = await (0, el.s)(a, readContract, "readContract")({
                        address: x,
                        abi: F.k3,
                        functionName: "resolve",
                        args: [(0, Y.NC)(packetToBytes(g)), (0, z.R)({
                            abi: F.nZ,
                            functionName: "text",
                            args: [namehash(g), m]
                        })],
                        blockNumber: s,
                        blockTag: p
                    });
                    if ("0x" === v[0]) return null;
                    let _ = (0, W.k)({
                        abi: F.nZ,
                        functionName: "text",
                        data: v[0]
                    });
                    return "" === _ ? null : _
                } catch (a) {
                    if (isNullUniversalResolverError(a, "resolve")) return null;
                    throw a
                }
            }
            async function getEnsAvatar(a, {
                blockNumber: s,
                blockTag: p,
                gatewayUrls: g,
                name: m,
                universalResolverAddress: v
            }) {
                let x = await (0, el.s)(a, getEnsText, "getEnsText")({
                    blockNumber: s,
                    blockTag: p,
                    key: "avatar",
                    name: m,
                    universalResolverAddress: v
                });
                if (!x) return null;
                try {
                    return await parseAvatarRecord(a, {
                        record: x,
                        gatewayUrls: g
                    })
                } catch {
                    return null
                }
            }
            async function getEnsName(a, {
                address: s,
                blockNumber: p,
                blockTag: g,
                universalResolverAddress: m
            }) {
                let v = m;
                if (!v) {
                    if (!a.chain) throw Error("client chain not configured. universalResolverAddress is required.");
                    v = (0, Z.L)({
                        blockNumber: p,
                        chain: a.chain,
                        contract: "ensUniversalResolver"
                    })
                }
                let x = `${s.toLowerCase().substring(2)}.addr.reverse`;
                try {
                    let s = await (0, el.s)(a, readContract, "readContract")({
                        address: v,
                        abi: F.du,
                        functionName: "reverse",
                        args: [(0, Y.NC)(packetToBytes(x))],
                        blockNumber: p,
                        blockTag: g
                    });
                    return s[0]
                } catch (a) {
                    if (isNullUniversalResolverError(a, "reverse")) return null;
                    throw a
                }
            }
            async function getEnsResolver(a, {
                blockNumber: s,
                blockTag: p,
                name: g,
                universalResolverAddress: m
            }) {
                let v = m;
                if (!v) {
                    if (!a.chain) throw Error("client chain not configured. universalResolverAddress is required.");
                    v = (0, Z.L)({
                        blockNumber: s,
                        chain: a.chain,
                        contract: "ensUniversalResolver"
                    })
                }
                let [x] = await (0, el.s)(a, readContract, "readContract")({
                    address: v,
                    abi: [{
                        inputs: [{
                            type: "bytes"
                        }],
                        name: "findResolver",
                        outputs: [{
                            type: "address"
                        }, {
                            type: "bytes32"
                        }],
                        stateMutability: "view",
                        type: "function"
                    }],
                    functionName: "findResolver",
                    args: [(0, Y.NC)(packetToBytes(g))],
                    blockNumber: s,
                    blockTag: p
                });
                return x
            }

            function createFilterRequestScope(a, {
                method: s
            }) {
                let p = {};
                return "fallback" === a.transport.type && a.transport.onResponse ? .(({
                    method: a,
                    response: g,
                    status: m,
                    transport: v
                }) => {
                    "success" === m && s === a && (p[g] = v.request)
                }), s => p[s] || a.request
            }
            async function createBlockFilter(a) {
                let s = createFilterRequestScope(a, {
                        method: "eth_newBlockFilter"
                    }),
                    p = await a.request({
                        method: "eth_newBlockFilter"
                    });
                return {
                    id: p,
                    request: s(p),
                    type: "block"
                }
            }
            let FilterTypeNotSupportedError = class FilterTypeNotSupportedError extends J.G {
                constructor(a) {
                    super(`Filter type "${a}" is not supported.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "FilterTypeNotSupportedError"
                    })
                }
            };
            var ew = p(77688),
                em = p(98967),
                eb = p(40928),
                ev = p(77804);

            function encodeEventTopics({
                abi: a,
                eventName: s,
                args: p
            }) {
                let g = a[0];
                if (s && !(g = (0, ev.m)({
                        abi: a,
                        args: p,
                        name: s
                    }))) throw new ec.mv(s, {
                    docsPath: "/docs/contract/encodeEventTopics"
                });
                if ("event" !== g.type) throw new ec.mv(void 0, {
                    docsPath: "/docs/contract/encodeEventTopics"
                });
                let m = (0, eb.t)(g),
                    v = (0, ew.e)(m),
                    x = [];
                if (p && "inputs" in g) {
                    let a = g.inputs ? .filter(a => "indexed" in a && a.indexed),
                        s = Array.isArray(p) ? p : Object.values(p).length > 0 ? a ? .map(a => p[a.name]) ? ? [] : [];
                    s.length > 0 && (x = a ? .map((a, p) => Array.isArray(s[p]) ? s[p].map((g, m) => encodeArg({
                        param: a,
                        value: s[p][m]
                    })) : s[p] ? encodeArg({
                        param: a,
                        value: s[p]
                    }) : null) ? ? [])
                }
                return [v, ...x]
            }

            function encodeArg({
                param: a,
                value: s
            }) {
                if ("string" === a.type || "bytes" === a.type) return (0, ea.w)((0, eo.O0)(s));
                if ("tuple" === a.type || a.type.match(/^(.*)\[(\d+)?\]$/)) throw new FilterTypeNotSupportedError(a.type);
                return (0, em.E)([a], [s])
            }
            async function createContractEventFilter(a, {
                address: s,
                abi: p,
                args: g,
                eventName: m,
                fromBlock: v,
                strict: x,
                toBlock: _
            }) {
                let E = createFilterRequestScope(a, {
                        method: "eth_newFilter"
                    }),
                    T = m ? encodeEventTopics({
                        abi: p,
                        args: g,
                        eventName: m
                    }) : void 0,
                    F = await a.request({
                        method: "eth_newFilter",
                        params: [{
                            address: s,
                            fromBlock: "bigint" == typeof v ? (0, Y.eC)(v) : v,
                            toBlock: "bigint" == typeof _ ? (0, Y.eC)(_) : _,
                            topics: T
                        }]
                    });
                return {
                    abi: p,
                    args: g,
                    eventName: m,
                    id: F,
                    request: E(F),
                    strict: x,
                    type: "event"
                }
            }
            async function createEventFilter(a, {
                address: s,
                args: p,
                event: g,
                events: m,
                fromBlock: v,
                strict: x,
                toBlock: _
            } = {}) {
                let E = m ? ? (g ? [g] : void 0),
                    T = createFilterRequestScope(a, {
                        method: "eth_newFilter"
                    }),
                    F = [];
                E && (F = [E.flatMap(a => encodeEventTopics({
                    abi: [a],
                    eventName: a.name,
                    args: p
                }))], g && (F = F[0]));
                let W = await a.request({
                    method: "eth_newFilter",
                    params: [{
                        address: s,
                        fromBlock: "bigint" == typeof v ? (0, Y.eC)(v) : v,
                        toBlock: "bigint" == typeof _ ? (0, Y.eC)(_) : _,
                        ...F.length ? {
                            topics: F
                        } : {}
                    }]
                });
                return {
                    abi: E,
                    args: p,
                    eventName: g ? g.name : void 0,
                    fromBlock: v,
                    id: W,
                    request: T(W),
                    strict: x,
                    toBlock: _,
                    type: "event"
                }
            }
            async function createPendingTransactionFilter(a) {
                let s = createFilterRequestScope(a, {
                        method: "eth_newPendingTransactionFilter"
                    }),
                    p = await a.request({
                        method: "eth_newPendingTransactionFilter"
                    });
                return {
                    id: p,
                    request: s(p),
                    type: "transaction"
                }
            }
            var ey = p(4832),
                eC = p(89412);
            async function estimateContractGas(a, {
                abi: s,
                address: p,
                args: g,
                functionName: m,
                ...v
            }) {
                let x = (0, z.R)({
                    abi: s,
                    args: g,
                    functionName: m
                });
                try {
                    let s = await (0, el.s)(a, eC.Q, "estimateGas")({
                        data: x,
                        to: p,
                        ...v
                    });
                    return s
                } catch (x) {
                    let a = v.account ? (0, ey.T)(v.account) : void 0;
                    throw getContractError(x, {
                        abi: s,
                        address: p,
                        args: g,
                        docsPath: "/docs/contract/estimateContractGas",
                        functionName: m,
                        sender: a ? .address
                    })
                }
            }
            var ex = p(77451),
                e_ = p(17976);
            async function getBalance(a, {
                address: s,
                blockNumber: p,
                blockTag: g = "latest"
            }) {
                let m = p ? (0, Y.eC)(p) : void 0,
                    v = await a.request({
                        method: "eth_getBalance",
                        params: [s, m || g]
                    });
                return BigInt(v)
            }
            var eE = p(69059);
            let ek = new Map,
                e$ = new Map;
            async function withCache(a, {
                cacheKey: s,
                cacheTime: p = 1 / 0
            }) {
                let g = function(a) {
                        let buildCache = (a, s) => ({
                                clear: () => s.delete(a),
                                get: () => s.get(a),
                                set: p => s.set(a, p)
                            }),
                            s = buildCache(a, ek),
                            p = buildCache(a, e$);
                        return {
                            clear: () => {
                                s.clear(), p.clear()
                            },
                            promise: s,
                            response: p
                        }
                    }(s),
                    m = g.response.get();
                if (m && p > 0) {
                    let a = new Date().getTime() - m.created.getTime();
                    if (a < p) return m.data
                }
                let v = g.promise.get();
                v || (v = a(), g.promise.set(v));
                try {
                    let a = await v;
                    return g.response.set({
                        created: new Date,
                        data: a
                    }), a
                } finally {
                    g.promise.clear()
                }
            }
            let cacheKey = a => `blockNumber.${a}`;
            async function getBlockNumber(a, {
                cacheTime: s = a.cacheTime,
                maxAge: p
            } = {}) {
                let g = await withCache(() => a.request({
                    method: "eth_blockNumber"
                }), {
                    cacheKey: cacheKey(a.uid),
                    cacheTime: p ? ? s
                });
                return BigInt(g)
            }
            var eP = p(30838);
            async function getBlockTransactionCount(a, {
                blockHash: s,
                blockNumber: p,
                blockTag: g = "latest"
            } = {}) {
                let m;
                let v = void 0 !== p ? (0, Y.eC)(p) : void 0;
                return m = s ? await a.request({
                    method: "eth_getBlockTransactionCountByHash",
                    params: [s]
                }) : await a.request({
                    method: "eth_getBlockTransactionCountByNumber",
                    params: [v || g]
                }), (0, eP.ly)(m)
            }
            async function getBytecode(a, {
                address: s,
                blockNumber: p,
                blockTag: g = "latest"
            }) {
                let m = void 0 !== p ? (0, Y.eC)(p) : void 0,
                    v = await a.request({
                        method: "eth_getCode",
                        params: [s, m || g]
                    });
                if ("0x" !== v) return v
            }
            var eS = p(13438),
                eA = p(87425);
            let eO = "/docs/contract/decodeEventLog";

            function decodeEventLog({
                abi: a,
                data: s,
                strict: p,
                topics: g
            }) {
                let m = p ? ? !0,
                    [v, ...x] = g;
                if (!v) throw new ec.FM({
                    docsPath: eO
                });
                let _ = a.find(a => "event" === a.type && v === (0, ew.e)((0, eb.t)(a)));
                if (!(_ && "name" in _) || "event" !== _.type) throw new ec.lC(v, {
                    docsPath: eO
                });
                let {
                    name: E,
                    inputs: T
                } = _, F = T ? .some(a => !("name" in a && a.name)), W = F ? [] : {}, z = T.filter(a => "indexed" in a && a.indexed);
                for (let a = 0; a < z.length; a++) {
                    let s = z[a],
                        p = x[a];
                    if (!p) throw new ec.Gy({
                        abiItem: _,
                        param: s
                    });
                    W[s.name || a] = function({
                        param: a,
                        value: s
                    }) {
                        if ("string" === a.type || "bytes" === a.type || "tuple" === a.type || a.type.match(/^(.*)\[(\d+)?\]$/)) return s;
                        let p = (0, eA.r)([a], s) || [];
                        return p[0]
                    }({
                        param: s,
                        value: p
                    })
                }
                let Z = T.filter(a => !("indexed" in a && a.indexed));
                if (Z.length > 0) {
                    if (s && "0x" !== s) try {
                        let a = (0, eA.r)(Z, s);
                        if (a) {
                            if (F) W = [...W, ...a];
                            else
                                for (let s = 0; s < Z.length; s++) W[Z[s].name] = a[s]
                        }
                    } catch (a) {
                        if (m) {
                            if (a instanceof ec.xB) throw new ec.SM({
                                abiItem: _,
                                data: a.data,
                                params: a.params,
                                size: a.size
                            });
                            throw a
                        }
                    } else if (m) throw new ec.SM({
                        abiItem: _,
                        data: "0x",
                        params: Z,
                        size: 0
                    })
                }
                return {
                    eventName: E,
                    args: Object.values(W).length > 0 ? W : void 0
                }
            }

            function formatLog(a, {
                args: s,
                eventName: p
            } = {}) {
                return { ...a,
                    blockHash: a.blockHash ? a.blockHash : null,
                    blockNumber: a.blockNumber ? BigInt(a.blockNumber) : null,
                    logIndex: a.logIndex ? Number(a.logIndex) : null,
                    transactionHash: a.transactionHash ? a.transactionHash : null,
                    transactionIndex: a.transactionIndex ? Number(a.transactionIndex) : null,
                    ...p ? {
                        args: s,
                        eventName: p
                    } : {}
                }
            }
            async function getLogs(a, {
                address: s,
                blockHash: p,
                fromBlock: g,
                toBlock: m,
                event: v,
                events: x,
                args: _,
                strict: E
            } = {}) {
                let T = E ? ? !1,
                    F = x ? ? (v ? [v] : void 0),
                    W = [];
                return F && (W = [F.flatMap(a => encodeEventTopics({
                    abi: [a],
                    eventName: a.name,
                    args: _
                }))], v && (W = W[0])), (p ? await a.request({
                    method: "eth_getLogs",
                    params: [{
                        address: s,
                        topics: W,
                        blockHash: p
                    }]
                }) : await a.request({
                    method: "eth_getLogs",
                    params: [{
                        address: s,
                        topics: W,
                        fromBlock: "bigint" == typeof g ? (0, Y.eC)(g) : g,
                        toBlock: "bigint" == typeof m ? (0, Y.eC)(m) : m
                    }]
                })).map(a => {
                    try {
                        let {
                            eventName: s,
                            args: p
                        } = F ? decodeEventLog({
                            abi: F,
                            data: a.data,
                            topics: a.topics,
                            strict: T
                        }) : {
                            eventName: void 0,
                            args: void 0
                        };
                        return formatLog(a, {
                            args: p,
                            eventName: s
                        })
                    } catch (g) {
                        let s, p;
                        if (g instanceof ec.SM || g instanceof ec.Gy) {
                            if (T) return;
                            s = g.abiItem.name, p = g.abiItem.inputs ? .some(a => !("name" in a && a.name))
                        }
                        return formatLog(a, {
                            args: p ? [] : {},
                            eventName: s
                        })
                    }
                }).filter(Boolean)
            }
            async function getContractEvents(a, {
                abi: s,
                address: p,
                args: g,
                blockHash: m,
                eventName: v,
                fromBlock: x,
                toBlock: _,
                strict: E
            }) {
                let T = v ? (0, ev.m)({
                        abi: s,
                        name: v
                    }) : void 0,
                    F = T ? void 0 : s.filter(a => "event" === a.type);
                return (0, el.s)(a, getLogs, "getLogs")({
                    address: p,
                    args: g,
                    blockHash: m,
                    event: T,
                    events: F,
                    fromBlock: x,
                    toBlock: _,
                    strict: E
                })
            }
            async function getFeeHistory(a, {
                blockCount: s,
                blockNumber: p,
                blockTag: g = "latest",
                rewardPercentiles: m
            }) {
                let v = p ? (0, Y.eC)(p) : void 0,
                    x = await a.request({
                        method: "eth_feeHistory",
                        params: [(0, Y.eC)(s), v || g, m]
                    });
                return {
                    baseFeePerGas: x.baseFeePerGas.map(a => BigInt(a)),
                    gasUsedRatio: x.gasUsedRatio,
                    oldestBlock: BigInt(x.oldestBlock),
                    reward: x.reward ? .map(a => a.map(a => BigInt(a)))
                }
            }
            async function getFilterChanges(a, {
                filter: s
            }) {
                let p = "strict" in s && s.strict,
                    g = await s.request({
                        method: "eth_getFilterChanges",
                        params: [s.id]
                    });
                return g.map(a => {
                    if ("string" == typeof a) return a;
                    try {
                        let {
                            eventName: g,
                            args: m
                        } = "abi" in s && s.abi ? decodeEventLog({
                            abi: s.abi,
                            data: a.data,
                            topics: a.topics,
                            strict: p
                        }) : {
                            eventName: void 0,
                            args: void 0
                        };
                        return formatLog(a, {
                            args: m,
                            eventName: g
                        })
                    } catch (m) {
                        let p, g;
                        if (m instanceof ec.SM || m instanceof ec.Gy) {
                            if ("strict" in s && s.strict) return;
                            p = m.abiItem.name, g = m.abiItem.inputs ? .some(a => !("name" in a && a.name))
                        }
                        return formatLog(a, {
                            args: g ? [] : {},
                            eventName: p
                        })
                    }
                }).filter(Boolean)
            }
            async function getFilterLogs(a, {
                filter: s
            }) {
                let p = s.strict ? ? !1,
                    g = await s.request({
                        method: "eth_getFilterLogs",
                        params: [s.id]
                    });
                return g.map(a => {
                    try {
                        let {
                            eventName: g,
                            args: m
                        } = "abi" in s && s.abi ? decodeEventLog({
                            abi: s.abi,
                            data: a.data,
                            topics: a.topics,
                            strict: p
                        }) : {
                            eventName: void 0,
                            args: void 0
                        };
                        return formatLog(a, {
                            args: m,
                            eventName: g
                        })
                    } catch (m) {
                        let p, g;
                        if (m instanceof ec.SM || m instanceof ec.Gy) {
                            if ("strict" in s && s.strict) return;
                            p = m.abiItem.name, g = m.abiItem.inputs ? .some(a => !("name" in a && a.name))
                        }
                        return formatLog(a, {
                            args: g ? [] : {},
                            eventName: p
                        })
                    }
                }).filter(Boolean)
            }
            var eR = p(75188);
            async function getProof(a, {
                address: s,
                blockNumber: p,
                blockTag: g,
                storageKeys: m
            }) {
                let v = void 0 !== p ? (0, Y.eC)(p) : void 0,
                    x = await a.request({
                        method: "eth_getProof",
                        params: [s, m, v || (g ? ? "latest")]
                    });
                return { ...x,
                    balance: x.balance ? BigInt(x.balance) : void 0,
                    nonce: x.nonce ? (0, eP.ly)(x.nonce) : void 0,
                    storageProof: x.storageProof ? x.storageProof.map(a => ({ ...a,
                        value: BigInt(a.value)
                    })) : void 0
                }
            }
            async function getStorageAt(a, {
                address: s,
                blockNumber: p,
                blockTag: g = "latest",
                slot: m
            }) {
                let v = void 0 !== p ? (0, Y.eC)(p) : void 0,
                    x = await a.request({
                        method: "eth_getStorageAt",
                        params: [s, m, v || g]
                    });
                return x
            }
            var eT = p(44818),
                eI = p(52017);
            async function getTransaction(a, {
                blockHash: s,
                blockNumber: p,
                blockTag: g,
                hash: m,
                index: v
            }) {
                let x = g || "latest",
                    _ = void 0 !== p ? (0, Y.eC)(p) : void 0,
                    E = null;
                if (m ? E = await a.request({
                        method: "eth_getTransactionByHash",
                        params: [m]
                    }) : s ? E = await a.request({
                        method: "eth_getTransactionByBlockHashAndIndex",
                        params: [s, (0, Y.eC)(v)]
                    }) : (_ || x) && (E = await a.request({
                        method: "eth_getTransactionByBlockNumberAndIndex",
                        params: [_ || x, (0, Y.eC)(v)]
                    })), !E) throw new eT.Bh({
                    blockHash: s,
                    blockNumber: p,
                    blockTag: x,
                    hash: m,
                    index: v
                });
                let T = a.chain ? .formatters ? .transaction ? .format || eI.Tr;
                return T(E)
            }
            async function getTransactionConfirmations(a, {
                hash: s,
                transactionReceipt: p
            }) {
                let [g, m] = await Promise.all([(0, el.s)(a, getBlockNumber, "getBlockNumber")({}), s ? (0, el.s)(a, getTransaction, "getBlockNumber")({
                    hash: s
                }) : void 0]), v = p ? .blockNumber || m ? .blockNumber;
                return v ? g - v + 1 n : 0 n
            }
            var eN = p(31742);
            let ej = {
                "0x0": "reverted",
                "0x1": "success"
            };

            function formatTransactionReceipt(a) {
                return { ...a,
                    blockNumber: a.blockNumber ? BigInt(a.blockNumber) : null,
                    contractAddress: a.contractAddress ? a.contractAddress : null,
                    cumulativeGasUsed: a.cumulativeGasUsed ? BigInt(a.cumulativeGasUsed) : null,
                    effectiveGasPrice: a.effectiveGasPrice ? BigInt(a.effectiveGasPrice) : null,
                    gasUsed: a.gasUsed ? BigInt(a.gasUsed) : null,
                    logs: a.logs ? a.logs.map(a => formatLog(a)) : null,
                    to: a.to ? a.to : null,
                    transactionIndex: a.transactionIndex ? (0, eP.ly)(a.transactionIndex) : null,
                    status: a.status ? ej[a.status] : null,
                    type: a.type ? eI.c8[a.type] || a.type : null
                }
            }
            async function getTransactionReceipt(a, {
                hash: s
            }) {
                let p = await a.request({
                    method: "eth_getTransactionReceipt",
                    params: [s]
                });
                if (!p) throw new eT.Yb({
                    hash: s
                });
                let g = a.chain ? .formatters ? .transactionReceipt ? .format || formatTransactionReceipt;
                return g(p)
            }
            async function multicall(a, s) {
                let {
                    allowFailure: p = !0,
                    batchSize: g,
                    blockNumber: m,
                    blockTag: v,
                    contracts: x,
                    multicallAddress: _
                } = s, E = g ? ? ("object" == typeof a.batch ? .multicall && a.batch.multicall.batchSize || 1024), T = _;
                if (!T) {
                    if (!a.chain) throw Error("client chain not configured. multicallAddress is required.");
                    T = (0, Z.L)({
                        blockNumber: m,
                        chain: a.chain,
                        contract: "multicall3"
                    })
                }
                let Q = [
                        []
                    ],
                    Y = 0,
                    X = 0;
                for (let a = 0; a < x.length; a++) {
                    let {
                        abi: s,
                        address: g,
                        args: m,
                        functionName: v
                    } = x[a];
                    try {
                        let a = (0, z.R)({
                            abi: s,
                            args: m,
                            functionName: v
                        });
                        X += (a.length - 2) / 2, E > 0 && X > E && Q[Y].length > 0 && (Y++, X = (a.length - 2) / 2, Q[Y] = []), Q[Y] = [...Q[Y], {
                            allowFailure: !0,
                            callData: a,
                            target: g
                        }]
                    } catch (x) {
                        let a = getContractError(x, {
                            abi: s,
                            address: g,
                            args: m,
                            docsPath: "/docs/contract/multicall",
                            functionName: v
                        });
                        if (!p) throw a;
                        Q[Y] = [...Q[Y], {
                            allowFailure: !0,
                            callData: "0x",
                            target: g
                        }]
                    }
                }
                let en = await Promise.allSettled(Q.map(s => (0, el.s)(a, readContract, "readContract")({
                        abi: F.F8,
                        address: T,
                        args: [s],
                        blockNumber: m,
                        blockTag: v,
                        functionName: "aggregate3"
                    }))),
                    eo = [];
                for (let a = 0; a < en.length; a++) {
                    let s = en[a];
                    if ("rejected" === s.status) {
                        if (!p) throw s.reason;
                        for (let p = 0; p < Q[a].length; p++) eo.push({
                            status: "failure",
                            error: s.reason,
                            result: void 0
                        });
                        continue
                    }
                    let g = s.value;
                    for (let s = 0; s < g.length; s++) {
                        let {
                            returnData: m,
                            success: v
                        } = g[s], {
                            callData: _
                        } = Q[a][s], {
                            abi: E,
                            address: T,
                            functionName: F,
                            args: z
                        } = x[eo.length];
                        try {
                            if ("0x" === _) throw new ec.wb;
                            if (!v) throw new ei.VQ({
                                data: m
                            });
                            let a = (0, W.k)({
                                abi: E,
                                args: z,
                                data: m,
                                functionName: F
                            });
                            eo.push(p ? {
                                result: a,
                                status: "success"
                            } : a)
                        } catch (s) {
                            let a = getContractError(s, {
                                abi: E,
                                address: T,
                                args: z,
                                docsPath: "/docs/contract/multicall",
                                functionName: F
                            });
                            if (!p) throw a;
                            eo.push({
                                error: a,
                                result: void 0,
                                status: "failure"
                            })
                        }
                    }
                }
                if (eo.length !== x.length) throw new J.G("multicall results mismatch");
                return eo
            }
            async function simulateContract(a, {
                abi: s,
                address: p,
                args: g,
                dataSuffix: m,
                functionName: v,
                ...x
            }) {
                let _ = x.account ? (0, ey.T)(x.account) : void 0,
                    E = (0, z.R)({
                        abi: s,
                        args: g,
                        functionName: v
                    });
                try {
                    let {
                        data: _
                    } = await (0, el.s)(a, ed.R, "call")({
                        batch: !1,
                        data: `${E}${m?m.replace("0x",""):""}`,
                        to: p,
                        ...x
                    }), T = (0, W.k)({
                        abi: s,
                        args: g,
                        functionName: v,
                        data: _ || "0x"
                    });
                    return {
                        result: T,
                        request: {
                            abi: s,
                            address: p,
                            args: g,
                            dataSuffix: m,
                            functionName: v,
                            ...x
                        }
                    }
                } catch (a) {
                    throw getContractError(a, {
                        abi: s,
                        address: p,
                        args: g,
                        docsPath: "/docs/contract/simulateContract",
                        functionName: v,
                        sender: _ ? .address
                    })
                }
            }
            async function uninstallFilter(a, {
                filter: s
            }) {
                return s.request({
                    method: "eth_uninstallFilter",
                    params: [s.id]
                })
            }
            BigInt(0), BigInt(1), BigInt(2);
            var eM = p(12732);
            async function verifyHash(a, {
                address: s,
                hash: p,
                signature: g,
                ...m
            }) {
                let v = (0, es.v)(g) ? g : (0, Y.NC)(g);
                try {
                    let {
                        data: g
                    } = await (0, el.s)(a, ed.R, "call")({
                        data: (0, eM.w)({
                            abi: F.$o,
                            args: [s, p, v],
                            bytecode: "0x60806040523480156200001157600080fd5b50604051620007003803806200070083398101604081905262000034916200056f565b6000620000438484846200004f565b9050806000526001601ff35b600080846001600160a01b0316803b806020016040519081016040528181526000908060200190933c90507f6492649264926492649264926492649264926492649264926492649264926492620000a68462000451565b036200021f57600060608085806020019051810190620000c79190620005ce565b8651929550909350915060000362000192576000836001600160a01b031683604051620000f5919062000643565b6000604051808303816000865af19150503d806000811462000134576040519150601f19603f3d011682016040523d82523d6000602084013e62000139565b606091505b5050905080620001905760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b505b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90620001c4908b90869060040162000661565b602060405180830381865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200069d565b6001600160e01b031916149450505050506200044a565b805115620002b157604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9062000259908890889060040162000661565b602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d91906200069d565b6001600160e01b031916149150506200044a565b8251604114620003195760405162461bcd60e51b815260206004820152603a6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000606482015260840162000187565b620003236200046b565b506020830151604080850151855186939260009185919081106200034b576200034b620006c9565b016020015160f81c9050601b81148015906200036b57508060ff16601c14155b15620003cf5760405162461bcd60e51b815260206004820152603b6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000606482015260840162000187565b6040805160008152602081018083528a905260ff83169181019190915260608101849052608081018390526001600160a01b038a169060019060a0016020604051602081039080840390855afa1580156200042e573d6000803e3d6000fd5b505050602060405103516001600160a01b031614955050505050505b9392505050565b60006020825110156200046357600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b03811681146200049f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004d5578181015183820152602001620004bb565b50506000910152565b600082601f830112620004f057600080fd5b81516001600160401b03808211156200050d576200050d620004a2565b604051601f8301601f19908116603f01168101908282118183101715620005385762000538620004a2565b816040528381528660208588010111156200055257600080fd5b62000565846020830160208901620004b8565b9695505050505050565b6000806000606084860312156200058557600080fd5b8351620005928162000489565b6020850151604086015191945092506001600160401b03811115620005b657600080fd5b620005c486828701620004de565b9150509250925092565b600080600060608486031215620005e457600080fd5b8351620005f18162000489565b60208501519093506001600160401b03808211156200060f57600080fd5b6200061d87838801620004de565b935060408601519150808211156200063457600080fd5b50620005c486828701620004de565b6000825162000657818460208701620004b8565b9190910192915050565b828152604060208201526000825180604084015262000688816060850160208701620004b8565b601f01601f1916919091016060019392505050565b600060208284031215620006b057600080fd5b81516001600160e01b0319811681146200044a57600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572"
                        }),
                        ...m
                    });
                    return function(a, s) {
                        let p = (0, es.v)(a) ? (0, eo.O0)(a) : a,
                            g = (0, es.v)(s) ? (0, eo.O0)(s) : s;
                        return function(a, s) {
                            if (a.length !== s.length) return !1;
                            for (let p = 0; p < a.length; p++)
                                if (a[p] !== s[p]) return !1;
                            return !0
                        }(p, g)
                    }(g ? ? "0x0", "0x1")
                } catch (a) {
                    if (a instanceof ei.cg) return !1;
                    throw a
                }
            }
            async function verifyMessage(a, {
                address: s,
                message: p,
                signature: g,
                ...m
            }) {
                let v = function(a, s) {
                    let p = "string" == typeof a ? (0, eo.qX)(a) : a.raw instanceof Uint8Array ? a.raw : (0, eo.O0)(a.raw),
                        g = (0, eo.qX)(`Ethereum Signed Message:
${p.length}`);
                    return (0, ea.w)((0, en.zo)([g, p]), void 0)
                }(p);
                return verifyHash(a, {
                    address: s,
                    hash: v,
                    signature: g,
                    ...m
                })
            }
            var eD = p(29578);

            function hashStruct({
                data: a,
                primaryType: s,
                types: p
            }) {
                let g = function encodeData({
                    data: a,
                    primaryType: s,
                    types: p
                }) {
                    let g = [{
                            type: "bytes32"
                        }],
                        m = [function({
                            primaryType: a,
                            types: s
                        }) {
                            let p = (0, Y.NC)(function({
                                primaryType: a,
                                types: s
                            }) {
                                let p = "",
                                    g = function findTypeDependencies({
                                        primaryType: a,
                                        types: s
                                    }, p = new Set) {
                                        let g = a.match(/^\w*/u),
                                            m = g ? .[0];
                                        if (p.has(m) || void 0 === s[m]) return p;
                                        for (let a of (p.add(m), s[m])) findTypeDependencies({
                                            primaryType: a.type,
                                            types: s
                                        }, p);
                                        return p
                                    }({
                                        primaryType: a,
                                        types: s
                                    });
                                g.delete(a);
                                let m = [a, ...Array.from(g).sort()];
                                for (let a of m) p += `${a}(${s[a].map(({name:a,type:s})=>`
                                $ {
                                    s
                                }
                                $ {
                                    a
                                }
                                `).join(",")})`;
                                return p
                            }({
                                primaryType: a,
                                types: s
                            }));
                            return (0, ea.w)(p)
                        }({
                            primaryType: s,
                            types: p
                        })];
                    for (let v of p[s]) {
                        let [s, x] = function encodeField({
                            types: a,
                            name: s,
                            type: p,
                            value: g
                        }) {
                            if (void 0 !== a[p]) return [{
                                type: "bytes32"
                            }, (0, ea.w)(encodeData({
                                data: g,
                                primaryType: p,
                                types: a
                            }))];
                            if ("bytes" === p) {
                                let a = g.length % 2 ? "0" : "";
                                return g = `0x${a+g.slice(2)}`, [{
                                    type: "bytes32"
                                }, (0, ea.w)(g)]
                            }
                            if ("string" === p) return [{
                                type: "bytes32"
                            }, (0, ea.w)((0, Y.NC)(g))];
                            if (p.lastIndexOf("]") === p.length - 1) {
                                let m = p.slice(0, p.lastIndexOf("[")),
                                    v = g.map(p => encodeField({
                                        name: s,
                                        type: m,
                                        types: a,
                                        value: p
                                    }));
                                return [{
                                    type: "bytes32"
                                }, (0, ea.w)((0, em.E)(v.map(([a]) => a), v.map(([, a]) => a)))]
                            }
                            return [{
                                type: p
                            }, g]
                        }({
                            types: p,
                            name: v.name,
                            type: v.type,
                            value: a[v.name]
                        });
                        g.push(s), m.push(x)
                    }
                    return (0, em.E)(g, m)
                }({
                    data: a,
                    primaryType: s,
                    types: p
                });
                return (0, ea.w)(g)
            }
            async function verifyTypedData(a, {
                address: s,
                signature: p,
                message: g,
                primaryType: m,
                types: v,
                domain: x,
                ..._
            }) {
                let E = function({
                    domain: a,
                    message: s,
                    primaryType: p,
                    types: g
                }) {
                    let m = void 0 === a ? {} : a,
                        v = {
                            EIP712Domain: (0, eD.cj)({
                                domain: m
                            }),
                            ...g
                        };
                    (0, eD.iC)({
                        domain: m,
                        message: s,
                        primaryType: p,
                        types: v
                    });
                    let x = ["0x1901"];
                    return m && x.push(function({
                        domain: a,
                        types: s
                    }) {
                        return hashStruct({
                            data: a,
                            primaryType: "EIP712Domain",
                            types: s
                        })
                    }({
                        domain: m,
                        types: v
                    })), "EIP712Domain" !== p && x.push(hashStruct({
                        data: s,
                        primaryType: p,
                        types: v
                    })), (0, ea.w)((0, en.zo)(x))
                }({
                    message: g,
                    primaryType: m,
                    types: v,
                    domain: x
                });
                return verifyHash(a, {
                    address: s,
                    hash: E,
                    signature: p,
                    ..._
                })
            }
            let eB = new Map,
                eU = new Map,
                eF = 0;

            function observe(a, s, p) {
                let g = ++eF,
                    getListeners = () => eB.get(a) || [],
                    unsubscribe = () => {
                        let s = getListeners();
                        eB.set(a, s.filter(a => a.id !== g))
                    },
                    unwatch = () => {
                        let s = eU.get(a);
                        1 === getListeners().length && s && s(), unsubscribe()
                    },
                    m = getListeners();
                if (eB.set(a, [...m, {
                        id: g,
                        fns: s
                    }]), m && m.length > 0) return unwatch;
                let v = {};
                for (let a in s) v[a] = (...s) => {
                    let p = getListeners();
                    if (0 !== p.length)
                        for (let g of p) g.fns[a] ? .(...s)
                };
                let x = p(v);
                return "function" == typeof x && eU.set(a, x), unwatch
            }
            var eL = p(36063),
                eW = p(71891),
                ez = p(21810);

            function poll(a, {
                emitOnBegin: s,
                initialWaitTime: p,
                interval: g
            }) {
                let m = !0,
                    unwatch = () => m = !1,
                    watch = async () => {
                        let v;
                        s && (v = await a({
                            unpoll: unwatch
                        }));
                        let x = await p ? .(v) ? ? g;
                        await (0, ez.D)(x);
                        let poll = async () => {
                            m && (await a({
                                unpoll: unwatch
                            }), await (0, ez.D)(g), poll())
                        };
                        poll()
                    };
                return watch(), unwatch
            }

            function watchBlockNumber(a, {
                emitOnBegin: s = !1,
                emitMissed: p = !1,
                onBlockNumber: g,
                onError: m,
                poll: v,
                pollingInterval: x = a.pollingInterval
            }) {
                let _, E, T;
                let F = void 0 !== v ? v : "webSocket" !== a.transport.type;
                return F ? (() => {
                    let v = (0, eW.P)(["watchBlockNumber", a.uid, s, p, x]);
                    return observe(v, {
                        onBlockNumber: g,
                        onError: m
                    }, g => poll(async () => {
                        try {
                            let s = await (0, el.s)(a, getBlockNumber, "getBlockNumber")({
                                cacheTime: 0
                            });
                            if (_) {
                                if (s === _) return;
                                if (s - _ > 1 && p)
                                    for (let a = _ + 1 n; a < s; a++) g.onBlockNumber(a, _), _ = a
                            }(!_ || s > _) && (g.onBlockNumber(s, _), _ = s)
                        } catch (a) {
                            g.onError ? .(a)
                        }
                    }, {
                        emitOnBegin: s,
                        interval: x
                    }))
                })() : (E = !0, T = () => E = !1, (async () => {
                    try {
                        let {
                            unsubscribe: s
                        } = await a.transport.subscribe({
                            params: ["newHeads"],
                            onData(a) {
                                if (!E) return;
                                let s = (0, eP.y_)(a.result ? .number);
                                g(s, _), _ = s
                            },
                            onError(a) {
                                m ? .(a)
                            }
                        });
                        T = s, E || T()
                    } catch (a) {
                        m ? .(a)
                    }
                })(), T)
            }
            async function waitForTransactionReceipt(a, {
                confirmations: s = 1,
                hash: p,
                onReplaced: g,
                pollingInterval: m = a.pollingInterval,
                timeout: v
            }) {
                let x, _, E;
                let T = (0, eW.P)(["waitForTransactionReceipt", a.uid, p]),
                    F = !1;
                return new Promise((W, z) => {
                    v && setTimeout(() => z(new eT.mc({
                        hash: p
                    })), v);
                    let Z = observe(T, {
                        onReplaced: g,
                        resolve: W,
                        reject: z
                    }, g => {
                        let v = (0, el.s)(a, watchBlockNumber, "watchBlockNumber")({
                            emitMissed: !0,
                            emitOnBegin: !0,
                            poll: !0,
                            pollingInterval: m,
                            async onBlockNumber(m) {
                                if (F) return;
                                let T = m,
                                    done = a => {
                                        v(), a(), Z()
                                    };
                                try {
                                    if (E) {
                                        if (s > 1 && (!E.blockNumber || T - E.blockNumber + 1 n < s)) return;
                                        done(() => g.resolve(E));
                                        return
                                    }
                                    if (x || (F = !0, await (0, eL.J)(async () => {
                                            (x = await (0, el.s)(a, getTransaction, "getTransaction")({
                                                hash: p
                                            })).blockNumber && (T = x.blockNumber)
                                        }, {
                                            delay: ({
                                                count: a
                                            }) => 200 * ~~(1 << a),
                                            retryCount: 6
                                        }), F = !1), E = await (0, el.s)(a, getTransactionReceipt, "getTransactionReceipt")({
                                            hash: p
                                        }), s > 1 && (!E.blockNumber || T - E.blockNumber + 1 n < s)) return;
                                    done(() => g.resolve(E))
                                } catch (p) {
                                    if (x && (p instanceof eT.Bh || p instanceof eT.Yb)) try {
                                        _ = x;
                                        let p = await (0, el.s)(a, eE.Q, "getBlock")({
                                                blockNumber: T,
                                                includeTransactions: !0
                                            }),
                                            m = p.transactions.find(({
                                                from: a,
                                                nonce: s
                                            }) => a === _.from && s === _.nonce);
                                        if (!m || (E = await (0, el.s)(a, getTransactionReceipt, "getTransactionReceipt")({
                                                hash: m.hash
                                            }), s > 1 && (!E.blockNumber || T - E.blockNumber + 1 n < s))) return;
                                        let v = "replaced";
                                        m.to === _.to && m.value === _.value ? v = "repriced" : m.from === m.to && 0 n === m.value && (v = "cancelled"), done(() => {
                                            g.onReplaced ? .({
                                                reason: v,
                                                replacedTransaction: _,
                                                transaction: m,
                                                transactionReceipt: E
                                            }), g.resolve(E)
                                        })
                                    } catch (a) {
                                        done(() => g.reject(a))
                                    } else done(() => g.reject(p))
                                }
                            }
                        })
                    })
                })
            }
            var eq = p(78723),
                eH = p(40044),
                eG = p(73971);

            function publicActions(a) {
                return {
                    call: s => (0, ed.R)(a, s),
                    createBlockFilter: () => createBlockFilter(a),
                    createContractEventFilter: s => createContractEventFilter(a, s),
                    createEventFilter: s => createEventFilter(a, s),
                    createPendingTransactionFilter: () => createPendingTransactionFilter(a),
                    estimateContractGas: s => estimateContractGas(a, s),
                    estimateGas: s => (0, eC.Q)(a, s),
                    getBalance: s => getBalance(a, s),
                    getBlock: s => (0, eE.Q)(a, s),
                    getBlockNumber: s => getBlockNumber(a, s),
                    getBlockTransactionCount: s => getBlockTransactionCount(a, s),
                    getBytecode: s => getBytecode(a, s),
                    getChainId: () => (0, eS.L)(a),
                    getContractEvents: s => getContractEvents(a, s),
                    getEnsAddress: s => getEnsAddress(a, s),
                    getEnsAvatar: s => getEnsAvatar(a, s),
                    getEnsName: s => getEnsName(a, s),
                    getEnsResolver: s => getEnsResolver(a, s),
                    getEnsText: s => getEnsText(a, s),
                    getFeeHistory: s => getFeeHistory(a, s),
                    estimateFeesPerGas: s => (0, ex.X)(a, s),
                    getFilterChanges: s => getFilterChanges(a, s),
                    getFilterLogs: s => getFilterLogs(a, s),
                    getGasPrice: () => (0, eR.o)(a),
                    getLogs: s => getLogs(a, s),
                    getProof: s => getProof(a, s),
                    estimateMaxPriorityFeePerGas: s => (0, e_._)(a, s),
                    getStorageAt: s => getStorageAt(a, s),
                    getTransaction: s => getTransaction(a, s),
                    getTransactionConfirmations: s => getTransactionConfirmations(a, s),
                    getTransactionCount: s => (0, eN.K)(a, s),
                    getTransactionReceipt: s => getTransactionReceipt(a, s),
                    multicall: s => multicall(a, s),
                    prepareTransactionRequest: s => (0, eH.Z)(a, s),
                    readContract: s => readContract(a, s),
                    sendRawTransaction: s => (0, eG.p)(a, s),
                    simulateContract: s => simulateContract(a, s),
                    verifyMessage: s => verifyMessage(a, s),
                    verifyTypedData: s => verifyTypedData(a, s),
                    uninstallFilter: s => uninstallFilter(a, s),
                    waitForTransactionReceipt: s => waitForTransactionReceipt(a, s),
                    watchBlocks: s => (function(a, {
                        blockTag: s = "latest",
                        emitMissed: p = !1,
                        emitOnBegin: g = !1,
                        onBlock: m,
                        onError: v,
                        includeTransactions: x,
                        poll: _,
                        pollingInterval: E = a.pollingInterval
                    }) {
                        let T, F, W;
                        let z = void 0 !== _ ? _ : "webSocket" !== a.transport.type,
                            Z = x ? ? !1;
                        return z ? (() => {
                            let x = (0, eW.P)(["watchBlocks", a.uid, p, g, Z, E]);
                            return observe(x, {
                                onBlock: m,
                                onError: v
                            }, m => poll(async () => {
                                try {
                                    let g = await (0, el.s)(a, eE.Q, "getBlock")({
                                        blockTag: s,
                                        includeTransactions: Z
                                    });
                                    if (g.number && T ? .number) {
                                        if (g.number === T.number) return;
                                        if (g.number - T.number > 1 && p)
                                            for (let s = T ? .number + 1 n; s < g.number; s++) {
                                                let p = await (0, el.s)(a, eE.Q, "getBlock")({
                                                    blockNumber: s,
                                                    includeTransactions: Z
                                                });
                                                m.onBlock(p, T), T = p
                                            }
                                    }(!T ? .number || "pending" === s && !g ? .number || g.number && g.number > T.number) && (m.onBlock(g, T), T = g)
                                } catch (a) {
                                    m.onError ? .(a)
                                }
                            }, {
                                emitOnBegin: g,
                                interval: E
                            }))
                        })() : (F = !0, W = () => F = !1, (async () => {
                            try {
                                let {
                                    unsubscribe: s
                                } = await a.transport.subscribe({
                                    params: ["newHeads"],
                                    onData(s) {
                                        if (!F) return;
                                        let p = a.chain ? .formatters ? .block ? .format || eq.Z,
                                            g = p(s.result);
                                        m(g, T), T = g
                                    },
                                    onError(a) {
                                        v ? .(a)
                                    }
                                });
                                W = s, F || W()
                            } catch (a) {
                                v ? .(a)
                            }
                        })(), W)
                    })(a, s),
                    watchBlockNumber: s => watchBlockNumber(a, s),
                    watchContractEvent: s => (function(a, {
                        abi: s,
                        address: p,
                        args: g,
                        batch: m = !0,
                        eventName: v,
                        onError: x,
                        onLogs: _,
                        poll: E,
                        pollingInterval: T = a.pollingInterval,
                        strict: F
                    }) {
                        let W, z;
                        let Z = void 0 !== E ? E : "webSocket" !== a.transport.type;
                        return Z ? (() => {
                            let E = (0, eW.P)(["watchContractEvent", p, g, m, a.uid, v, T]),
                                W = F ? ? !1;
                            return observe(E, {
                                onLogs: _,
                                onError: x
                            }, x => {
                                let _, E;
                                let F = !1,
                                    z = poll(async () => {
                                        if (!F) {
                                            try {
                                                E = await (0, el.s)(a, createContractEventFilter, "createContractEventFilter")({
                                                    abi: s,
                                                    address: p,
                                                    args: g,
                                                    eventName: v,
                                                    strict: W
                                                })
                                            } catch {}
                                            F = !0;
                                            return
                                        }
                                        try {
                                            let T;
                                            if (E) T = await (0, el.s)(a, getFilterChanges, "getFilterChanges")({
                                                filter: E
                                            });
                                            else {
                                                let m = await (0, el.s)(a, getBlockNumber, "getBlockNumber")({});
                                                T = _ && _ !== m ? await (0, el.s)(a, getContractEvents, "getContractEvents")({
                                                    abi: s,
                                                    address: p,
                                                    args: g,
                                                    eventName: v,
                                                    fromBlock: _ + 1 n,
                                                    toBlock: m,
                                                    strict: W
                                                }) : [], _ = m
                                            }
                                            if (0 === T.length) return;
                                            if (m) x.onLogs(T);
                                            else
                                                for (let a of T) x.onLogs([a])
                                        } catch (a) {
                                            E && a instanceof eu.yR && (F = !1), x.onError ? .(a)
                                        }
                                    }, {
                                        emitOnBegin: !0,
                                        interval: T
                                    });
                                return async () => {
                                    E && await (0, el.s)(a, uninstallFilter, "uninstallFilter")({
                                        filter: E
                                    }), z()
                                }
                            })
                        })() : (W = !0, z = () => W = !1, (async () => {
                            try {
                                let m = v ? encodeEventTopics({
                                        abi: s,
                                        eventName: v,
                                        args: g
                                    }) : [],
                                    {
                                        unsubscribe: E
                                    } = await a.transport.subscribe({
                                        params: ["logs", {
                                            address: p,
                                            topics: m
                                        }],
                                        onData(a) {
                                            if (!W) return;
                                            let p = a.result;
                                            try {
                                                let {
                                                    eventName: a,
                                                    args: g
                                                } = decodeEventLog({
                                                    abi: s,
                                                    data: p.data,
                                                    topics: p.topics,
                                                    strict: F
                                                }), m = formatLog(p, {
                                                    args: g,
                                                    eventName: a
                                                });
                                                _([m])
                                            } catch (m) {
                                                let a, s;
                                                if (m instanceof ec.SM || m instanceof ec.Gy) {
                                                    if (F) return;
                                                    a = m.abiItem.name, s = m.abiItem.inputs ? .some(a => !("name" in a && a.name))
                                                }
                                                let g = formatLog(p, {
                                                    args: s ? [] : {},
                                                    eventName: a
                                                });
                                                _([g])
                                            }
                                        },
                                        onError(a) {
                                            x ? .(a)
                                        }
                                    });
                                z = E, W || z()
                            } catch (a) {
                                x ? .(a)
                            }
                        })(), z)
                    })(a, s),
                    watchEvent: s => (function(a, {
                        address: s,
                        args: p,
                        batch: g = !0,
                        event: m,
                        events: v,
                        onError: x,
                        onLogs: _,
                        poll: E,
                        pollingInterval: T = a.pollingInterval,
                        strict: F
                    }) {
                        let W, z;
                        let Z = void 0 !== E ? E : "webSocket" !== a.transport.type,
                            Q = F ? ? !1;
                        return Z ? (() => {
                            let E = (0, eW.P)(["watchEvent", s, p, g, a.uid, m, T]);
                            return observe(E, {
                                onLogs: _,
                                onError: x
                            }, x => {
                                let _, E;
                                let F = !1,
                                    W = poll(async () => {
                                        if (!F) {
                                            try {
                                                E = await (0, el.s)(a, createEventFilter, "createEventFilter")({
                                                    address: s,
                                                    args: p,
                                                    event: m,
                                                    events: v,
                                                    strict: Q
                                                })
                                            } catch {}
                                            F = !0;
                                            return
                                        }
                                        try {
                                            let T;
                                            if (E) T = await (0, el.s)(a, getFilterChanges, "getFilterChanges")({
                                                filter: E
                                            });
                                            else {
                                                let g = await (0, el.s)(a, getBlockNumber, "getBlockNumber")({});
                                                T = _ && _ !== g ? await (0, el.s)(a, getLogs, "getLogs")({
                                                    address: s,
                                                    args: p,
                                                    event: m,
                                                    events: v,
                                                    fromBlock: _ + 1 n,
                                                    toBlock: g
                                                }) : [], _ = g
                                            }
                                            if (0 === T.length) return;
                                            if (g) x.onLogs(T);
                                            else
                                                for (let a of T) x.onLogs([a])
                                        } catch (a) {
                                            E && a instanceof eu.yR && (F = !1), x.onError ? .(a)
                                        }
                                    }, {
                                        emitOnBegin: !0,
                                        interval: T
                                    });
                                return async () => {
                                    E && await (0, el.s)(a, uninstallFilter, "uninstallFilter")({
                                        filter: E
                                    }), W()
                                }
                            })
                        })() : (W = !0, z = () => W = !1, (async () => {
                            try {
                                let g = v ? ? (m ? [m] : void 0),
                                    E = [];
                                g && (E = [g.flatMap(a => encodeEventTopics({
                                    abi: [a],
                                    eventName: a.name,
                                    args: p
                                }))], m && (E = E[0]));
                                let {
                                    unsubscribe: T
                                } = await a.transport.subscribe({
                                    params: ["logs", {
                                        address: s,
                                        topics: E
                                    }],
                                    onData(a) {
                                        if (!W) return;
                                        let s = a.result;
                                        try {
                                            let {
                                                eventName: a,
                                                args: p
                                            } = decodeEventLog({
                                                abi: g,
                                                data: s.data,
                                                topics: s.topics,
                                                strict: Q
                                            }), m = formatLog(s, {
                                                args: p,
                                                eventName: a
                                            });
                                            _([m])
                                        } catch (m) {
                                            let a, p;
                                            if (m instanceof ec.SM || m instanceof ec.Gy) {
                                                if (F) return;
                                                a = m.abiItem.name, p = m.abiItem.inputs ? .some(a => !("name" in a && a.name))
                                            }
                                            let g = formatLog(s, {
                                                args: p ? [] : {},
                                                eventName: a
                                            });
                                            _([g])
                                        }
                                    },
                                    onError(a) {
                                        x ? .(a)
                                    }
                                });
                                z = T, W || z()
                            } catch (a) {
                                x ? .(a)
                            }
                        })(), z)
                    })(a, s),
                    watchPendingTransactions: s => (function(a, {
                        batch: s = !0,
                        onError: p,
                        onTransactions: g,
                        poll: m,
                        pollingInterval: v = a.pollingInterval
                    }) {
                        let x, _;
                        let E = void 0 !== m ? m : "webSocket" !== a.transport.type;
                        return E ? (() => {
                            let m = (0, eW.P)(["watchPendingTransactions", a.uid, s, v]);
                            return observe(m, {
                                onTransactions: g,
                                onError: p
                            }, p => {
                                let g;
                                let m = poll(async () => {
                                    try {
                                        if (!g) try {
                                            g = await (0, el.s)(a, createPendingTransactionFilter, "createPendingTransactionFilter")({});
                                            return
                                        } catch (a) {
                                            throw m(), a
                                        }
                                        let v = await (0, el.s)(a, getFilterChanges, "getFilterChanges")({
                                            filter: g
                                        });
                                        if (0 === v.length) return;
                                        if (s) p.onTransactions(v);
                                        else
                                            for (let a of v) p.onTransactions([a])
                                    } catch (a) {
                                        p.onError ? .(a)
                                    }
                                }, {
                                    emitOnBegin: !0,
                                    interval: v
                                });
                                return async () => {
                                    g && await (0, el.s)(a, uninstallFilter, "uninstallFilter")({
                                        filter: g
                                    }), m()
                                }
                            })
                        })() : (x = !0, _ = () => x = !1, (async () => {
                            try {
                                let {
                                    unsubscribe: s
                                } = await a.transport.subscribe({
                                    params: ["newPendingTransactions"],
                                    onData(a) {
                                        if (!x) return;
                                        let s = a.result;
                                        g([s])
                                    },
                                    onError(a) {
                                        p ? .(a)
                                    }
                                });
                                _ = s, x || _()
                            } catch (a) {
                                p ? .(a)
                            }
                        })(), _)
                    })(a, s)
                }
            }

            function createPublicClient(a) {
                let {
                    key: s = "public",
                    name: p = "Public Client"
                } = a, g = (0, T.e)({ ...a,
                    key: s,
                    name: p,
                    type: "publicClient"
                });
                return g.extend(publicActions)
            }
            var eZ = p(35215),
                eK = p(68124);

            function fallback(a, s = {}) {
                let {
                    key: p = "fallback",
                    name: g = "Fallback",
                    rank: m = !1,
                    retryCount: v,
                    retryDelay: x
                } = s;
                return ({
                    chain: s,
                    pollingInterval: _ = 4e3,
                    timeout: E
                }) => {
                    let T = a,
                        onResponse = () => {},
                        F = (0, eK.q)({
                            key: p,
                            name: g,
                            async request({
                                method: a,
                                params: p
                            }) {
                                let fetch = async (g = 0) => {
                                    let m = T[g]({
                                        chain: s,
                                        retryCount: 0,
                                        timeout: E
                                    });
                                    try {
                                        let s = await m.request({
                                            method: a,
                                            params: p
                                        });
                                        return onResponse({
                                            method: a,
                                            params: p,
                                            response: s,
                                            transport: m,
                                            status: "success"
                                        }), s
                                    } catch (s) {
                                        if (onResponse({
                                                error: s,
                                                method: a,
                                                params: p,
                                                transport: m,
                                                status: "error"
                                            }), (0, eZ.y)(s) || g === T.length - 1) throw s;
                                        return fetch(g + 1)
                                    }
                                };
                                return fetch()
                            },
                            retryCount: v,
                            retryDelay: x,
                            type: "fallback"
                        }, {
                            onResponse: a => onResponse = a,
                            transports: T.map(a => a({
                                chain: s,
                                retryCount: 0
                            }))
                        });
                    if (m) {
                        let a = "object" == typeof m ? m : {};
                        ! function({
                            chain: a,
                            interval: s = 4e3,
                            onTransports: p,
                            sampleCount: g = 10,
                            timeout: m = 1e3,
                            transports: v,
                            weights: x = {}
                        }) {
                            let {
                                stability: _ = .7,
                                latency: E = .3
                            } = x, T = [], rankTransports_ = async () => {
                                let x = await Promise.all(v.map(async s => {
                                    let p, g;
                                    let v = s({
                                            chain: a,
                                            retryCount: 0,
                                            timeout: m
                                        }),
                                        x = Date.now();
                                    try {
                                        await v.request({
                                            method: "net_listening"
                                        }), g = 1
                                    } catch {
                                        g = 0
                                    } finally {
                                        p = Date.now()
                                    }
                                    let _ = p - x;
                                    return {
                                        latency: _,
                                        success: g
                                    }
                                }));
                                T.push(x), T.length > g && T.shift();
                                let F = Math.max(...T.map(a => Math.max(...a.map(({
                                        latency: a
                                    }) => a)))),
                                    W = v.map((a, s) => {
                                        let p = T.map(a => a[s].latency),
                                            g = p.reduce((a, s) => a + s, 0) / p.length,
                                            m = T.map(a => a[s].success),
                                            v = m.reduce((a, s) => a + s, 0) / m.length;
                                        return 0 === v ? [0, s] : [E * (1 - g / F) + _ * v, s]
                                    }).sort((a, s) => s[0] - a[0]);
                                p(W.map(([, a]) => v[a])), await (0, ez.D)(s), rankTransports_()
                            };
                            rankTransports_()
                        }({
                            chain: s,
                            interval: a.interval ? ? _,
                            onTransports: a => T = a,
                            sampleCount: a.sampleCount,
                            timeout: a.timeout,
                            transports: T,
                            weights: a.weights
                        })
                    }
                    return F
                }
            }
            var eV = p(20722);
            let UrlRequiredError = class UrlRequiredError extends J.G {
                constructor() {
                    super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
                        docsPath: "/docs/clients/intro"
                    })
                }
            };
            var eQ = p(33668);
            let eY = function() {
                if ("undefined" != typeof WebSocket) return WebSocket;
                if (void 0 !== global.WebSocket) return global.WebSocket;
                if (void 0 !== window.WebSocket) return window.WebSocket;
                if (void 0 !== self.WebSocket) return self.WebSocket;
                throw Error("`WebSocket` is not supported in this environment")
            }();

            function withTimeout(a, {
                errorInstance: s = Error("timed out"),
                timeout: p,
                signal: g
            }) {
                return new Promise((m, v) => {
                    (async () => {
                        let x;
                        try {
                            let _ = new AbortController;
                            p > 0 && (x = setTimeout(() => {
                                g ? _.abort() : v(s)
                            }, p)), m(await a({
                                signal: _ ? .signal
                            }))
                        } catch (a) {
                            "AbortError" === a.name && v(s), v(a)
                        } finally {
                            clearTimeout(x)
                        }
                    })()
                })
            }
            let eX = 0;
            async function http(a, {
                body: s,
                fetchOptions: p = {},
                timeout: g = 1e4
            }) {
                let {
                    headers: m,
                    method: v,
                    signal: x
                } = p;
                try {
                    let _;
                    let E = await withTimeout(async ({
                        signal: _
                    }) => {
                        let E = await fetch(a, { ...p,
                            body: Array.isArray(s) ? (0, eW.P)(s.map(a => ({
                                jsonrpc: "2.0",
                                id: a.id ? ? eX++,
                                ...a
                            }))) : (0, eW.P)({
                                jsonrpc: "2.0",
                                id: s.id ? ? eX++,
                                ...s
                            }),
                            headers: { ...m,
                                "Content-Type": "application/json"
                            },
                            method: v || "POST",
                            signal: x || (g > 0 ? _ : void 0)
                        });
                        return E
                    }, {
                        errorInstance: new eV.W5({
                            body: s,
                            url: a
                        }),
                        timeout: g,
                        signal: !0
                    });
                    if (_ = E.headers.get("Content-Type") ? .startsWith("application/json") ? await E.json() : await E.text(), !E.ok) throw new eV.Gg({
                        body: s,
                        details: (0, eW.P)(_.error) || E.statusText,
                        headers: E.headers,
                        status: E.status,
                        url: a
                    });
                    return _
                } catch (p) {
                    if (p instanceof eV.Gg || p instanceof eV.W5) throw p;
                    throw new eV.Gg({
                        body: s,
                        details: p.message,
                        url: a
                    })
                }
            }
            let eJ = new Map;
            async function getSocket(a) {
                let s = eJ.get(a);
                if (s) return s;
                let {
                    schedule: p
                } = (0, eQ.S)({
                    id: a,
                    fn: async () => {
                        let p = new eY(a),
                            g = new Map,
                            m = new Map,
                            onMessage = ({
                                data: a
                            }) => {
                                let s = JSON.parse(a),
                                    p = "eth_subscription" === s.method,
                                    v = p ? s.params.subscription : s.id,
                                    x = p ? m : g,
                                    _ = x.get(v);
                                _ && _({
                                    data: a
                                }), p || x.delete(v)
                            },
                            onClose = () => {
                                eJ.delete(a), p.removeEventListener("close", onClose), p.removeEventListener("message", onMessage)
                            };
                        return p.addEventListener("close", onClose), p.addEventListener("message", onMessage), p.readyState === eY.CONNECTING && await new Promise((a, s) => {
                            p && (p.onopen = a, p.onerror = s)
                        }), s = Object.assign(p, {
                            requests: g,
                            subscriptions: m
                        }), eJ.set(a, s), [s]
                    }
                }), [g, [m]] = await p();
                return m
            }
            async function webSocketAsync(a, {
                body: s,
                timeout: p = 1e4
            }) {
                return withTimeout(() => new Promise(p => e0.webSocket(a, {
                    body: s,
                    onResponse: p
                })), {
                    errorInstance: new eV.W5({
                        body: s,
                        url: a.url
                    }),
                    timeout: p
                })
            }
            let e0 = {
                http,
                webSocket: function(a, {
                    body: s,
                    onResponse: p
                }) {
                    if (a.readyState === a.CLOSED || a.readyState === a.CLOSING) throw new eV.c9({
                        body: s,
                        url: a.url,
                        details: "Socket is closed."
                    });
                    let g = eX++,
                        callback = ({
                            data: m
                        }) => {
                            let v = JSON.parse(m);
                            ("number" != typeof v.id || g === v.id) && (p ? .(v), "eth_subscribe" === s.method && "string" == typeof v.result && a.subscriptions.set(v.result, callback), "eth_unsubscribe" === s.method && a.subscriptions.delete(s.params ? .[0]))
                        };
                    return a.requests.set(g, callback), a.send(JSON.stringify({
                        jsonrpc: "2.0",
                        ...s,
                        id: g
                    })), a
                },
                webSocketAsync
            };
            var e1 = p(38026),
                e2 = p(36238);
            let subscribeWithSelector = a => (s, p, g) => {
                    let m = g.subscribe;
                    g.subscribe = (a, s, p) => {
                        let v = a;
                        if (s) {
                            let m = (null == p ? void 0 : p.equalityFn) || Object.is,
                                x = a(g.getState());
                            v = p => {
                                let g = a(p);
                                if (!m(x, g)) {
                                    let a = x;
                                    s(x = g, a)
                                }
                            }, (null == p ? void 0 : p.fireImmediately) && s(x, x)
                        }
                        return m(v)
                    };
                    let v = a(s, p, g);
                    return v
                },
                toThenable = a => s => {
                    try {
                        let p = a(s);
                        if (p instanceof Promise) return p;
                        return {
                            then: a => toThenable(a)(p),
                            catch (a) {
                                return this
                            }
                        }
                    } catch (a) {
                        return {
                            then(a) {
                                return this
                            },
                            catch: s => toThenable(s)(a)
                        }
                    }
                },
                oldImpl = (a, s) => (p, g, m) => {
                    let v, x, _ = {
                            getStorage: () => localStorage,
                            serialize: JSON.stringify,
                            deserialize: JSON.parse,
                            partialize: a => a,
                            version: 0,
                            merge: (a, s) => ({ ...s,
                                ...a
                            }),
                            ...s
                        },
                        E = !1,
                        T = new Set,
                        F = new Set;
                    try {
                        v = _.getStorage()
                    } catch (a) {}
                    if (!v) return a((...a) => {
                        console.warn(`[zustand persist middleware] Unable to update item '${_.name}', the given storage is currently unavailable.`), p(...a)
                    }, g, m);
                    let W = toThenable(_.serialize),
                        setItem = () => {
                            let a;
                            let s = _.partialize({ ...g()
                                }),
                                p = W({
                                    state: s,
                                    version: _.version
                                }).then(a => v.setItem(_.name, a)).catch(s => {
                                    a = s
                                });
                            if (a) throw a;
                            return p
                        },
                        z = m.setState;
                    m.setState = (a, s) => {
                        z(a, s), setItem()
                    };
                    let Z = a((...a) => {
                            p(...a), setItem()
                        }, g, m),
                        hydrate = () => {
                            var a;
                            if (!v) return;
                            E = !1, T.forEach(a => a(g()));
                            let s = (null == (a = _.onRehydrateStorage) ? void 0 : a.call(_, g())) || void 0;
                            return toThenable(v.getItem.bind(v))(_.name).then(a => {
                                if (a) return _.deserialize(a)
                            }).then(a => {
                                if (a) {
                                    if ("number" != typeof a.version || a.version === _.version) return a.state;
                                    if (_.migrate) return _.migrate(a.state, a.version);
                                    console.error("State loaded from storage couldn't be migrated since no migrate function was provided")
                                }
                            }).then(a => {
                                var s;
                                return p(x = _.merge(a, null != (s = g()) ? s : Z), !0), setItem()
                            }).then(() => {
                                null == s || s(x, void 0), E = !0, F.forEach(a => a(x))
                            }).catch(a => {
                                null == s || s(void 0, a)
                            })
                        };
                    return m.persist = {
                        setOptions: a => {
                            _ = { ..._,
                                ...a
                            }, a.getStorage && (v = a.getStorage())
                        },
                        clearStorage: () => {
                            null == v || v.removeItem(_.name)
                        },
                        getOptions: () => _,
                        rehydrate: () => hydrate(),
                        hasHydrated: () => E,
                        onHydrate: a => (T.add(a), () => {
                            T.delete(a)
                        }),
                        onFinishHydration: a => (F.add(a), () => {
                            F.delete(a)
                        })
                    }, hydrate(), x || Z
                },
                newImpl = (a, s) => (p, g, m) => {
                    let v, x = {
                            storage: function(a, s) {
                                let p;
                                try {
                                    p = a()
                                } catch (a) {
                                    return
                                }
                                return {
                                    getItem: a => {
                                        var g;
                                        let parse = a => null === a ? null : JSON.parse(a, null == s ? void 0 : s.reviver),
                                            m = null != (g = p.getItem(a)) ? g : null;
                                        return m instanceof Promise ? m.then(parse) : parse(m)
                                    },
                                    setItem: (a, g) => p.setItem(a, JSON.stringify(g, null == s ? void 0 : s.replacer)),
                                    removeItem: a => p.removeItem(a)
                                }
                            }(() => localStorage),
                            partialize: a => a,
                            version: 0,
                            merge: (a, s) => ({ ...s,
                                ...a
                            }),
                            ...s
                        },
                        _ = !1,
                        E = new Set,
                        T = new Set,
                        F = x.storage;
                    if (!F) return a((...a) => {
                        console.warn(`[zustand persist middleware] Unable to update item '${x.name}', the given storage is currently unavailable.`), p(...a)
                    }, g, m);
                    let setItem = () => {
                            let a = x.partialize({ ...g()
                            });
                            return F.setItem(x.name, {
                                state: a,
                                version: x.version
                            })
                        },
                        W = m.setState;
                    m.setState = (a, s) => {
                        W(a, s), setItem()
                    };
                    let z = a((...a) => {
                            p(...a), setItem()
                        }, g, m),
                        hydrate = () => {
                            var a, s;
                            if (!F) return;
                            _ = !1, E.forEach(a => {
                                var s;
                                return a(null != (s = g()) ? s : z)
                            });
                            let m = (null == (s = x.onRehydrateStorage) ? void 0 : s.call(x, null != (a = g()) ? a : z)) || void 0;
                            return toThenable(F.getItem.bind(F))(x.name).then(a => {
                                if (a) {
                                    if ("number" != typeof a.version || a.version === x.version) return a.state;
                                    if (x.migrate) return x.migrate(a.state, a.version);
                                    console.error("State loaded from storage couldn't be migrated since no migrate function was provided")
                                }
                            }).then(a => {
                                var s;
                                return p(v = x.merge(a, null != (s = g()) ? s : z), !0), setItem()
                            }).then(() => {
                                null == m || m(v, void 0), v = g(), _ = !0, T.forEach(a => a(v))
                            }).catch(a => {
                                null == m || m(void 0, a)
                            })
                        };
                    return m.persist = {
                        setOptions: a => {
                            x = { ...x,
                                ...a
                            }, a.storage && (F = a.storage)
                        },
                        clearStorage: () => {
                            null == F || F.removeItem(x.name)
                        },
                        getOptions: () => x,
                        rehydrate: () => hydrate(),
                        hasHydrated: () => _,
                        onHydrate: a => (E.add(a), () => {
                            E.delete(a)
                        }),
                        onFinishHydration: a => (T.add(a), () => {
                            T.delete(a)
                        })
                    }, x.skipHydration || hydrate(), v || z
                },
                persist = (a, s) => "getStorage" in s || "serialize" in s || "deserialize" in s ? (console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."), oldImpl(a, s)) : newImpl(a, s),
                createStoreImpl = a => {
                    let s;
                    let p = new Set,
                        setState = (a, g) => {
                            let m = "function" == typeof a ? a(s) : a;
                            if (!Object.is(m, s)) {
                                let a = s;
                                s = (null != g ? g : "object" != typeof m) ? m : Object.assign({}, s, m), p.forEach(p => p(s, a))
                            }
                        },
                        getState = () => s,
                        g = {
                            setState,
                            getState,
                            subscribe: a => (p.add(a), () => p.delete(a)),
                            destroy: () => {
                                console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."), p.clear()
                            }
                        };
                    return s = a(setState, getState, g), g
                },
                createStore = a => a ? createStoreImpl(a) : createStoreImpl;
            var e5 = p(16775);

            function shallow$1(a, s) {
                if (Object.is(a, s)) return !0;
                if ("object" != typeof a || null === a || "object" != typeof s || null === s) return !1;
                if (a instanceof Map && s instanceof Map) {
                    if (a.size !== s.size) return !1;
                    for (let [p, g] of a)
                        if (!Object.is(g, s.get(p))) return !1;
                    return !0
                }
                if (a instanceof Set && s instanceof Set) {
                    if (a.size !== s.size) return !1;
                    for (let p of a)
                        if (!s.has(p)) return !1;
                    return !0
                }
                let p = Object.keys(a);
                if (p.length !== Object.keys(s).length) return !1;
                for (let g = 0; g < p.length; g++)
                    if (!Object.prototype.hasOwnProperty.call(s, p[g]) || !Object.is(a[p[g]], s[p[g]])) return !1;
                return !0
            }
            var e3 = p(39803);

            function configureChains(a, s, {
                batch: p = {
                    multicall: {
                        wait: 32
                    }
                },
                pollingInterval: g = 4e3,
                rank: m,
                retryCount: v,
                retryDelay: x,
                stallTimeout: _
            } = {}) {
                if (!a.length) throw Error("must have at least one chain");
                let E = [],
                    T = {},
                    F = {};
                for (let p of a) {
                    let a = !1;
                    for (let g of s) {
                        let s = g(p);
                        s && (a = !0, E.some(({
                            id: a
                        }) => a === p.id) || (E = [...E, s.chain]), T[p.id] = [...T[p.id] || [], ...s.rpcUrls.http], s.rpcUrls.webSocket && (F[p.id] = [...F[p.id] || [], ...s.rpcUrls.webSocket]))
                    }
                    if (!a) throw Error(`Could not find valid provider configuration for chain "${p.name}".

You may need to add \`jsonRpcProvider\` to \`configureChains\` with the chain's RPC URLs.
Read more: https://wagmi.sh/core/providers/jsonRpc`)
                }
                return {
                    chains: E,
                    publicClient: ({
                        chainId: s
                    }) => {
                        let F = E.find(a => a.id === s) ? ? a[0],
                            W = T[F.id];
                        if (!W || !W[0]) throw Error(`No providers configured for chain "${F.id}"`);
                        let z = createPublicClient({
                            batch: p,
                            chain: F,
                            transport: fallback(W.map(a => (function(a, s = {}) {
                                let {
                                    batch: p,
                                    fetchOptions: g,
                                    key: m = "http",
                                    name: v = "HTTP JSON-RPC",
                                    retryDelay: x
                                } = s;
                                return ({
                                    chain: _,
                                    retryCount: E,
                                    timeout: T
                                }) => {
                                    let {
                                        batchSize: F = 1e3,
                                        wait: W = 0
                                    } = "object" == typeof p ? p : {}, z = s.retryCount ? ? E, Z = T ? ? s.timeout ? ? 1e4, Q = a || _ ? .rpcUrls.default.http[0];
                                    if (!Q) throw new UrlRequiredError;
                                    return (0, eK.q)({
                                        key: m,
                                        name: v,
                                        async request({
                                            method: s,
                                            params: m
                                        }) {
                                            let v = {
                                                    method: s,
                                                    params: m
                                                },
                                                {
                                                    schedule: x
                                                } = (0, eQ.S)({
                                                    id: `${a}`,
                                                    wait: W,
                                                    shouldSplitBatch: a => a.length > F,
                                                    fn: a => e0.http(Q, {
                                                        body: a,
                                                        fetchOptions: g,
                                                        timeout: Z
                                                    }),
                                                    sort: (a, s) => a.id - s.id
                                                }),
                                                fn = async a => p ? x(a) : [await e0.http(Q, {
                                                    body: a,
                                                    fetchOptions: g,
                                                    timeout: Z
                                                })],
                                                [{
                                                    error: _,
                                                    result: E
                                                }] = await fn(v);
                                            if (_) throw new eV.bs({
                                                body: v,
                                                error: _,
                                                url: Q
                                            });
                                            return E
                                        },
                                        retryCount: z,
                                        retryDelay: x,
                                        timeout: Z,
                                        type: "http"
                                    }, {
                                        fetchOptions: g,
                                        url: a
                                    })
                                }
                            })(a, {
                                timeout: _
                            })), {
                                rank: m,
                                retryCount: v,
                                retryDelay: x
                            }),
                            pollingInterval: g
                        });
                        return Object.assign(z, {
                            chains: E
                        })
                    },
                    webSocketPublicClient: ({
                        chainId: s
                    }) => {
                        let T = E.find(a => a.id === s) ? ? a[0],
                            W = F[T.id];
                        if (!W || !W[0]) return;
                        let z = createPublicClient({
                            batch: p,
                            chain: T,
                            transport: fallback(W.map(a => (function(a, s = {}) {
                                let {
                                    key: p = "webSocket",
                                    name: g = "WebSocket JSON-RPC",
                                    retryDelay: m
                                } = s;
                                return ({
                                    chain: v,
                                    retryCount: x,
                                    timeout: _
                                }) => {
                                    let E = s.retryCount ? ? x,
                                        T = _ ? ? s.timeout ? ? 1e4,
                                        F = a || v ? .rpcUrls.default.webSocket ? .[0];
                                    if (!F) throw new UrlRequiredError;
                                    return (0, eK.q)({
                                        key: p,
                                        name: g,
                                        async request({
                                            method: a,
                                            params: s
                                        }) {
                                            let p = {
                                                    method: a,
                                                    params: s
                                                },
                                                g = await getSocket(F),
                                                {
                                                    error: m,
                                                    result: v
                                                } = await e0.webSocketAsync(g, {
                                                    body: p,
                                                    timeout: T
                                                });
                                            if (m) throw new eV.bs({
                                                body: p,
                                                error: m,
                                                url: F
                                            });
                                            return v
                                        },
                                        retryCount: E,
                                        retryDelay: m,
                                        timeout: T,
                                        type: "webSocket"
                                    }, {
                                        getSocket: () => getSocket(F),
                                        async subscribe({
                                            params: a,
                                            onData: s,
                                            onError: p
                                        }) {
                                            let g = await getSocket(F),
                                                {
                                                    result: m
                                                } = await new Promise((m, v) => e0.webSocket(g, {
                                                    body: {
                                                        method: "eth_subscribe",
                                                        params: a
                                                    },
                                                    onResponse(a) {
                                                        if (a.error) {
                                                            v(a.error), p ? .(a.error);
                                                            return
                                                        }
                                                        if ("number" == typeof a.id) {
                                                            m(a);
                                                            return
                                                        }
                                                        "eth_subscription" === a.method && s(a.params)
                                                    }
                                                }));
                                            return {
                                                subscriptionId: m,
                                                unsubscribe: async () => new Promise(a => e0.webSocket(g, {
                                                    body: {
                                                        method: "eth_unsubscribe",
                                                        params: [m]
                                                    },
                                                    onResponse: a
                                                }))
                                            }
                                        }
                                    })
                                }
                            })(a, {
                                timeout: _
                            })), {
                                rank: m,
                                retryCount: v,
                                retryDelay: x
                            }),
                            pollingInterval: g
                        });
                        return Object.assign(z, {
                            chains: E
                        })
                    }
                }
            }
            var e4 = class extends Error {
                    constructor({
                        activeChain: a,
                        targetChain: s
                    }) {
                        super(`Chain mismatch: Expected "${s}", received "${a}".`), this.name = "ChainMismatchError"
                    }
                },
                e6 = class extends Error {
                    constructor({
                        chainId: a,
                        connectorId: s
                    }) {
                        super(`Chain "${a}" not configured${s?` for connector "${s}"`:""}.`), this.name = "ChainNotConfigured"
                    }
                },
                e8 = class extends Error {
                    constructor() {
                        super(...arguments), this.name = "ConnectorAlreadyConnectedError", this.message = "Connector already connected"
                    }
                },
                e9 = class extends Error {
                    constructor() {
                        super(...arguments), this.name = "ConfigChainsNotFound", this.message = "No chains were found on the wagmi config. Some functions that require a chain may not work."
                    }
                },
                e7 = class extends Error {
                    constructor({
                        connector: a
                    }) {
                        super(`"${a.name}" does not support programmatic chain switching.`), this.name = "SwitchChainNotSupportedError"
                    }
                },
                findAndReplace = (a, {
                    find: s,
                    replace: p
                }) => a && s(a) ? p(a) : "object" != typeof a ? a : Array.isArray(a) ? a.map(a => findAndReplace(a, {
                    find: s,
                    replace: p
                })) : a instanceof Object ? Object.entries(a).reduce((a, [g, m]) => ({ ...a,
                    [g]: findAndReplace(m, {
                        find: s,
                        replace: p
                    })
                }), {}) : a;

            function deserialize(a) {
                let s = JSON.parse(a),
                    p = findAndReplace(s, {
                        find: a => "string" == typeof a && a.startsWith("#bigint."),
                        replace: a => BigInt(a.replace("#bigint.", ""))
                    });
                return p
            }

            function getUnit(a) {
                return "number" == typeof a ? a : "wei" === a ? 0 : Math.abs(e2.Bd[a])
            }

            function getReferenceKey(a, s) {
                return a.slice(0, s).join(".") || "."
            }

            function getCutoff(a, s) {
                let {
                    length: p
                } = a;
                for (let g = 0; g < p; ++g)
                    if (a[g] === s) return g + 1;
                return 0
            }

            function serialize(a, s, p, g) {
                return JSON.stringify(a, function(a, s) {
                    let p = "function" == typeof a,
                        g = "function" == typeof s,
                        m = [],
                        v = [];
                    return function(x, _) {
                        if ("object" == typeof _) {
                            if (m.length) {
                                let a = getCutoff(m, this);
                                0 === a ? m[m.length] = this : (m.splice(a), v.splice(a)), v[v.length] = x;
                                let p = getCutoff(m, _);
                                if (0 !== p) return g ? s.call(this, x, _, getReferenceKey(v, p)) : `[ref=${getReferenceKey(v,p)}]`
                            } else m[0] = _, v[0] = x
                        }
                        return p ? a.call(this, x, _) : _
                    }
                }((a, p) => {
                    let g = "bigint" == typeof p ? `#bigint.${p.toString()}` : p;
                    return s ? .(a, g) || g
                }, g), p ? ? void 0)
            }
            var tt = {
                getItem: a => "",
                setItem: (a, s) => null,
                removeItem: a => null
            };

            function createStorage({
                deserialize: a = deserialize,
                key: s = "wagmi",
                serialize: p = serialize,
                storage: g
            }) {
                return { ...g,
                    getItem: (p, m = null) => {
                        let v = g.getItem(`${s}.${p}`);
                        try {
                            return v ? a(v) : m
                        } catch (a) {
                            return console.warn(a), m
                        }
                    },
                    setItem: (a, m) => {
                        if (null === m) g.removeItem(`${s}.${a}`);
                        else try {
                            g.setItem(`${s}.${a}`, p(m))
                        } catch (a) {
                            console.error(a)
                        }
                    },
                    removeItem: a => g.removeItem(`${s}.${a}`)
                }
            }
            var tr = "store",
                ti = class {
                    constructor({
                        autoConnect: a = !1,
                        connectors: s = [new E._],
                        publicClient: p,
                        storage: _ = createStorage({
                            storage: "undefined" != typeof window ? window.localStorage : tt
                        }),
                        logger: T = {
                            warn: console.warn
                        },
                        webSocketPublicClient: F
                    }) {
                        let W;
                        __privateAdd(this, v), this.publicClients = new Map, this.webSocketPublicClients = new Map, __privateAdd(this, g, void 0), __privateAdd(this, m, void 0), this.args = {
                            autoConnect: a,
                            connectors: s,
                            logger: T,
                            publicClient: p,
                            storage: _,
                            webSocketPublicClient: F
                        };
                        let z = "disconnected";
                        if (a) try {
                            let a = _.getItem(tr),
                                s = a ? .state ? .data;
                            z = s ? .account ? "reconnecting" : "connecting", W = s ? .chain ? .id
                        } catch (a) {}
                        let Z = "function" == typeof s ? s() : s;
                        Z.forEach(a => a.setStorage(_)), this.store = createStore(subscribeWithSelector(persist(() => ({
                            connectors: Z,
                            publicClient: this.getPublicClient({
                                chainId: W
                            }),
                            status: z,
                            webSocketPublicClient: this.getWebSocketPublicClient({
                                chainId: W
                            })
                        }), {
                            name: tr,
                            storage: _,
                            partialize: s => ({ ...a && {
                                    data: {
                                        account: s ? .data ? .account,
                                        chain: s ? .data ? .chain
                                    }
                                },
                                chains: s ? .chains
                            }),
                            version: 2
                        }))), this.storage = _, __privateSet(this, m, _ ? .getItem("wallet")), __privateMethod(this, v, x).call(this), a && "undefined" != typeof window && setTimeout(async () => await this.autoConnect(), 0)
                    }
                    get chains() {
                        return this.store.getState().chains
                    }
                    get connectors() {
                        return this.store.getState().connectors
                    }
                    get connector() {
                        return this.store.getState().connector
                    }
                    get data() {
                        return this.store.getState().data
                    }
                    get error() {
                        return this.store.getState().error
                    }
                    get lastUsedChainId() {
                        return this.data ? .chain ? .id
                    }
                    get publicClient() {
                        return this.store.getState().publicClient
                    }
                    get status() {
                        return this.store.getState().status
                    }
                    get subscribe() {
                        return this.store.subscribe
                    }
                    get webSocketPublicClient() {
                        return this.store.getState().webSocketPublicClient
                    }
                    setState(a) {
                        let s = "function" == typeof a ? a(this.store.getState()) : a;
                        this.store.setState(s, !0)
                    }
                    clearState() {
                        this.setState(a => ({ ...a,
                            chains: void 0,
                            connector: void 0,
                            data: void 0,
                            error: void 0,
                            status: "disconnected"
                        }))
                    }
                    async destroy() {
                        this.connector && await this.connector.disconnect ? .(), __privateSet(this, g, !1), this.clearState(), this.store.destroy()
                    }
                    async autoConnect() {
                        if (__privateGet(this, g)) return;
                        __privateSet(this, g, !0), this.setState(a => ({ ...a,
                            status: a.data ? .account ? "reconnecting" : "connecting"
                        }));
                        let a = __privateGet(this, m) ? [...this.connectors].sort(a => a.id === __privateGet(this, m) ? -1 : 1) : this.connectors,
                            s = !1;
                        for (let p of a) {
                            if (!p.ready || !p.isAuthorized) continue;
                            let a = await p.isAuthorized();
                            if (!a) continue;
                            let g = await p.connect();
                            this.setState(a => ({ ...a,
                                connector: p,
                                chains: p ? .chains,
                                data: g,
                                status: "connected"
                            })), s = !0;
                            break
                        }
                        return s || this.setState(a => ({ ...a,
                            data: void 0,
                            status: "disconnected"
                        })), __privateSet(this, g, !1), this.data
                    }
                    setConnectors(a) {
                        this.args = { ...this.args,
                            connectors: a
                        };
                        let s = "function" == typeof a ? a() : a;
                        s.forEach(a => a.setStorage(this.args.storage)), this.setState(a => ({ ...a,
                            connectors: s
                        }))
                    }
                    getPublicClient({
                        chainId: a
                    } = {}) {
                        let s = this.publicClients.get(-1);
                        if (s && s ? .chain.id === a || (s = this.publicClients.get(a ? ? -1))) return s;
                        let {
                            publicClient: p
                        } = this.args;
                        return s = "function" == typeof p ? p({
                            chainId: a
                        }) : p, this.publicClients.set(a ? ? -1, s), s
                    }
                    setPublicClient(a) {
                        let s = this.data ? .chain ? .id;
                        this.args = { ...this.args,
                            publicClient: a
                        }, this.publicClients.clear(), this.setState(a => ({ ...a,
                            publicClient: this.getPublicClient({
                                chainId: s
                            })
                        }))
                    }
                    getWebSocketPublicClient({
                        chainId: a
                    } = {}) {
                        let s = this.webSocketPublicClients.get(-1);
                        if (s && s ? .chain.id === a || (s = this.webSocketPublicClients.get(a ? ? -1))) return s;
                        let {
                            webSocketPublicClient: p
                        } = this.args;
                        return (s = "function" == typeof p ? p({
                            chainId: a
                        }) : p) && this.webSocketPublicClients.set(a ? ? -1, s), s
                    }
                    setWebSocketPublicClient(a) {
                        let s = this.data ? .chain ? .id;
                        this.args = { ...this.args,
                            webSocketPublicClient: a
                        }, this.webSocketPublicClients.clear(), this.setState(a => ({ ...a,
                            webSocketPublicClient: this.getWebSocketPublicClient({
                                chainId: s
                            })
                        }))
                    }
                    setLastUsedConnector(a = null) {
                        this.storage ? .setItem("wallet", a)
                    }
                };

            function createConfig(a) {
                let s = new ti(a);
                return _ = s, s
            }

            function getConfig() {
                if (!_) throw Error("No wagmi config found. Ensure you have set up a config: https://wagmi.sh/react/config");
                return _
            }
            async function connect({
                chainId: a,
                connector: s
            }) {
                let p = getConfig(),
                    g = p.connector;
                if (g && s.id === g.id) throw new e8;
                try {
                    p.setState(a => ({ ...a,
                        status: "connecting"
                    }));
                    let g = await s.connect({
                        chainId: a
                    });
                    return p.setLastUsedConnector(s.id), p.setState(a => ({ ...a,
                        connector: s,
                        chains: s ? .chains,
                        data: g,
                        status: "connected"
                    })), p.storage.setItem("connected", !0), { ...g,
                        connector: s
                    }
                } catch (a) {
                    throw p.setState(a => ({ ...a,
                        status: a.connector ? "connected" : "disconnected"
                    })), a
                }
            }
            async function disconnect() {
                let a = getConfig();
                a.connector && await a.connector.disconnect(), a.clearState(), a.storage.removeItem("connected")
            }
            g = new WeakMap, m = new WeakMap, v = new WeakSet, x = function() {
                let onChange = a => {
                        this.setState(s => ({ ...s,
                            data: { ...s.data,
                                ...a
                            }
                        }))
                    },
                    onDisconnect = () => {
                        this.clearState()
                    },
                    onError = a => {
                        this.setState(s => ({ ...s,
                            error: a
                        }))
                    };
                this.store.subscribe(({
                    connector: a
                }) => a, (a, s) => {
                    s ? .off ? .("change", onChange), s ? .off ? .("disconnect", onDisconnect), s ? .off ? .("error", onError), a && (a.on ? .("change", onChange), a.on ? .("disconnect", onDisconnect), a.on ? .("error", onError))
                });
                let {
                    publicClient: a,
                    webSocketPublicClient: s
                } = this.args;
                ("function" == typeof a || "function" == typeof s) && this.store.subscribe(({
                    data: a
                }) => a ? .chain ? .id, a => {
                    this.setState(s => ({ ...s,
                        publicClient: this.getPublicClient({
                            chainId: a
                        }),
                        webSocketPublicClient: this.getWebSocketPublicClient({
                            chainId: a
                        })
                    }))
                })
            };
            var tn = [{
                    type: "event",
                    name: "Approval",
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "spender",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "value",
                        type: "uint256"
                    }]
                }, {
                    type: "event",
                    name: "Transfer",
                    inputs: [{
                        indexed: !0,
                        name: "from",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "to",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "value",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "allowance",
                    stateMutability: "view",
                    inputs: [{
                        name: "owner",
                        type: "address"
                    }, {
                        name: "spender",
                        type: "address"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "approve",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "spender",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }, {
                    type: "function",
                    name: "balanceOf",
                    stateMutability: "view",
                    inputs: [{
                        name: "account",
                        type: "address"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "decimals",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "uint8"
                    }]
                }, {
                    type: "function",
                    name: "name",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "string"
                    }]
                }, {
                    type: "function",
                    name: "symbol",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "string"
                    }]
                }, {
                    type: "function",
                    name: "totalSupply",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "transfer",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "recipient",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }, {
                    type: "function",
                    name: "transferFrom",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "sender",
                        type: "address"
                    }, {
                        name: "recipient",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }],
                to = [{
                    type: "event",
                    name: "Approval",
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "spender",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "value",
                        type: "uint256"
                    }]
                }, {
                    type: "event",
                    name: "Transfer",
                    inputs: [{
                        indexed: !0,
                        name: "from",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "to",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "value",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "allowance",
                    stateMutability: "view",
                    inputs: [{
                        name: "owner",
                        type: "address"
                    }, {
                        name: "spender",
                        type: "address"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "approve",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "spender",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }, {
                    type: "function",
                    name: "balanceOf",
                    stateMutability: "view",
                    inputs: [{
                        name: "account",
                        type: "address"
                    }],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "decimals",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "uint8"
                    }]
                }, {
                    type: "function",
                    name: "name",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }]
                }, {
                    type: "function",
                    name: "symbol",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }]
                }, {
                    type: "function",
                    name: "totalSupply",
                    stateMutability: "view",
                    inputs: [],
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }]
                }, {
                    type: "function",
                    name: "transfer",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "recipient",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }, {
                    type: "function",
                    name: "transferFrom",
                    stateMutability: "nonpayable",
                    inputs: [{
                        name: "sender",
                        type: "address"
                    }, {
                        name: "recipient",
                        type: "address"
                    }, {
                        name: "amount",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bool"
                    }]
                }];

            function getPublicClient({
                chainId: a
            } = {}) {
                let s = getConfig();
                return a && s.getPublicClient({
                    chainId: a
                }) || s.publicClient
            }
            async function getWalletClient({
                chainId: a
            } = {}) {
                let s = getConfig(),
                    p = await s.connector ? .getWalletClient ? .({
                        chainId: a
                    }) || null;
                return p
            }

            function getWebSocketPublicClient({
                chainId: a
            } = {}) {
                let s = getConfig();
                return a && s.getWebSocketPublicClient({
                    chainId: a
                }) || s.webSocketPublicClient
            }

            function watchPublicClient(a, s) {
                let p = getConfig(),
                    handleChange = async () => s(getPublicClient(a)),
                    g = p.subscribe(({
                        publicClient: a
                    }) => a, handleChange);
                return g
            }

            function watchWebSocketPublicClient(a, s) {
                let p = getConfig(),
                    handleChange = async () => s(getWebSocketPublicClient(a)),
                    g = p.subscribe(({
                        webSocketPublicClient: a
                    }) => a, handleChange);
                return g
            }
            async function prepareWriteContract({
                abi: a,
                address: s,
                args: p,
                chainId: g,
                dataSuffix: m,
                functionName: v,
                walletClient: x,
                ..._
            }) {
                let E = getPublicClient({
                        chainId: g
                    }),
                    T = x ? ? await getWalletClient({
                        chainId: g
                    });
                if (!T) throw new e1.N;
                g && assertActiveChain({
                    chainId: g
                });
                let {
                    account: F,
                    accessList: W,
                    blockNumber: z,
                    blockTag: Z,
                    gas: Q,
                    gasPrice: Y,
                    maxFeePerGas: X,
                    maxPriorityFeePerGas: J,
                    nonce: ei,
                    value: en
                } = {
                    accessList: _.accessList,
                    account: _.account,
                    blockNumber: _.blockNumber,
                    blockTag: _.blockTag,
                    data: _.data,
                    gas: _.gas,
                    gasPrice: _.gasPrice,
                    maxFeePerGas: _.maxFeePerGas,
                    maxPriorityFeePerGas: _.maxPriorityFeePerGas,
                    nonce: _.nonce,
                    to: _.to,
                    value: _.value
                }, {
                    result: eo,
                    request: ea
                } = await E.simulateContract({
                    abi: a,
                    address: s,
                    functionName: v,
                    args: p,
                    account: F || T.account,
                    accessList: W,
                    blockNumber: z,
                    blockTag: Z,
                    dataSuffix: m,
                    gas: Q,
                    gasPrice: Y,
                    maxFeePerGas: X,
                    maxPriorityFeePerGas: J,
                    nonce: ei,
                    value: en
                }), es = a.filter(a => "name" in a && a.name === v);
                return {
                    mode: "prepared",
                    request: { ...ea,
                        abi: es,
                        chainId: g
                    },
                    result: eo
                }
            }
            async function chunk_TSH6VVF4_multicall({
                chainId: a,
                contracts: s,
                blockNumber: p,
                blockTag: g,
                ...m
            }) {
                let v = getPublicClient({
                    chainId: a
                });
                if (!v.chains) throw new e9;
                if (a && v.chain.id !== a) throw new e6({
                    chainId: a
                });
                return v.multicall({
                    allowFailure: m.allowFailure ? ? !0,
                    blockNumber: p,
                    blockTag: g,
                    contracts: s
                })
            }
            async function chunk_TSH6VVF4_readContract({
                address: a,
                account: s,
                chainId: p,
                abi: g,
                args: m,
                functionName: v,
                blockNumber: x,
                blockTag: _
            }) {
                let E = getPublicClient({
                    chainId: p
                });
                return E.readContract({
                    abi: g,
                    address: a,
                    account: s,
                    functionName: v,
                    args: m,
                    blockNumber: x,
                    blockTag: _
                })
            }
            async function readContracts({
                contracts: a,
                blockNumber: s,
                blockTag: p,
                ...g
            }) {
                let {
                    allowFailure: m = !0
                } = g;
                try {
                    let g = getPublicClient(),
                        v = a.reduce((a, s, p) => {
                            let m = s.chainId ? ? g.chain.id;
                            return { ...a,
                                [m]: [...a[m] || [], {
                                    contract: s,
                                    index: p
                                }]
                            }
                        }, {}),
                        x = (await Promise.all(Object.entries(v).map(([a, g]) => chunk_TSH6VVF4_multicall({
                            allowFailure: m,
                            chainId: parseInt(a),
                            contracts: g.map(({
                                contract: a
                            }) => a),
                            blockNumber: s,
                            blockTag: p
                        })))).flat(),
                        _ = Object.values(v).flatMap(a => a.map(({
                            index: a
                        }) => a));
                    return x.reduce((a, s, p) => (a && (a[_[p]] = s), a), [])
                } catch (g) {
                    if (g instanceof ei.uq) throw g;
                    let promises = () => a.map(a => chunk_TSH6VVF4_readContract({ ...a,
                        blockNumber: s,
                        blockTag: p
                    }));
                    if (m) return (await Promise.allSettled(promises())).map(a => "fulfilled" === a.status ? {
                        result: a.value,
                        status: "success"
                    } : {
                        error: a.reason,
                        result: void 0,
                        status: "failure"
                    });
                    return await Promise.all(promises())
                }
            }
            async function writeContract(a) {
                let s;
                let p = await getWalletClient({
                    chainId: a.chainId
                });
                if (!p) throw new e1.N;
                if (a.chainId && assertActiveChain({
                        chainId: a.chainId
                    }), "prepared" === a.mode) s = a.request;
                else {
                    let {
                        chainId: p,
                        mode: g,
                        ...m
                    } = a, v = await prepareWriteContract(m);
                    s = v.request
                }
                let g = await p.writeContract({ ...s,
                    chain: a.chainId ? {
                        id: a.chainId
                    } : null
                });
                return {
                    hash: g
                }
            }
            async function fetchBalance({
                address: a,
                chainId: s,
                formatUnits: p,
                token: g
            }) {
                let m = getConfig(),
                    v = getPublicClient({
                        chainId: s
                    });
                if (g) {
                    let fetchContractBalance = async ({
                        abi: m
                    }) => {
                        let v = {
                                abi: m,
                                address: g,
                                chainId: s
                            },
                            [x, _, E] = await readContracts({
                                allowFailure: !1,
                                contracts: [{ ...v,
                                    functionName: "balanceOf",
                                    args: [a]
                                }, { ...v,
                                    functionName: "decimals"
                                }, { ...v,
                                    functionName: "symbol"
                                }]
                            });
                        return {
                            decimals: _,
                            formatted: (0, e5.b)(x ? ? "0", getUnit(p ? ? _)),
                            symbol: E,
                            value: x
                        }
                    };
                    try {
                        return await fetchContractBalance({
                            abi: tn
                        })
                    } catch (a) {
                        if (a instanceof ei.uq) {
                            let {
                                symbol: a,
                                ...s
                            } = await fetchContractBalance({
                                abi: to
                            });
                            return {
                                symbol: (0, eP.rR)((0, Q.f)(a, {
                                    dir: "right"
                                })),
                                ...s
                            }
                        }
                        throw a
                    }
                }
                let x = [...m.publicClient.chains || [], ...m.chains ? ? []],
                    _ = await v.getBalance({
                        address: a
                    }),
                    E = x.find(a => a.id === v.chain.id);
                return {
                    decimals: E ? .nativeCurrency.decimals ? ? 18,
                    formatted: (0, e5.b)(_ ? ? "0", getUnit(p ? ? 18)),
                    symbol: E ? .nativeCurrency.symbol ? ? "ETH",
                    value: _
                }
            }

            function getAccount() {
                let {
                    data: a,
                    connector: s,
                    status: p
                } = getConfig();
                switch (p) {
                    case "connected":
                        return {
                            address: a ? .account,
                            connector: s,
                            isConnected: !0,
                            isConnecting: !1,
                            isDisconnected: !1,
                            isReconnecting: !1,
                            status: p
                        };
                    case "reconnecting":
                        return {
                            address: a ? .account,
                            connector: s,
                            isConnected: !!a ? .account,
                            isConnecting: !1,
                            isDisconnected: !1,
                            isReconnecting: !0,
                            status: p
                        };
                    case "connecting":
                        return {
                            address: a ? .account,
                            connector: s,
                            isConnected: !1,
                            isConnecting: !0,
                            isDisconnected: !1,
                            isReconnecting: !1,
                            status: p
                        };
                    case "disconnected":
                        return {
                            address: void 0,
                            connector: void 0,
                            isConnected: !1,
                            isConnecting: !1,
                            isDisconnected: !0,
                            isReconnecting: !1,
                            status: p
                        }
                }
            }

            function getNetwork() {
                let a = getConfig(),
                    s = a.data ? .chain ? .id,
                    p = a.chains ? ? [],
                    g = [...a.publicClient ? .chains || [], ...p].find(a => a.id === s) ? ? {
                        id: s,
                        name: `Chain ${s}`,
                        network: `${s}`,
                        nativeCurrency: {
                            name: "Ether",
                            decimals: 18,
                            symbol: "ETH"
                        },
                        rpcUrls: {
                            default: {
                                http: [""]
                            },
                            public: {
                                http: [""]
                            }
                        }
                    };
                return {
                    chain: s ? { ...g,
                        ...a.data ? .chain,
                        id : s
                    } : void 0,
                    chains: p
                }
            }
            async function switchNetwork({
                chainId: a
            }) {
                let {
                    connector: s
                } = getConfig();
                if (!s) throw new e1.N;
                if (!s.switchChain) throw new e7({
                    connector: s
                });
                return s.switchChain(a)
            }

            function watchAccount(a, {
                selector: s = a => a
            } = {}) {
                let p = getConfig(),
                    g = p.subscribe(({
                        data: a,
                        connector: p,
                        status: g
                    }) => s({
                        address: a ? .account,
                        connector: p,
                        status: g
                    }), () => a(getAccount()), {
                        equalityFn: shallow$1
                    });
                return g
            }

            function watchNetwork(a, {
                selector: s = a => a
            } = {}) {
                let p = getConfig(),
                    g = p.subscribe(({
                        data: a,
                        chains: p
                    }) => s({
                        chainId: a ? .chain ? .id,
                        chains: p
                    }), () => a(getNetwork()), {
                        equalityFn: shallow$1
                    });
                return g
            }
            async function fetchEnsAvatar({
                name: a,
                chainId: s
            }) {
                let {
                    normalize: g
                } = await p.e(45).then(p.bind(p, 50045)), m = getPublicClient({
                    chainId: s
                }), v = await m.getEnsAvatar({
                    name: g(a)
                });
                return v
            }
            async function fetchEnsName({
                address: a,
                chainId: s
            }) {
                let p = getPublicClient({
                    chainId: s
                });
                return p.getEnsName({
                    address: (0, e3.K)(a)
                })
            }
            async function fetchBlockNumber({
                chainId: a
            } = {}) {
                let s = getPublicClient({
                        chainId: a
                    }),
                    p = await s.getBlockNumber();
                return p
            }
            async function waitForTransaction({
                chainId: a,
                confirmations: s = 1,
                hash: p,
                onReplaced: g,
                timeout: m = 0
            }) {
                let v = getPublicClient({
                        chainId: a
                    }),
                    x = await v.waitForTransactionReceipt({
                        hash: p,
                        confirmations: s,
                        onReplaced: g,
                        timeout: m
                    });
                if ("reverted" === x.status) {
                    let a = await v.getTransaction({
                            hash: x.transactionHash
                        }),
                        s = await v.call({ ...a,
                            gasPrice: "eip1559" !== a.type ? a.gasPrice : void 0,
                            maxFeePerGas: "eip1559" === a.type ? a.maxFeePerGas : void 0,
                            maxPriorityFeePerGas: "eip1559" === a.type ? a.maxPriorityFeePerGas : void 0
                        }),
                        p = (0, eP.rR)(`0x${s.substring(138)}`);
                    throw Error(p)
                }
                return x
            }

            function assertActiveChain({
                chainId: a
            }) {
                let {
                    chain: s,
                    chains: p
                } = getNetwork(), g = s ? .id;
                if (g && a !== g) throw new e4({
                    activeChain: p.find(a => a.id === g) ? .name ? ? `Chain ${g}`,
                    targetChain: p.find(s => s.id === a) ? .name ? ? `Chain ${a}`
                })
            }
        },
        44519: function(a, s, p) {
            "use strict";
            p.d(s, {
                E: function() {
                    return x
                }
            });
            var g = p(74548),
                m = p(20239),
                v = p(6537);
            g.extend(v), g.extend(m), g.updateLocale("en", {
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "%s sec",
                    m: "1 min",
                    mm: "%d min",
                    h: "1 hr",
                    hh: "%d hrs",
                    d: "1 d",
                    dd: "%d d",
                    M: "1 mo",
                    MM: "%d mo",
                    y: "1 yr",
                    yy: "%d yr"
                }
            });
            let x = {
                getYear: (a = new Date().toISOString()) => g(a).year(),
                getRelativeDateFromNow: a => g(a).fromNow(!0)
            }
        },
        51250: function(a, s, p) {
            "use strict";
            p.d(s, {
                AccountController: function() {
                    return _
                },
                ApiController: function() {
                    return eu
                },
                WM: function() {
                    return Z
                },
                fz: function() {
                    return eI
                },
                Lr: function() {
                    return ex
                },
                ConnectionController: function() {
                    return eS
                },
                ConnectorController: function() {
                    return Y
                },
                bq: function() {
                    return m
                },
                j1: function() {
                    return v
                },
                Xs: function() {
                    return eg
                },
                IN: function() {
                    return ev
                },
                NetworkController: function() {
                    return en
                },
                OptionsController: function() {
                    return ea
                },
                Ie: function() {
                    return J
                },
                RouterController: function() {
                    return em
                },
                yD: function() {
                    return eO
                },
                SnackController: function() {
                    return eE
                },
                MO: function() {
                    return W
                },
                ThemeController: function() {
                    return eT
                },
                sl: function() {
                    return e$
                }
            });
            var g = p(53722);

            function subscribeKey(a, s, p, m) {
                let v = a[s];
                return (0, g.Ld)(a, () => {
                    let g = a[s];
                    Object.is(v, g) || p(v = g)
                }, m)
            }
            Symbol();
            let m = {
                    FOUR_MINUTES_MS: 24e4,
                    TEN_SEC_MS: 1e4,
                    ONE_SEC_MS: 1e3,
                    RESTRICTED_TIMEZONES: ["ASIA/SHANGHAI", "ASIA/URUMQI", "ASIA/CHONGQING", "ASIA/HARBIN", "ASIA/KASHGAR", "ASIA/MACAU", "ASIA/HONG_KONG", "ASIA/MACAO", "ASIA/BEIJING", "ASIA/HARBIN"]
                },
                v = {
                    isMobile: () => "undefined" != typeof window && !!(window.matchMedia("(pointer:coarse)").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)),
                    isAndroid() {
                        let a = navigator.userAgent.toLowerCase();
                        return v.isMobile() && a.includes("android")
                    },
                    isIos() {
                        let a = navigator.userAgent.toLowerCase();
                        return v.isMobile() && (a.includes("iphone") || a.includes("ipad"))
                    },
                    isClient: () => "undefined" != typeof window,
                    isPairingExpired: a => !a || a - Date.now() <= m.TEN_SEC_MS,
                    isAllowedRetry: a => Date.now() - a >= m.ONE_SEC_MS,
                    copyToClopboard(a) {
                        navigator.clipboard.writeText(a)
                    },
                    getPairingExpiry: () => Date.now() + m.FOUR_MINUTES_MS,
                    getPlainAddress: a => a.split(":")[2],
                    wait: async a => new Promise(s => {
                        setTimeout(s, a)
                    }),
                    debounce(a, s = 500) {
                        let p;
                        return (...g) => {
                            p && clearTimeout(p), p = setTimeout(function() {
                                a(...g)
                            }, s)
                        }
                    },
                    isHttpUrl: a => a.startsWith("http://") || a.startsWith("https://"),
                    formatNativeUrl(a, s) {
                        if (v.isHttpUrl(a)) return this.formatUniversalUrl(a, s);
                        let p = a;
                        p.includes("://") || (p = a.replaceAll("/", "").replaceAll(":", ""), p = `${p}://`), p.endsWith("/") || (p = `${p}/`);
                        let g = encodeURIComponent(s);
                        return {
                            redirect: `${p}wc?uri=${g}`,
                            href: p
                        }
                    },
                    formatUniversalUrl(a, s) {
                        if (!v.isHttpUrl(a)) return this.formatNativeUrl(a, s);
                        let p = a;
                        p.endsWith("/") || (p = `${p}/`);
                        let g = encodeURIComponent(s);
                        return {
                            redirect: `${p}wc?uri=${g}`,
                            href: p
                        }
                    },
                    openHref(a, s) {
                        window.open(a, s, "noreferrer noopener")
                    },
                    async preloadImage(a) {
                        let s = new Promise((s, p) => {
                            let g = new Image;
                            g.onload = s, g.onerror = p, g.crossOrigin = "anonymous", g.src = a
                        });
                        return Promise.race([s, v.wait(2e3)])
                    },
                    formatBalance(a, s) {
                        let p;
                        if ("0" === a) p = "0.000";
                        else if ("string" == typeof a) {
                            let s = Number(a);
                            s && (p = s.toString().match(/^-?\d+(?:\.\d{0,3})?/u) ? .[0])
                        }
                        return p ? `${p} ${s}` : "0.000"
                    },
                    isRestrictedRegion() {
                        try {
                            let {
                                timeZone: a
                            } = new Intl.DateTimeFormat().resolvedOptions(), s = a.toUpperCase();
                            return m.RESTRICTED_TIMEZONES.includes(s)
                        } catch {
                            return !1
                        }
                    },
                    getApiUrl: () => v.isRestrictedRegion() ? "https://api.web3modal.org" : "https://api.web3modal.com",
                    getBlockchainApiUrl: () => v.isRestrictedRegion() ? "https://rpc.walletconnect.org" : "https://rpc.walletconnect.com",
                    getAnalyticsUrl: () => v.isRestrictedRegion() ? "https://pulse.walletconnect.org" : "https://pulse.walletconnect.com",
                    getUUID: () => crypto ? .randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, a => {
                        let s = 16 * Math.random() | 0;
                        return ("x" === a ? s : 3 & s | 8).toString(16)
                    })
                },
                x = (0, g.sj)({
                    isConnected: !1
                }),
                _ = {
                    state: x,
                    subscribe: a => (0, g.Ld)(x, () => a(x)),
                    subscribeKey: (a, s) => subscribeKey(x, a, s),
                    setIsConnected(a) {
                        x.isConnected = a
                    },
                    setCaipAddress(a) {
                        x.caipAddress = a, x.address = a ? v.getPlainAddress(a) : void 0
                    },
                    setBalance(a, s) {
                        x.balance = a, x.balanceSymbol = s
                    },
                    setProfileName(a) {
                        x.profileName = a
                    },
                    setProfileImage(a) {
                        x.profileImage = a
                    },
                    setAddressExplorerUrl(a) {
                        x.addressExplorerUrl = a
                    },
                    resetAccount() {
                        x.isConnected = !1, x.caipAddress = void 0, x.address = void 0, x.balance = void 0, x.balanceSymbol = void 0, x.profileName = void 0, x.profileImage = void 0, x.addressExplorerUrl = void 0
                    }
                };
            let FetchUtil = class FetchUtil {
                constructor({
                    baseUrl: a
                }) {
                    this.baseUrl = a
                }
                async get({
                    headers: a,
                    ...s
                }) {
                    let p = this.createUrl(s),
                        g = await fetch(p, {
                            method: "GET",
                            headers: a
                        });
                    return g.json()
                }
                async getBlob({
                    headers: a,
                    ...s
                }) {
                    let p = this.createUrl(s),
                        g = await fetch(p, {
                            method: "GET",
                            headers: a
                        });
                    return g.blob()
                }
                async post({
                    body: a,
                    headers: s,
                    ...p
                }) {
                    let g = this.createUrl(p),
                        m = await fetch(g, {
                            method: "POST",
                            headers: s,
                            body: a ? JSON.stringify(a) : void 0
                        });
                    return m.json()
                }
                async put({
                    body: a,
                    headers: s,
                    ...p
                }) {
                    let g = this.createUrl(p),
                        m = await fetch(g, {
                            method: "PUT",
                            headers: s,
                            body: a ? JSON.stringify(a) : void 0
                        });
                    return m.json()
                }
                async delete({
                    body: a,
                    headers: s,
                    ...p
                }) {
                    let g = this.createUrl(p),
                        m = await fetch(g, {
                            method: "DELETE",
                            headers: s,
                            body: a ? JSON.stringify(a) : void 0
                        });
                    return m.json()
                }
                createUrl({
                    path: a,
                    params: s
                }) {
                    let p = new URL(a, this.baseUrl);
                    return s && Object.entries(s).forEach(([a, s]) => {
                        s && p.searchParams.append(a, s)
                    }), p
                }
            };
            let E = "WALLETCONNECT_DEEPLINK_CHOICE",
                T = "@w3m/recent",
                F = "@w3m/connected_wallet_image_url",
                W = {
                    setWalletConnectDeepLink({
                        href: a,
                        name: s
                    }) {
                        try {
                            localStorage.setItem(E, JSON.stringify({
                                href: a,
                                name: s
                            }))
                        } catch {
                            console.info("Unable to set WalletConnect deep link")
                        }
                    },
                    getWalletConnectDeepLink() {
                        try {
                            let a = localStorage.getItem(E);
                            if (a) return JSON.parse(a)
                        } catch {
                            console.info("Unable to get WalletConnect deep link")
                        }
                    },
                    deleteWalletConnectDeepLink() {
                        try {
                            localStorage.removeItem(E)
                        } catch {
                            console.info("Unable to delete WalletConnect deep link")
                        }
                    },
                    setWeb3ModalRecent(a) {
                        try {
                            let s = W.getRecentWallets(),
                                p = s.find(s => s.id === a.id);
                            p || (s.unshift(a), s.length > 2 && s.pop(), localStorage.setItem(T, JSON.stringify(s)))
                        } catch {
                            console.info("Unable to set Web3Modal recent")
                        }
                    },
                    getRecentWallets() {
                        try {
                            let a = localStorage.getItem(T);
                            return a ? JSON.parse(a) : []
                        } catch {
                            console.info("Unable to get Web3Modal recent")
                        }
                        return []
                    },
                    setConnectedWalletImageUrl(a) {
                        try {
                            localStorage.setItem(F, a)
                        } catch {
                            console.info("Unable to set Connected Wallet Image Url")
                        }
                    },
                    getConnectedWalletImageUrl() {
                        try {
                            return localStorage.getItem(F)
                        } catch {
                            console.info("Unable to set Connected Wallet Image Url")
                        }
                    }
                },
                z = (0, g.sj)({
                    walletImages: {},
                    networkImages: {},
                    connectorImages: {},
                    tokenImages: {}
                }),
                Z = {
                    state: z,
                    subscribeNetworkImages: a => (0, g.Ld)(z.networkImages, () => a(z.networkImages)),
                    subscribeKey: (a, s) => subscribeKey(z, a, s),
                    setWalletImage(a, s) {
                        z.walletImages[a] = s
                    },
                    setNetworkImage(a, s) {
                        z.networkImages[a] = s
                    },
                    setConnectorImage(a, s) {
                        z.connectorImages[a] = s
                    },
                    setTokenImage(a, s) {
                        z.tokenImages[a] = s
                    }
                },
                Q = (0, g.sj)({
                    connectors: []
                }),
                Y = {
                    state: Q,
                    subscribeKey: (a, s) => subscribeKey(Q, a, s),
                    setConnectors(a) {
                        Q.connectors = a.map(a => (0, g.iH)(a))
                    },
                    addConnector(a) {
                        Q.connectors.push((0, g.iH)(a))
                    },
                    getConnectors: () => Q.connectors
                },
                X = (0, g.sj)({
                    open: !1,
                    selectedNetworkId: void 0
                }),
                J = {
                    state: X,
                    subscribe: a => (0, g.Ld)(X, () => a(X)),
                    set(a) {
                        Object.assign(X, { ...X,
                            ...a
                        })
                    }
                },
                ei = (0, g.sj)({
                    supportsAllNetworks: !0,
                    isDefaultCaipNetwork: !1
                }),
                en = {
                    state: ei,
                    subscribeKey: (a, s) => subscribeKey(ei, a, s),
                    _getClient() {
                        if (!ei._client) throw Error("NetworkController client not set");
                        return ei._client
                    },
                    setClient(a) {
                        ei._client = (0, g.iH)(a)
                    },
                    setCaipNetwork(a) {
                        ei.caipNetwork = a, J.set({
                            selectedNetworkId: a ? .id
                        })
                    },
                    setDefaultCaipNetwork(a) {
                        ei.caipNetwork = a, J.set({
                            selectedNetworkId: a ? .id
                        }), ei.isDefaultCaipNetwork = !0
                    },
                    setRequestedCaipNetworks(a) {
                        ei.requestedCaipNetworks = a
                    },
                    async getApprovedCaipNetworksData() {
                        let a = await this._getClient().getApprovedCaipNetworksData();
                        ei.supportsAllNetworks = a.supportsAllNetworks, ei.approvedCaipNetworkIds = a.approvedCaipNetworkIds
                    },
                    async switchActiveNetwork(a) {
                        await this._getClient().switchCaipNetwork(a), ei.caipNetwork = a
                    },
                    resetNetwork() {
                        ei.isDefaultCaipNetwork || (ei.caipNetwork = void 0), ei.approvedCaipNetworkIds = void 0, ei.supportsAllNetworks = !0
                    }
                },
                eo = (0, g.sj)({
                    projectId: "",
                    sdkType: "w3m",
                    sdkVersion: "html-wagmi-undefined"
                }),
                ea = {
                    state: eo,
                    subscribeKey: (a, s) => subscribeKey(eo, a, s),
                    setProjectId(a) {
                        eo.projectId = a
                    },
                    setIncludeWalletIds(a) {
                        eo.includeWalletIds = a
                    },
                    setExcludeWalletIds(a) {
                        eo.excludeWalletIds = a
                    },
                    setFeaturedWalletIds(a) {
                        eo.featuredWalletIds = a
                    },
                    setTokens(a) {
                        eo.tokens = a
                    },
                    setTermsConditionsUrl(a) {
                        eo.termsConditionsUrl = a
                    },
                    setPrivacyPolicyUrl(a) {
                        eo.privacyPolicyUrl = a
                    },
                    setCustomWallets(a) {
                        eo.customWallets = a
                    },
                    setEnableAnalytics(a) {
                        eo.enableAnalytics = a
                    },
                    setSdkVersion(a) {
                        eo.sdkVersion = a
                    },
                    setMetadata(a) {
                        eo.metadata = a
                    }
                },
                es = v.getApiUrl(),
                el = new FetchUtil({
                    baseUrl: es
                }),
                ec = (0, g.sj)({
                    page: 1,
                    count: 0,
                    featured: [],
                    recommended: [],
                    wallets: [],
                    search: []
                }),
                eu = {
                    state: ec,
                    subscribeKey: (a, s) => subscribeKey(ec, a, s),
                    _getApiHeaders() {
                        let {
                            projectId: a,
                            sdkType: s,
                            sdkVersion: p
                        } = ea.state;
                        return {
                            "x-project-id": a,
                            "x-sdk-type": s,
                            "x-sdk-version": p
                        }
                    },
                    async _fetchWalletImage(a) {
                        let s = `${el.baseUrl}/getWalletImage/${a}`,
                            p = await el.getBlob({
                                path: s,
                                headers: eu._getApiHeaders()
                            });
                        Z.setWalletImage(a, URL.createObjectURL(p))
                    },
                    async _fetchNetworkImage(a) {
                        let s = `${el.baseUrl}/public/getAssetImage/${a}`,
                            p = await el.getBlob({
                                path: s,
                                headers: eu._getApiHeaders()
                            });
                        Z.setNetworkImage(a, URL.createObjectURL(p))
                    },
                    async _fetchConnectorImage(a) {
                        let s = `${el.baseUrl}/public/getAssetImage/${a}`,
                            p = await el.getBlob({
                                path: s,
                                headers: eu._getApiHeaders()
                            });
                        Z.setConnectorImage(a, URL.createObjectURL(p))
                    },
                    async fetchNetworkImages() {
                        let {
                            requestedCaipNetworks: a
                        } = en.state, s = a ? .map(({
                            imageId: a
                        }) => a).filter(Boolean);
                        s && await Promise.allSettled(s.map(a => eu._fetchNetworkImage(a)))
                    },
                    async fetchConnectorImages() {
                        let {
                            connectors: a
                        } = Y.state, s = a.map(({
                            imageId: a
                        }) => a).filter(Boolean);
                        await Promise.allSettled(s.map(a => eu._fetchConnectorImage(a)))
                    },
                    async fetchFeaturedWallets() {
                        let {
                            featuredWalletIds: a
                        } = ea.state;
                        if (a ? .length) {
                            let {
                                data: s
                            } = await el.get({
                                path: "/getWallets",
                                headers: eu._getApiHeaders(),
                                params: {
                                    page: "1",
                                    entries: a ? .length ? String(a.length) : "4",
                                    include: a ? .join(",")
                                }
                            });
                            s.sort((s, p) => a.indexOf(s.id) - a.indexOf(p.id));
                            let p = s.map(a => a.image_id).filter(Boolean);
                            await Promise.allSettled(p.map(a => eu._fetchWalletImage(a))), ec.featured = s
                        }
                    },
                    async fetchRecommendedWallets() {
                        let {
                            includeWalletIds: a,
                            excludeWalletIds: s,
                            featuredWalletIds: p
                        } = ea.state, g = [...s ? ? [], ...p ? ? []].filter(Boolean), {
                            data: m,
                            count: v
                        } = await el.get({
                            path: "/getWallets",
                            headers: eu._getApiHeaders(),
                            params: {
                                page: "1",
                                entries: "4",
                                include: a ? .join(","),
                                exclude: g ? .join(",")
                            }
                        }), x = W.getRecentWallets(), _ = m.map(a => a.image_id).filter(Boolean), E = x.map(a => a.image_id).filter(Boolean);
                        await Promise.allSettled([..._, ...E].map(a => eu._fetchWalletImage(a))), ec.recommended = m, ec.count = v ? ? 0
                    },
                    async fetchWallets({
                        page: a
                    }) {
                        let {
                            includeWalletIds: s,
                            excludeWalletIds: p,
                            featuredWalletIds: g
                        } = ea.state, m = [...ec.recommended.map(({
                            id: a
                        }) => a), ...p ? ? [], ...g ? ? []].filter(Boolean), {
                            data: x,
                            count: _
                        } = await el.get({
                            path: "/getWallets",
                            headers: eu._getApiHeaders(),
                            params: {
                                page: String(a),
                                entries: "40",
                                include: s ? .join(","),
                                exclude: m.join(",")
                            }
                        }), E = x.map(a => a.image_id).filter(Boolean);
                        await Promise.allSettled([...E.map(a => eu._fetchWalletImage(a)), v.wait(300)]), ec.wallets = [...ec.wallets, ...x], ec.count = _ > ec.count ? _ : ec.count, ec.page = a
                    },
                    async searchWallet({
                        search: a
                    }) {
                        let {
                            includeWalletIds: s,
                            excludeWalletIds: p
                        } = ea.state;
                        ec.search = [];
                        let {
                            data: g
                        } = await el.get({
                            path: "/getWallets",
                            headers: eu._getApiHeaders(),
                            params: {
                                page: "1",
                                entries: "100",
                                search: a,
                                include: s ? .join(","),
                                exclude: p ? .join(",")
                            }
                        }), m = g.map(a => a.image_id).filter(Boolean);
                        await Promise.allSettled([...m.map(a => eu._fetchWalletImage(a)), v.wait(300)]), ec.search = g
                    },
                    prefetch() {
                        ec.prefetchPromise = Promise.race([Promise.allSettled([eu.fetchFeaturedWallets(), eu.fetchRecommendedWallets(), eu.fetchNetworkImages(), eu.fetchConnectorImages()]), v.wait(3e3)])
                    }
                },
                ed = v.getAnalyticsUrl(),
                eh = new FetchUtil({
                    baseUrl: ed
                }),
                ep = ["MODAL_CREATED"],
                ef = (0, g.sj)({
                    timestamp: Date.now(),
                    data: {
                        type: "track",
                        event: "MODAL_CREATED"
                    }
                }),
                eg = {
                    state: ef,
                    subscribe: a => (0, g.Ld)(ef, () => a(ef)),
                    _getApiHeaders() {
                        let {
                            projectId: a,
                            sdkType: s,
                            sdkVersion: p
                        } = ea.state;
                        return {
                            "x-project-id": a,
                            "x-sdk-type": s,
                            "x-sdk-version": p
                        }
                    },
                    async _sendAnalyticsEvent(a) {
                        try {
                            if (ep.includes(a.data.event) || "undefined" == typeof window) return;
                            await eh.post({
                                path: "/e",
                                headers: eg._getApiHeaders(),
                                body: {
                                    eventId: v.getUUID(),
                                    url: window.location.href,
                                    domain: window.location.hostname,
                                    timestamp: a.timestamp,
                                    props: a.data
                                }
                            })
                        } catch {}
                    },
                    sendEvent(a) {
                        ef.timestamp = Date.now(), ef.data = a, ea.state.enableAnalytics && eg._sendAnalyticsEvent(ef)
                    }
                },
                ew = (0, g.sj)({
                    view: "Connect",
                    history: ["Connect"]
                }),
                em = {
                    state: ew,
                    subscribeKey: (a, s) => subscribeKey(ew, a, s),
                    push(a, s) {
                        a !== ew.view && (ew.view = a, ew.history.push(a), ew.data = s)
                    },
                    reset(a) {
                        ew.view = a, ew.history = [a]
                    },
                    replace(a) {
                        ew.history.length > 1 && ew.history.at(-1) !== a && (ew.view = a, ew.history[ew.history.length - 1] = a)
                    },
                    goBack() {
                        if (ew.history.length > 1) {
                            ew.history.pop();
                            let [a] = ew.history.slice(-1);
                            a && (ew.view = a)
                        }
                    }
                },
                eb = (0, g.sj)({
                    open: !1
                }),
                ev = {
                    state: eb,
                    subscribeKey: (a, s) => subscribeKey(eb, a, s),
                    async open(a) {
                        await eu.state.prefetchPromise, a ? .view ? em.reset(a.view) : _.state.isConnected ? em.reset("Account") : em.reset("Connect"), eb.open = !0, J.set({
                            open: !0
                        }), eg.sendEvent({
                            type: "track",
                            event: "MODAL_OPEN"
                        })
                    },
                    close() {
                        eb.open = !1, J.set({
                            open: !1
                        }), eg.sendEvent({
                            type: "track",
                            event: "MODAL_CLOSE"
                        })
                    }
                },
                ey = v.getBlockchainApiUrl(),
                eC = new FetchUtil({
                    baseUrl: ey
                }),
                ex = {
                    fetchIdentity: ({
                        caipChainId: a,
                        address: s
                    }) => eC.get({
                        path: `/v1/identity/${s}`,
                        params: {
                            chainId: a,
                            projectId: ea.state.projectId
                        }
                    }),
                    fetchTransactions: ({
                        account: a,
                        projectId: s,
                        cursor: p
                    }) => eC.get({
                        path: `/v1/account/${a}/history?projectId=${s}`,
                        params: p ? {
                            cursor: p
                        } : {}
                    })
                },
                e_ = (0, g.sj)({
                    message: "",
                    variant: "success",
                    open: !1
                }),
                eE = {
                    state: e_,
                    subscribeKey: (a, s) => subscribeKey(e_, a, s),
                    showSuccess(a) {
                        e_.message = a, e_.variant = "success", e_.open = !0
                    },
                    showError(a) {
                        e_.message = a, e_.variant = "error", e_.open = !0
                    },
                    hide() {
                        e_.open = !1
                    }
                },
                ek = (0, g.sj)({
                    transactions: [],
                    transactionsByYear: {},
                    loading: !1,
                    empty: !1,
                    next: void 0
                }),
                e$ = {
                    state: ek,
                    subscribe: a => (0, g.Ld)(ek, () => a(ek)),
                    async fetchTransactions(a) {
                        let {
                            projectId: s
                        } = ea.state;
                        if (!s || !a) throw Error("Transactions can't be fetched without a projectId and an accountAddress");
                        ek.loading = !0;
                        try {
                            let p = await ex.fetchTransactions({
                                    account: a,
                                    projectId: s,
                                    cursor: ek.next
                                }),
                                g = this.filterSpamTransactions(p.data),
                                m = [...ek.transactions, ...g];
                            ek.loading = !1, ek.transactions = m, ek.transactionsByYear = this.groupTransactionsByYear(ek.transactionsByYear, g), ek.empty = 0 === m.length, ek.next = p.next ? p.next : void 0
                        } catch (p) {
                            eg.sendEvent({
                                type: "track",
                                event: "ERROR_FETCH_TRANSACTIONS",
                                properties: {
                                    address: a,
                                    projectId: s,
                                    cursor: ek.next
                                }
                            }), eE.showError("Failed to fetch transactions"), ek.loading = !1, ek.empty = !0
                        }
                    },
                    groupTransactionsByYear: (a = {}, s = []) => (s.forEach(s => {
                        let p = new Date(s.metadata.minedAt).getFullYear();
                        a[p] || (a[p] = []), a[p] ? .push(s)
                    }), a),
                    filterSpamTransactions: a => a.filter(a => {
                        let s = a.transfers.every(a => a.nft_info ? .flags.is_spam === !0);
                        return !s
                    }),
                    resetTransactions() {
                        ek.transactions = [], ek.transactionsByYear = {}, ek.loading = !1, ek.empty = !1, ek.next = void 0
                    }
                },
                eP = (0, g.sj)({
                    wcError: !1,
                    buffering: !1
                }),
                eS = {
                    state: eP,
                    subscribeKey: (a, s) => subscribeKey(eP, a, s),
                    _getClient() {
                        if (!eP._client) throw Error("ConnectionController client not set");
                        return eP._client
                    },
                    setClient(a) {
                        eP._client = (0, g.iH)(a)
                    },
                    connectWalletConnect() {
                        eP.wcPromise = this._getClient().connectWalletConnect(a => {
                            eP.wcUri = a, eP.wcPairingExpiry = v.getPairingExpiry()
                        })
                    },
                    async connectExternal(a) {
                        await this._getClient().connectExternal ? .(a)
                    },
                    checkInstalled(a) {
                        return this._getClient().checkInstalled ? .(a)
                    },
                    resetWcConnection() {
                        eP.wcUri = void 0, eP.wcPairingExpiry = void 0, eP.wcPromise = void 0, eP.wcLinking = void 0, eP.recentWallet = void 0, e$.resetTransactions(), W.deleteWalletConnectDeepLink()
                    },
                    setWcLinking(a) {
                        eP.wcLinking = a
                    },
                    setWcError(a) {
                        eP.wcError = a, eP.buffering = !1
                    },
                    setRecentWallet(a) {
                        eP.recentWallet = a
                    },
                    setBuffering(a) {
                        eP.buffering = a
                    },
                    async disconnect() {
                        await this._getClient().disconnect(), this.resetWcConnection()
                    }
                },
                eA = (0, g.sj)({
                    status: "uninitialized"
                }),
                eO = {
                    state: eA,
                    subscribeKey: (a, s) => subscribeKey(eA, a, s),
                    subscribe: a => (0, g.Ld)(eA, () => a(eA)),
                    _getClient() {
                        if (!eA._client) throw Error("SIWEController client not set");
                        return eA._client
                    },
                    setSIWEClient(a) {
                        eA._client = (0, g.iH)(a), eA.status = "ready"
                    },
                    setNonce(a) {
                        eA.nonce = a
                    },
                    setStatus(a) {
                        eA.status = a
                    },
                    setMessage(a) {
                        eA.message = a
                    },
                    setSession(a) {
                        eA.session = a
                    }
                },
                eR = (0, g.sj)({
                    themeMode: "dark",
                    themeVariables: {}
                }),
                eT = {
                    state: eR,
                    subscribe: a => (0, g.Ld)(eR, () => a(eR)),
                    setThemeMode(a) {
                        eR.themeMode = a
                    },
                    setThemeVariables(a) {
                        eR.themeVariables = { ...eR.themeVariables,
                            ...a
                        }
                    }
                },
                eI = {
                    getWalletImage: a => a ? .image_url ? a ? .image_url : a ? .image_id ? Z.state.walletImages[a.image_id] : void 0,
                    getNetworkImage: a => a ? .imageUrl ? a ? .imageUrl : a ? .imageId ? Z.state.networkImages[a.imageId] : void 0,
                    getConnectorImage: a => a ? .imageUrl ? a.imageUrl : a ? .imageId ? Z.state.connectorImages[a.imageId] : void 0
                }
        },
        9448: function(a, s, p) {
            "use strict";
            p.r(s), p.d(s, {
                W3mModal: function() {
                    return T
                }
            });
            var g = p(51250),
                m = p(742),
                v = p(22555),
                x = p(6591),
                _ = v.iv `
  :host {
    z-index: var(--w3m-z-index);
    display: block;
    backface-visibility: hidden;
    will-change: opacity;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    opacity: 0;
    background-color: var(--wui-cover);
  }

  @keyframes zoom-in {
    0% {
      transform: scale(0.95) translateY(0);
    }
    100% {
      transform: scale(1) translateY(0);
    }
  }

  @keyframes slide-in {
    0% {
      transform: scale(1) translateY(50px);
    }
    100% {
      transform: scale(1) translateY(0);
    }
  }

  wui-card {
    max-width: 360px;
    width: 100%;
    position: relative;
    animation-delay: 0.3s;
    animation-duration: 0.2s;
    animation-name: zoom-in;
    animation-fill-mode: backwards;
    animation-timing-function: var(--wui-ease-out-power-2);
    outline: none;
  }

  wui-flex {
    overflow-x: hidden;
    overflow-y: auto;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  @media (max-height: 700px) and (min-width: 431px) {
    wui-flex {
      align-items: flex-start;
    }

    wui-card {
      margin: var(--wui-spacing-xxl) 0px;
    }
  }

  @media (max-width: 430px) {
    wui-flex {
      align-items: flex-end;
    }

    wui-card {
      max-width: 100%;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      border-bottom: none;
      animation-name: slide-in;
    }
  }
`,
                __decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let E = "scroll-lock",
                T = class extends v.oi {
                    constructor() {
                        super(), this.unsubscribe = [], this.abortController = void 0, this.open = g.IN.state.open, this.initializeTheming(), g.ApiController.prefetch(), this.unsubscribe.push(g.IN.subscribeKey("open", a => a ? this.onOpen() : this.onClose())), g.Xs.sendEvent({
                            type: "track",
                            event: "MODAL_LOADED"
                        })
                    }
                    disconnectedCallback() {
                        this.unsubscribe.forEach(a => a()), this.onRemoveKeyboardListener()
                    }
                    render() {
                        return this.open ? v.dy `
          <wui-flex @click=${this.onOverlayClick.bind(this)}>
            <wui-card role="alertdialog" aria-modal="true" tabindex="0">
              <w3m-header></w3m-header>
              <w3m-router></w3m-router>
              <w3m-snackbar></w3m-snackbar>
            </wui-card>
          </wui-flex>
        ` : null
                    }
                    onOverlayClick(a) {
                        a.target === a.currentTarget && g.IN.close()
                    }
                    initializeTheming() {
                        let {
                            themeVariables: a,
                            themeMode: s
                        } = g.ThemeController.state, p = m.UiHelperUtil.getColorTheme(s);
                        (0, m.initializeTheming)(a, p)
                    }
                    async onClose() {
                        this.onScrollUnlock(), await this.animate([{
                            opacity: 1
                        }, {
                            opacity: 0
                        }], {
                            duration: 200,
                            easing: "ease",
                            fill: "forwards"
                        }).finished, g.SnackController.hide(), this.open = !1, this.onRemoveKeyboardListener()
                    }
                    async onOpen() {
                        this.onScrollLock(), this.open = !0, await this.animate([{
                            opacity: 0
                        }, {
                            opacity: 1
                        }], {
                            duration: 200,
                            easing: "ease",
                            fill: "forwards",
                            delay: 300
                        }).finished, this.onAddKeyboardListener()
                    }
                    onScrollLock() {
                        let a = document.createElement("style");
                        a.dataset.w3m = E, a.textContent = `
      html, body {
        touch-action: none;
        overflow: hidden;
        overscroll-behavior: contain;
      }
      w3m-modal {
        pointer-events: auto;
      }
    `, document.head.appendChild(a)
                    }
                    onScrollUnlock() {
                        let a = document.head.querySelector(`style[data-w3m="${E}"]`);
                        a && a.remove()
                    }
                    onAddKeyboardListener() {
                        this.abortController = new AbortController;
                        let a = this.shadowRoot ? .querySelector("wui-card");
                        a ? .focus(), window.addEventListener("keydown", s => {
                            if ("Escape" === s.key) g.IN.close();
                            else if ("Tab" === s.key) {
                                let {
                                    tagName: p
                                } = s.target;
                                !p || p.includes("W3M-") || p.includes("WUI-") || a ? .focus()
                            }
                        }, this.abortController)
                    }
                    onRemoveKeyboardListener() {
                        this.abortController ? .abort(), this.abortController = void 0
                    }
                };
            T.styles = _, __decorate([(0, x.SB)()], T.prototype, "open", void 0), T = __decorate([(0, m.customElement)("w3m-modal")], T)
        },
        742: function(a, s, p) {
            "use strict";
            let g, m, v;
            p.r(s), p.d(s, {
                TransactionUtil: function() {
                    return rH
                },
                UiHelperUtil: function() {
                    return t_
                },
                WuiAccountButton: function() {
                    return tR
                },
                WuiAllWalletsImage: function() {
                    return tj
                },
                WuiAvatar: function() {
                    return tP
                },
                WuiButton: function() {
                    return tD
                },
                WuiCard: function() {
                    return Z
                },
                WuiCardSelect: function() {
                    return tH
                },
                WuiCardSelectLoader: function() {
                    return tF
                },
                WuiChip: function() {
                    return tZ
                },
                WuiConnectButton: function() {
                    return tV
                },
                WuiCtaButton: function() {
                    return tY
                },
                WuiEmailInput: function() {
                    return t3
                },
                WuiFlex: function() {
                    return tk
                },
                WuiGrid: function() {
                    return rU
                },
                WuiIcon: function() {
                    return e0
                },
                WuiIconBox: function() {
                    return tA
                },
                WuiIconLink: function() {
                    return t6
                },
                WuiImage: function() {
                    return e2
                },
                WuiInputElement: function() {
                    return t9
                },
                WuiInputNumeric: function() {
                    return rt
                },
                WuiInputText: function() {
                    return t2
                },
                WuiLink: function() {
                    return ri
                },
                WuiListItem: function() {
                    return ro
                },
                WuiListWallet: function() {
                    return rg
                },
                WuiLoadingHexagon: function() {
                    return e3
                },
                WuiLoadingSpinner: function() {
                    return e6
                },
                WuiLoadingThumbnail: function() {
                    return e9
                },
                WuiLogo: function() {
                    return rm
                },
                WuiLogoSelect: function() {
                    return rv
                },
                WuiNetworkButton: function() {
                    return rC
                },
                WuiNetworkImage: function() {
                    return tz
                },
                WuiOtp: function() {
                    return r_
                },
                WuiQrCode: function() {
                    return rP
                },
                WuiSearchBar: function() {
                    return rA
                },
                WuiSeparator: function() {
                    return rL
                },
                WuiShimmer: function() {
                    return tt
                },
                WuiSnackbar: function() {
                    return rR
                },
                WuiTabs: function() {
                    return rI
                },
                WuiTag: function() {
                    return rp
                },
                WuiText: function() {
                    return to
                },
                WuiTooltip: function() {
                    return rj
                },
                WuiTransactionListItem: function() {
                    return rc
                },
                WuiTransactionListItemLoader: function() {
                    return rd
                },
                WuiTransactionVisual: function() {
                    return rs
                },
                WuiVisual: function() {
                    return tC
                },
                WuiVisualThumbnail: function() {
                    return rD
                },
                WuiWalletImage: function() {
                    return tI
                },
                customElement: function() {
                    return customElement
                },
                initializeTheming: function() {
                    return initializeTheming
                },
                setColorTheme: function() {
                    return setColorTheme
                },
                setThemeVariables: function() {
                    return setThemeVariables
                }
            });
            var x, _, E = p(22555);

            function initializeTheming(a, s) {
                g = document.createElement("style"), m = document.createElement("style"), v = document.createElement("style"), g.textContent = createRootStyles(a).core.cssText, m.textContent = createRootStyles(a).dark.cssText, v.textContent = createRootStyles(a).light.cssText, document.head.appendChild(g), document.head.appendChild(m), document.head.appendChild(v), setColorTheme(s)
            }

            function setColorTheme(a) {
                m && v && ("light" === a ? (m.removeAttribute("media"), v.media = "enabled") : (v.removeAttribute("media"), m.media = "enabled"))
            }

            function setThemeVariables(a) {
                g && m && v && (g.textContent = createRootStyles(a).core.cssText, m.textContent = createRootStyles(a).dark.cssText, v.textContent = createRootStyles(a).light.cssText)
            }

            function createRootStyles(a) {
                return {
                    core: E.iv `
      :root {
        --w3m-color-mix-strength: ${(0,E.$m)(a?.["--w3m-color-mix-strength"]?`${a["--w3m-color-mix-strength"]}%`:"0%")};
        --w3m-font-family: ${(0,E.$m)(a?.["--w3m-font-family"]||"-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif")};
        --w3m-font-size-master: ${(0,E.$m)(a?.["--w3m-font-size-master"]||"10px")};
        --w3m-border-radius-master: ${(0,E.$m)(a?.["--w3m-border-radius-master"]||"4px")};
        --w3m-z-index: ${(0,E.$m)(a?.["--w3m-z-index"]||100)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-lg: 40px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(0, 0, 0, 0.3);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-015: var(--wui-color-accent-base-015);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-accent-glass-090: var(--wui-accent-glass-base-090);
        --wui-accent-glass-080: var(--wui-accent-glass-base-080);
        --wui-accent-glass-020: var(--wui-accent-glass-base-020);
        --wui-accent-glass-015: var(--wui-accent-glass-base-015);
        --wui-accent-glass-010: var(--wui-accent-glass-base-010);
        --wui-accent-glass-005: var(--wui-accent-glass-base-005);
        --wui-accent-glass-002: var(--wui-accent-glass-base-002);

        --wui-color-fg-100: var(--wui-color-fg-base-100);
        --wui-color-fg-125: var(--wui-color-fg-base-125);
        --wui-color-fg-150: var(--wui-color-fg-base-150);
        --wui-color-fg-175: var(--wui-color-fg-base-175);
        --wui-color-fg-200: var(--wui-color-fg-base-200);
        --wui-color-fg-225: var(--wui-color-fg-base-225);
        --wui-color-fg-250: var(--wui-color-fg-base-250);
        --wui-color-fg-275: var(--wui-color-fg-base-275);
        --wui-color-fg-300: var(--wui-color-fg-base-300);

        --wui-color-bg-100: var(--wui-color-bg-base-100);
        --wui-color-bg-125: var(--wui-color-bg-base-125);
        --wui-color-bg-150: var(--wui-color-bg-base-150);
        --wui-color-bg-175: var(--wui-color-bg-base-175);
        --wui-color-bg-200: var(--wui-color-bg-base-200);
        --wui-color-bg-225: var(--wui-color-bg-base-225);
        --wui-color-bg-250: var(--wui-color-bg-base-250);
        --wui-color-bg-275: var(--wui-color-bg-base-275);
        --wui-color-bg-300: var(--wui-color-bg-base-300);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-error-100: var(--wui-color-error-base-100);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-base-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-box-shadow-blue: rgba(71, 161, 255, 0.16);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 16%, transparent);

          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            var(--w3m-default)
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            var(--w3m-default)
          );

          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );

          --wui-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-base-300)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-base-300)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-base-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );
        }
      }
    `,
                    light: E.iv `
      :root {
        --w3m-color-mix: ${(0,E.$m)(a?.["--w3m-color-mix"]||"#fff")};
        --w3m-accent: ${(0,E.$m)(a?.["--w3m-accent"]||"#47a1ff")};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: #191a1a;

        --wui-color-blue-base-100: #47a1ff;

        --wui-color-accent-base-100: var(--w3m-accent);
        --wui-color-accent-base-090: #59aaff;
        --wui-color-accent-base-080: #6cb4ff;

        --wui-accent-glass-base-090: rgba(71, 161, 255, 0.9);
        --wui-accent-glass-base-080: rgba(71, 161, 255, 0.8);
        --wui-accent-glass-base-020: rgba(71, 161, 255, 0.2);
        --wui-accent-glass-base-015: rgba(71, 161, 255, 0.15);
        --wui-accent-glass-base-010: rgba(71, 161, 255, 0.1);
        --wui-accent-glass-base-005: rgba(71, 161, 255, 0.05);
        --wui-accent-glass-base-002: rgba(71, 161, 255, 0.02);

        --wui-color-fg-base-100: #e4e7e7;
        --wui-color-fg-base-125: #d0d5d5;
        --wui-color-fg-base-150: #a8b1b1;
        --wui-color-fg-base-175: #a8b0b0;
        --wui-color-fg-base-200: #949e9e;
        --wui-color-fg-base-225: #868f8f;
        --wui-color-fg-base-250: #788080;
        --wui-color-fg-base-275: #788181;
        --wui-color-fg-base-300: #6e7777;

        --wui-color-bg-base-100: #141414;
        --wui-color-bg-base-125: #191a1a;
        --wui-color-bg-base-150: #1e1f1f;
        --wui-color-bg-base-175: #222525;
        --wui-color-bg-base-200: #272a2a;
        --wui-color-bg-base-225: #2c3030;
        --wui-color-bg-base-250: #313535;
        --wui-color-bg-base-275: #363b3b;
        --wui-color-bg-base-300: #3b4040;

        --wui-color-success-base-100: #26d962;
        --wui-color-error-base-100: #f25a67;

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-base-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-gray-glass-080: rgba(255, 255, 255, 0.8);
      }
    `,
                    dark: E.iv `
      :root {
        --w3m-color-mix: ${(0,E.$m)(a?.["--w3m-color-mix"]||"#000")};
        --w3m-accent: ${(0,E.$m)(a?.["--w3m-accent"]||"#3396ff")};
        --w3m-default: #000;

        --wui-color-modal-bg-base: #fff;

        --wui-color-blue-base-100: #3396ff;

        --wui-color-accent-base-100: var(--w3m-accent);
        --wui-color-accent-base-090: #2d7dd2;
        --wui-color-accent-base-080: #2978cc;

        --wui-accent-glass-base-090: rgba(51, 150, 255, 0.9);
        --wui-accent-glass-base-080: rgba(51, 150, 255, 0.8);
        --wui-accent-glass-base-020: rgba(51, 150, 255, 0.2);
        --wui-accent-glass-base-015: rgba(51, 150, 255, 0.15);
        --wui-accent-glass-base-010: rgba(51, 150, 255, 0.1);
        --wui-accent-glass-base-005: rgba(51, 150, 255, 0.05);
        --wui-accent-glass-base-002: rgba(51, 150, 255, 0.02);

        --wui-color-fg-base-100: #141414;
        --wui-color-fg-base-125: #2d3131;
        --wui-color-fg-base-150: #474d4d;
        --wui-color-fg-base-175: #636d6d;
        --wui-color-fg-base-200: #798686;
        --wui-color-fg-base-225: #828f8f;
        --wui-color-fg-base-250: #8b9797;
        --wui-color-fg-base-275: #95a0a0;
        --wui-color-fg-base-300: #9ea9a9;

        --wui-color-bg-base-100: #ffffff;
        --wui-color-bg-base-125: #f5fafa;
        --wui-color-bg-base-150: #f3f8f8;
        --wui-color-bg-base-175: #eef4f4;
        --wui-color-bg-base-200: #eaf1f1;
        --wui-color-bg-base-225: #e5eded;
        --wui-color-bg-base-250: #e1e9e9;
        --wui-color-bg-base-275: #dce7e7;
        --wui-color-bg-base-300: #d8e3e3;

        --wui-color-success-base-100: #26b562;
        --wui-color-error-base-100: #f05142;

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-base-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-gray-glass-080: rgba(0, 0, 0, 0.8);
      }
    `
                }
            }
            let T = E.iv `
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`,
                F = E.iv `
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition: all var(--wui-ease-out-power-1) var(--wui-duration-lg);
    outline: none;
    border: 1px solid transparent;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-gray-glass-005);
    }

    button:active:enabled {
      transition: all var(--wui-ease-out-power-2) var(--wui-duration-sm);
      background-color: var(--wui-gray-glass-010);
    }

    button[data-variant='fill']:hover:enabled {
      background-color: var(--wui-color-accent-090);
    }

    button[data-variant='accentBg']:hover:enabled {
      background: var(--wui-accent-glass-015);
    }

    button[data-variant='accentBg']:active:enabled {
      background: var(--wui-accent-glass-020);
    }
  }

  button:disabled {
    cursor: not-allowed;
    background-color: var(--wui-gray-glass-005);
  }

  button[data-variant='shade']:disabled,
  button[data-variant='accent']:disabled,
  button[data-variant='accentBg']:disabled {
    background-color: var(--wui-gray-glass-010);
    color: var(--wui-gray-glass-015);
    filter: grayscale(1);
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-icon-box,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  button:focus-visible,
  a:focus-visible {
    border: 1px solid var(--wui-color-accent-100);
    background-color: var(--wui-gray-glass-005);
    -webkit-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    -moz-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
  }

  button[data-variant='fill']:focus-visible {
    background-color: var(--wui-color-accent-090);
  }

  button[data-variant='fill'] {
    color: var(--wui-color-inverse-100);
    background-color: var(--wui-color-accent-100);
  }

  button[data-variant='fill']:disabled {
    color: var(--wui-gray-glass-015);
    background-color: var(--wui-gray-glass-015);
  }

  button[data-variant='fill']:disabled > wui-icon {
    color: var(--wui-gray-glass-015);
  }

  button[data-variant='shade'] {
    color: var(--wui-color-fg-200);
  }

  button[data-variant='accent'],
  button[data-variant='accentBg'] {
    color: var(--wui-color-accent-100);
  }

  button[data-variant='accentBg'] {
    background: var(--wui-accent-glass-010);
    border: 1px solid var(--wui-accent-glass-010);
  }

  button[data-variant='fullWidth'] {
    width: 100%;
    border-radius: var(--wui-border-radius-xs);
    height: 56px;
    border: none;
    background-color: var(--wui-gray-glass-002);
    color: var(--wui-color-fg-200);
    gap: var(--wui-spacing-xs);
  }

  button:active:enabled {
    background-color: var(--wui-gray-glass-010);
  }

  button[data-variant='fill']:active:enabled {
    background-color: var(--wui-color-accent-080);
    border: 1px solid var(--wui-gray-glass-010);
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`,
                W = E.iv `
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }
`;

            function customElement(a) {
                return function(s) {
                    return "function" == typeof s ? (customElements.get(a) || customElements.define(a, s), s) : function(a, s) {
                        let {
                            kind: p,
                            elements: g
                        } = s;
                        return {
                            kind: p,
                            elements: g,
                            finisher(s) {
                                customElements.get(a) || customElements.define(a, s)
                            }
                        }
                    }(a, s)
                }
            }
            var z = E.iv `
  :host {
    display: block;
    border-radius: clamp(0px, var(--wui-border-radius-l), 44px);
    border: 1px solid var(--wui-gray-glass-005);
    background-color: var(--wui-color-modal-bg);
    overflow: hidden;
  }
`;
            let Z = class extends E.oi {
                render() {
                    return E.dy `<slot></slot>`
                }
            };
            Z.styles = [T, z], Z = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([customElement("wui-card")], Z);
            var Q = p(6591),
                Y = E.iv `
  :host {
    display: flex;
    aspect-ratio: 1 / 1;
    color: var(--local-color);
    width: var(--local-width);
  }

  svg {
    width: inherit;
    height: inherit;
    object-fit: contain;
    object-position: center;
  }
`;
            let X = E.YP `<svg fill="none" viewBox="0 0 24 24">
  <path
    style="fill: var(--wui-color-accent-100);"
    d="M10.2 6.6a3.6 3.6 0 1 1-7.2 0 3.6 3.6 0 0 1 7.2 0ZM21 6.6a3.6 3.6 0 1 1-7.2 0 3.6 3.6 0 0 1 7.2 0ZM10.2 17.4a3.6 3.6 0 1 1-7.2 0 3.6 3.6 0 0 1 7.2 0ZM21 17.4a3.6 3.6 0 1 1-7.2 0 3.6 3.6 0 0 1 7.2 0Z"
  />
</svg>`,
                J = E.YP `
<svg width="36" height="36">
  <path
    d="M28.724 0H7.271A7.269 7.269 0 0 0 0 7.272v21.46A7.268 7.268 0 0 0 7.271 36H28.73A7.272 7.272 0 0 0 36 28.728V7.272A7.275 7.275 0 0 0 28.724 0Z"
    fill="url(#a)"
  />
  <path
    d="m17.845 8.271.729-1.26a1.64 1.64 0 1 1 2.843 1.638l-7.023 12.159h5.08c1.646 0 2.569 1.935 1.853 3.276H6.434a1.632 1.632 0 0 1-1.638-1.638c0-.909.73-1.638 1.638-1.638h4.176l5.345-9.265-1.67-2.898a1.642 1.642 0 0 1 2.844-1.638l.716 1.264Zm-6.317 17.5-1.575 2.732a1.64 1.64 0 1 1-2.844-1.638l1.17-2.025c1.323-.41 2.398-.095 3.249.931Zm13.56-4.954h4.262c.909 0 1.638.729 1.638 1.638 0 .909-.73 1.638-1.638 1.638h-2.367l1.597 2.772c.45.788.185 1.782-.602 2.241a1.642 1.642 0 0 1-2.241-.603c-2.69-4.666-4.711-8.159-6.052-10.485-1.372-2.367-.391-4.743.576-5.549 1.075 1.846 2.682 4.631 4.828 8.348Z"
    fill="#fff"
  />
  <defs>
    <linearGradient id="a" x1="18" y1="0" x2="18" y2="36" gradientUnits="userSpaceOnUse">
      <stop stop-color="#18BFFB" />
      <stop offset="1" stop-color="#2072F3" />
    </linearGradient>
  </defs>
</svg>`,
                ei = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#000" />
      <g clip-path="url(#c)">
        <path
          fill="#fff"
          d="M28.77 23.3c-.69 1.99-2.75 5.52-4.87 5.56-1.4.03-1.86-.84-3.46-.84-1.61 0-2.12.81-3.45.86-2.25.1-5.72-5.1-5.72-9.62 0-4.15 2.9-6.2 5.42-6.25 1.36-.02 2.64.92 3.47.92.83 0 2.38-1.13 4.02-.97.68.03 2.6.28 3.84 2.08-3.27 2.14-2.76 6.61.75 8.25ZM24.2 7.88c-2.47.1-4.49 2.69-4.2 4.84 2.28.17 4.47-2.39 4.2-4.84Z"
        />
      </g>
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
    <clipPath id="c"><path fill="#fff" d="M8 7.89h24v24H8z" /></clipPath>
  </defs>
</svg>`,
                en = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M7 1.99a1 1 0 0 1 1 1v7.58l2.46-2.46a1 1 0 0 1 1.41 1.42L7.7 13.69a1 1 0 0 1-1.41 0L2.12 9.53A1 1 0 0 1 3.54 8.1L6 10.57V3a1 1 0 0 1 1-1Z"
    clip-rule="evenodd"
  />
</svg>`,
                eo = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M13 7.99a1 1 0 0 1-1 1H4.4l2.46 2.46a1 1 0 1 1-1.41 1.41L1.29 8.7a1 1 0 0 1 0-1.41L5.46 3.1a1 1 0 0 1 1.41 1.42L4.41 6.99H12a1 1 0 0 1 1 1Z"
    clip-rule="evenodd"
  />
</svg>`,
                ea = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M1 7.99a1 1 0 0 1 1-1h7.58L7.12 4.53A1 1 0 1 1 8.54 3.1l4.16 4.17a1 1 0 0 1 0 1.41l-4.16 4.17a1 1 0 1 1-1.42-1.41l2.46-2.46H2a1 1 0 0 1-1-1Z"
    clip-rule="evenodd"
  />
</svg>`,
                es = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M7 13.99a1 1 0 0 1-1-1V5.4L3.54 7.86a1 1 0 0 1-1.42-1.41L6.3 2.28a1 1 0 0 1 1.41 0l4.17 4.17a1 1 0 1 1-1.41 1.41L8 5.4v7.59a1 1 0 0 1-1 1Z"
    clip-rule="evenodd"
  />
</svg>`,
                el = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M4 6.4a1 1 0 0 1-.46.89 6.98 6.98 0 0 0 .38 6.18A7 7 0 0 0 16.46 7.3a1 1 0 0 1-.47-.92 7 7 0 0 0-12 .03Zm-2.02-.5a9 9 0 1 1 16.03 8.2A9 9 0 0 1 1.98 5.9Z"
    clip-rule="evenodd"
  />
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M6.03 8.63c-1.46-.3-2.72-.75-3.6-1.35l-.02-.01-.14-.11a1 1 0 0 1 1.2-1.6l.1.08c.6.4 1.52.74 2.69 1 .16-.99.39-1.88.67-2.65.3-.79.68-1.5 1.15-2.02A2.58 2.58 0 0 1 9.99 1c.8 0 1.45.44 1.92.97.47.52.84 1.23 1.14 2.02.29.77.52 1.66.68 2.64a8 8 0 0 0 2.7-1l.26-.18h.48a1 1 0 0 1 .12 2c-.86.51-2.01.91-3.34 1.18a22.24 22.24 0 0 1-.03 3.19c1.45.29 2.7.73 3.58 1.31a1 1 0 0 1-1.1 1.68c-.6-.4-1.56-.76-2.75-1-.15.8-.36 1.55-.6 2.2-.3.79-.67 1.5-1.14 2.02-.47.53-1.12.97-1.92.97-.8 0-1.45-.44-1.91-.97a6.51 6.51 0 0 1-1.15-2.02c-.24-.65-.44-1.4-.6-2.2-1.18.24-2.13.6-2.73.99a1 1 0 1 1-1.1-1.67c.88-.58 2.12-1.03 3.57-1.31a22.03 22.03 0 0 1-.04-3.2Zm2.2-1.7c.15-.86.34-1.61.58-2.24.24-.65.51-1.12.76-1.4.25-.28.4-.29.42-.29.03 0 .17.01.42.3.25.27.52.74.77 1.4.23.62.43 1.37.57 2.22a19.96 19.96 0 0 1-3.52 0Zm-.18 4.6a20.1 20.1 0 0 1-.03-2.62 21.95 21.95 0 0 0 3.94 0 20.4 20.4 0 0 1-.03 2.63 21.97 21.97 0 0 0-3.88 0Zm.27 2c.13.66.3 1.26.49 1.78.24.65.51 1.12.76 1.4.25.28.4.29.42.29.03 0 .17-.01.42-.3.25-.27.52-.74.77-1.4.19-.5.36-1.1.49-1.78a20.03 20.03 0 0 0-3.35 0Z"
    clip-rule="evenodd"
  />
</svg>`,
                ec = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M12.04 2.65c.47.3.6.91.3 1.38l-5.78 9a1 1 0 0 1-1.61.1L1.73 9.27A1 1 0 1 1 3.27 8L5.6 10.8l5.05-7.85a1 1 0 0 1 1.38-.3Z"
    clip-rule="evenodd"
  />
</svg>`,
                eu = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M1.46 4.96a1 1 0 0 1 1.41 0L8 10.09l5.13-5.13a1 1 0 1 1 1.41 1.41l-5.83 5.84a1 1 0 0 1-1.42 0L1.46 6.37a1 1 0 0 1 0-1.41Z"
    clip-rule="evenodd"
  />
</svg>`,
                ed = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M11.04 1.46a1 1 0 0 1 0 1.41L5.91 8l5.13 5.13a1 1 0 1 1-1.41 1.41L3.79 8.71a1 1 0 0 1 0-1.42l5.84-5.83a1 1 0 0 1 1.41 0Z"
    clip-rule="evenodd"
  />
</svg>`,
                eh = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M4.96 14.54a1 1 0 0 1 0-1.41L10.09 8 4.96 2.87a1 1 0 0 1 1.41-1.41l5.84 5.83a1 1 0 0 1 0 1.42l-5.84 5.83a1 1 0 0 1-1.41 0Z"
    clip-rule="evenodd"
  />
</svg>`,
                ep = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M14.54 11.04a1 1 0 0 1-1.41 0L8 5.92l-5.13 5.12a1 1 0 1 1-1.41-1.41l5.83-5.84a1 1 0 0 1 1.42 0l5.83 5.84a1 1 0 0 1 0 1.41Z"
    clip-rule="evenodd"
  />
</svg>`,
                ef = E.YP `<svg width="36" height="36" fill="none">
  <path
    fill="#fff"
    fill-opacity=".05"
    d="M0 14.94c0-5.55 0-8.326 1.182-10.4a9 9 0 0 1 3.359-3.358C6.614 0 9.389 0 14.94 0h6.12c5.55 0 8.326 0 10.4 1.182a9 9 0 0 1 3.358 3.359C36 6.614 36 9.389 36 14.94v6.12c0 5.55 0 8.326-1.182 10.4a9 9 0 0 1-3.359 3.358C29.386 36 26.611 36 21.06 36h-6.12c-5.55 0-8.326 0-10.4-1.182a9 9 0 0 1-3.358-3.359C0 29.386 0 26.611 0 21.06v-6.12Z"
  />
  <path
    stroke="#fff"
    stroke-opacity=".05"
    d="M14.94.5h6.12c2.785 0 4.84 0 6.46.146 1.612.144 2.743.43 3.691.97a8.5 8.5 0 0 1 3.172 3.173c.541.948.826 2.08.971 3.692.145 1.62.146 3.675.146 6.459v6.12c0 2.785 0 4.84-.146 6.46-.145 1.612-.43 2.743-.97 3.691a8.5 8.5 0 0 1-3.173 3.172c-.948.541-2.08.826-3.692.971-1.62.145-3.674.146-6.459.146h-6.12c-2.784 0-4.84 0-6.46-.146-1.612-.145-2.743-.43-3.691-.97a8.5 8.5 0 0 1-3.172-3.173c-.541-.948-.827-2.08-.971-3.692C.5 25.9.5 23.845.5 21.06v-6.12c0-2.784 0-4.84.146-6.46.144-1.612.43-2.743.97-3.691A8.5 8.5 0 0 1 4.79 1.617C5.737 1.076 6.869.79 8.48.646 10.1.5 12.156.5 14.94.5Z"
  />
  <path
    fill="url(#a)"
    d="M17.998 10.8h12.469a14.397 14.397 0 0 0-24.938.001l6.234 10.798.006-.001a7.19 7.19 0 0 1 6.23-10.799Z"
  />
  <path
    fill="url(#b)"
    d="m24.237 21.598-6.234 10.798A14.397 14.397 0 0 0 30.47 10.798H18.002l-.002.006a7.191 7.191 0 0 1 6.237 10.794Z"
  />
  <path
    fill="url(#c)"
    d="M11.765 21.601 5.531 10.803A14.396 14.396 0 0 0 18.001 32.4l6.235-10.798-.004-.004a7.19 7.19 0 0 1-12.466.004Z"
  />
  <path fill="#fff" d="M18 25.2a7.2 7.2 0 1 0 0-14.4 7.2 7.2 0 0 0 0 14.4Z" />
  <path fill="#1A73E8" d="M18 23.7a5.7 5.7 0 1 0 0-11.4 5.7 5.7 0 0 0 0 11.4Z" />
  <defs>
    <linearGradient
      id="a"
      x1="6.294"
      x2="41.1"
      y1="5.995"
      y2="5.995"
      gradientUnits="userSpaceOnUse"
    >
      <stop stop-color="#D93025" />
      <stop offset="1" stop-color="#EA4335" />
    </linearGradient>
    <linearGradient
      id="b"
      x1="20.953"
      x2="37.194"
      y1="32.143"
      y2="2.701"
      gradientUnits="userSpaceOnUse"
    >
      <stop stop-color="#FCC934" />
      <stop offset="1" stop-color="#FBBC04" />
    </linearGradient>
    <linearGradient
      id="c"
      x1="25.873"
      x2="9.632"
      y1="31.2"
      y2="1.759"
      gradientUnits="userSpaceOnUse"
    >
      <stop stop-color="#1E8E3E" />
      <stop offset="1" stop-color="#34A853" />
    </linearGradient>
  </defs>
</svg>`,
                eg = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M7 2.99a5 5 0 1 0 0 10 5 5 0 0 0 0-10Zm-7 5a7 7 0 1 1 14 0 7 7 0 0 1-14 0Zm7-4a1 1 0 0 1 1 1v2.58l1.85 1.85a1 1 0 0 1-1.41 1.42L6.29 8.69A1 1 0 0 1 6 8v-3a1 1 0 0 1 1-1Z"
    clip-rule="evenodd"
  />
</svg>`,
                ew = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M2.54 2.54a1 1 0 0 1 1.42 0L8 6.6l4.04-4.05a1 1 0 1 1 1.42 1.42L9.4 8l4.05 4.04a1 1 0 0 1-1.42 1.42L8 9.4l-4.04 4.05a1 1 0 0 1-1.42-1.42L6.6 8 2.54 3.96a1 1 0 0 1 0-1.42Z"
    clip-rule="evenodd"
  />
</svg>`,
                em = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M10 3a7 7 0 0 0-6.85 8.44l8.29-8.3C10.97 3.06 10.49 3 10 3Zm3.49.93-9.56 9.56c.32.55.71 1.06 1.16 1.5L15 5.1a7.03 7.03 0 0 0-1.5-1.16Zm2.7 2.8-9.46 9.46a7 7 0 0 0 9.46-9.46ZM1.99 5.9A9 9 0 1 1 18 14.09 9 9 0 0 1 1.98 5.91Z"
    clip-rule="evenodd"
  />
</svg>`,
                eb = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M8 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm10.66-2.65a1 1 0 0 1 .23 1.06L9.83 9.24a1 1 0 0 1-.59.58l-2.83 1.06A1 1 0 0 1 5.13 9.6l1.06-2.82a1 1 0 0 1 .58-.59L9.6 5.12a1 1 0 0 1 1.06.23ZM7.9 7.89l-.13.35.35-.13.12-.35-.34.13Z"
    clip-rule="evenodd"
  />
</svg>`,
                ev = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M9.5 0h1.67c.68 0 1.26 0 1.73.04.5.05.97.14 1.42.4.52.3.95.72 1.24 1.24.26.45.35.92.4 1.42.04.47.04 1.05.04 1.73V6.5c0 .69 0 1.26-.04 1.74-.05.5-.14.97-.4 1.41-.3.52-.72.95-1.24 1.25-.45.25-.92.35-1.42.4-.43.03-.95.03-1.57.03 0 .62 0 1.14-.04 1.57-.04.5-.14.97-.4 1.42-.29.52-.72.95-1.24 1.24-.44.26-.92.35-1.41.4-.48.04-1.05.04-1.74.04H4.83c-.68 0-1.26 0-1.73-.04-.5-.05-.97-.14-1.42-.4-.52-.3-.95-.72-1.24-1.24a3.39 3.39 0 0 1-.4-1.42A20.9 20.9 0 0 1 0 11.17V9.5c0-.69 0-1.26.04-1.74.05-.5.14-.97.4-1.41.3-.52.72-.95 1.24-1.25.45-.25.92-.35 1.42-.4.43-.03.95-.03 1.57-.03 0-.62 0-1.14.04-1.57.04-.5.14-.97.4-1.42.29-.52.72-.95 1.24-1.24.44-.26.92-.35 1.41-.4A20.9 20.9 0 0 1 9.5 0ZM4.67 6.67c-.63 0-1.06 0-1.4.03-.35.03-.5.09-.6.14-.2.12-.38.3-.5.5-.05.1-.1.24-.14.6C2 8.32 2 8.8 2 9.54v1.59c0 .73 0 1.22.03 1.6.04.35.1.5.15.6.11.2.29.38.5.5.09.05.24.1.6.14.37.03.86.03 1.6.03h1.58c.74 0 1.22 0 1.6-.03.36-.04.5-.1.6-.15.2-.11.38-.29.5-.5.05-.09.1-.24.14-.6.03-.33.03-.76.03-1.39-.6 0-1.13 0-1.57-.04-.5-.04-.97-.14-1.41-.4-.52-.29-.95-.72-1.25-1.24a3.39 3.39 0 0 1-.4-1.41c-.03-.44-.03-.96-.03-1.57Zm3.27-4.64c-.36.04-.5.1-.6.15-.2.11-.38.29-.5.5-.05.09-.1.24-.14.6-.03.37-.03.86-.03 1.6v1.58c0 .74 0 1.22.03 1.6.03.36.09.5.14.6.12.2.3.38.5.5.1.05.24.1.6.14.38.03.86.03 1.6.03h1.59c.73 0 1.22 0 1.6-.03.35-.03.5-.09.6-.14.2-.12.38-.3.5-.5.05-.1.1-.24.14-.6.03-.38.03-.86.03-1.6V4.87c0-.73 0-1.22-.03-1.6a1.46 1.46 0 0 0-.15-.6c-.11-.2-.29-.38-.5-.5-.09-.05-.24-.1-.6-.14-.37-.03-.86-.03-1.6-.03H9.55c-.74 0-1.22 0-1.6.03Z"
    clip-rule="evenodd"
  />
</svg>`,
                ey = E.YP ` <svg fill="none" viewBox="0 0 13 4">
  <path fill="currentColor" d="M.5 0h12L8.9 3.13a3.76 3.76 0 0 1-4.8 0L.5 0Z" />
</svg>`,
                eC = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M13.66 2H6.34c-1.07 0-1.96 0-2.68.08-.74.08-1.42.25-2.01.68a4 4 0 0 0-.89.89c-.43.6-.6 1.27-.68 2.01C0 6.38 0 7.26 0 8.34v.89c0 1.07 0 1.96.08 2.68.08.74.25 1.42.68 2.01a4 4 0 0 0 .89.89c.6.43 1.27.6 2.01.68a27 27 0 0 0 2.68.08h7.32a27 27 0 0 0 2.68-.08 4.03 4.03 0 0 0 2.01-.68 4 4 0 0 0 .89-.89c.43-.6.6-1.27.68-2.01.08-.72.08-1.6.08-2.68v-.89c0-1.07 0-1.96-.08-2.68a4.04 4.04 0 0 0-.68-2.01 4 4 0 0 0-.89-.89c-.6-.43-1.27-.6-2.01-.68C15.62 2 14.74 2 13.66 2ZM2.82 4.38c.2-.14.48-.25 1.06-.31C4.48 4 5.25 4 6.4 4h7.2c1.15 0 1.93 0 2.52.07.58.06.86.17 1.06.31a2 2 0 0 1 .44.44c.14.2.25.48.31 1.06.07.6.07 1.37.07 2.52v.77c0 1.15 0 1.93-.07 2.52-.06.58-.17.86-.31 1.06a2 2 0 0 1-.44.44c-.2.14-.48.25-1.06.32-.6.06-1.37.06-2.52.06H6.4c-1.15 0-1.93 0-2.52-.06-.58-.07-.86-.18-1.06-.32a2 2 0 0 1-.44-.44c-.14-.2-.25-.48-.31-1.06C2 11.1 2 10.32 2 9.17V8.4c0-1.15 0-1.93.07-2.52.06-.58.17-.86.31-1.06a2 2 0 0 1 .44-.44Z"
    clip-rule="evenodd"
  />
  <path fill="currentColor" d="M6.14 17.57a1 1 0 1 0 0 2h7.72a1 1 0 1 0 0-2H6.14Z" />
</svg>`,
                ex = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M6.07 1h.57a1 1 0 0 1 0 2h-.52c-.98 0-1.64 0-2.14.06-.48.05-.7.14-.84.24-.13.1-.25.22-.34.35-.1.14-.2.35-.25.83-.05.5-.05 1.16-.05 2.15v2.74c0 .99 0 1.65.05 2.15.05.48.14.7.25.83.1.14.2.25.34.35.14.1.36.2.84.25.5.05 1.16.05 2.14.05h.52a1 1 0 0 1 0 2h-.57c-.92 0-1.69 0-2.3-.07a3.6 3.6 0 0 1-1.8-.61c-.3-.22-.57-.49-.8-.8a3.6 3.6 0 0 1-.6-1.79C.5 11.11.5 10.35.5 9.43V6.58c0-.92 0-1.7.06-2.31a3.6 3.6 0 0 1 .62-1.8c.22-.3.48-.57.79-.79a3.6 3.6 0 0 1 1.8-.61C4.37 1 5.14 1 6.06 1ZM9.5 3a1 1 0 0 1 1.42 0l4.28 4.3a1 1 0 0 1 0 1.4L10.93 13a1 1 0 0 1-1.42-1.42L12.1 9H6.8a1 1 0 1 1 0-2h5.3L9.51 4.42a1 1 0 0 1 0-1.41Z"
    clip-rule="evenodd"
  />
</svg>`,
                e_ = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#5865F2" />
      <path
        fill="#fff"
        fill-rule="evenodd"
        d="M25.71 28.15C30.25 28 32 25.02 32 25.02c0-6.61-2.96-11.98-2.96-11.98-2.96-2.22-5.77-2.15-5.77-2.15l-.29.32c3.5 1.07 5.12 2.61 5.12 2.61a16.75 16.75 0 0 0-10.34-1.93l-.35.04a15.43 15.43 0 0 0-5.88 1.9s1.71-1.63 5.4-2.7l-.2-.24s-2.81-.07-5.77 2.15c0 0-2.96 5.37-2.96 11.98 0 0 1.73 2.98 6.27 3.13l1.37-1.7c-2.6-.79-3.6-2.43-3.6-2.43l.58.35.09.06.08.04.02.01.08.05a17.25 17.25 0 0 0 4.52 1.58 14.4 14.4 0 0 0 8.3-.86c.72-.27 1.52-.66 2.37-1.21 0 0-1.03 1.68-3.72 2.44.61.78 1.35 1.67 1.35 1.67Zm-9.55-9.6c-1.17 0-2.1 1.03-2.1 2.28 0 1.25.95 2.28 2.1 2.28 1.17 0 2.1-1.03 2.1-2.28.01-1.25-.93-2.28-2.1-2.28Zm7.5 0c-1.17 0-2.1 1.03-2.1 2.28 0 1.25.95 2.28 2.1 2.28 1.17 0 2.1-1.03 2.1-2.28 0-1.25-.93-2.28-2.1-2.28Z"
        clip-rule="evenodd"
      />
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
  </defs>
</svg>`,
                eE = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    d="M4.25 7a.63.63 0 0 0-.63.63v3.97c0 .28-.2.51-.47.54l-.75.07a.93.93 0 0 1-.9-.47A7.51 7.51 0 0 1 5.54.92a7.5 7.5 0 0 1 9.54 4.62c.12.35.06.72-.16 1-.74.97-1.68 1.78-2.6 2.44V4.44a.64.64 0 0 0-.63-.64h-1.06c-.35 0-.63.3-.63.64v5.5c0 .23-.12.42-.32.5l-.52.23V6.05c0-.36-.3-.64-.64-.64H7.45c-.35 0-.64.3-.64.64v4.97c0 .25-.17.46-.4.52a5.8 5.8 0 0 0-.45.11v-4c0-.36-.3-.65-.64-.65H4.25ZM14.07 12.4A7.49 7.49 0 0 1 3.6 14.08c4.09-.58 9.14-2.5 11.87-6.6v.03a7.56 7.56 0 0 1-1.41 4.91Z"
  />
</svg>`,
                ek = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M6.71 2.99a.57.57 0 0 0-.57.57 1 1 0 0 1-1 1c-.58 0-.96 0-1.24.03-.27.03-.37.07-.42.1a.97.97 0 0 0-.36.35c-.04.08-.09.21-.11.67a2.57 2.57 0 0 1 0 5.13c.02.45.07.6.11.66.09.15.21.28.36.36.07.04.21.1.67.12a2.57 2.57 0 0 1 5.12 0c.46-.03.6-.08.67-.12a.97.97 0 0 0 .36-.36c.03-.04.07-.14.1-.41.02-.29.03-.66.03-1.24a1 1 0 0 1 1-1 .57.57 0 0 0 0-1.15 1 1 0 0 1-1-1c0-.58 0-.95-.03-1.24a1.04 1.04 0 0 0-.1-.42.97.97 0 0 0-.36-.36 1.04 1.04 0 0 0-.42-.1c-.28-.02-.65-.02-1.24-.02a1 1 0 0 1-1-1 .57.57 0 0 0-.57-.57ZM5.15 13.98a1 1 0 0 0 .99-1v-.78a.57.57 0 0 1 1.14 0v.78a1 1 0 0 0 .99 1H8.36a66.26 66.26 0 0 0 .73 0 3.78 3.78 0 0 0 1.84-.38c.46-.26.85-.64 1.1-1.1.23-.4.32-.8.36-1.22.02-.2.03-.4.03-.63a2.57 2.57 0 0 0 0-4.75c0-.23-.01-.44-.03-.63a2.96 2.96 0 0 0-.35-1.22 2.97 2.97 0 0 0-1.1-1.1c-.4-.22-.8-.31-1.22-.35a8.7 8.7 0 0 0-.64-.04 2.57 2.57 0 0 0-4.74 0c-.23 0-.44.02-.63.04-.42.04-.83.13-1.22.35-.46.26-.84.64-1.1 1.1-.33.57-.37 1.2-.39 1.84a21.39 21.39 0 0 0 0 .72v.1a1 1 0 0 0 1 .99h.78a.57.57 0 0 1 0 1.15h-.77a1 1 0 0 0-1 .98v.1a63.87 63.87 0 0 0 0 .73c0 .64.05 1.27.38 1.83.26.47.64.85 1.1 1.11.56.32 1.2.37 1.84.38a20.93 20.93 0 0 0 .72 0h.1Z"
    clip-rule="evenodd"
  />
</svg>`,
                e$ = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M3.74 3.99a1 1 0 0 1 1-1H11a1 1 0 0 1 1 1v6.26a1 1 0 0 1-2 0V6.4l-6.3 6.3a1 1 0 0 1-1.4-1.42l6.29-6.3H4.74a1 1 0 0 1-1-1Z"
    clip-rule="evenodd"
  />
</svg>`,
                eP = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#1877F2" />
      <g clip-path="url(#c)">
        <path
          fill="#fff"
          d="M26 12.38h-2.89c-.92 0-1.61.38-1.61 1.34v1.66H26l-.36 4.5H21.5v12H17v-12h-3v-4.5h3V12.5c0-3.03 1.6-4.62 5.2-4.62H26v4.5Z"
        />
      </g>
    </g>
    <path
      fill="#1877F2"
      d="M40 20a20 20 0 1 0-23.13 19.76V25.78H11.8V20h5.07v-4.4c0-5.02 3-7.79 7.56-7.79 2.19 0 4.48.4 4.48.4v4.91h-2.53c-2.48 0-3.25 1.55-3.25 3.13V20h5.54l-.88 5.78h-4.66v13.98A20 20 0 0 0 40 20Z"
    />
    <path
      fill="#fff"
      d="m27.79 25.78.88-5.78h-5.55v-3.75c0-1.58.78-3.13 3.26-3.13h2.53V8.2s-2.3-.39-4.48-.39c-4.57 0-7.55 2.77-7.55 7.78V20H11.8v5.78h5.07v13.98a20.15 20.15 0 0 0 6.25 0V25.78h4.67Z"
    />
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
    <clipPath id="c"><path fill="#fff" d="M8 7.89h24v24H8z" /></clipPath>
  </defs>
</svg>`,
                eS = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M0 3a1 1 0 0 1 1-1h14a1 1 0 1 1 0 2H1a1 1 0 0 1-1-1Zm2.63 5.25a1 1 0 0 1 1-1h8.75a1 1 0 1 1 0 2H3.63a1 1 0 0 1-1-1Zm2.62 5.25a1 1 0 0 1 1-1h3.5a1 1 0 0 1 0 2h-3.5a1 1 0 0 1-1-1Z"
    clip-rule="evenodd"
  />
</svg>`,
                eA = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#1B1F23" />
      <g clip-path="url(#c)">
        <path
          fill="#fff"
          d="M8 19.89a12 12 0 1 1 15.8 11.38c-.6.12-.8-.26-.8-.57v-3.3c0-1.12-.4-1.85-.82-2.22 2.67-.3 5.48-1.31 5.48-5.92 0-1.31-.47-2.38-1.24-3.22.13-.3.54-1.52-.12-3.18 0 0-1-.32-3.3 1.23a11.54 11.54 0 0 0-6 0c-2.3-1.55-3.3-1.23-3.3-1.23a4.32 4.32 0 0 0-.12 3.18 4.64 4.64 0 0 0-1.24 3.22c0 4.6 2.8 5.63 5.47 5.93-.34.3-.65.83-.76 1.6-.69.31-2.42.84-3.5-1 0 0-.63-1.15-1.83-1.23 0 0-1.18-.02-.09.73 0 0 .8.37 1.34 1.76 0 0 .7 2.14 4.03 1.41v2.24c0 .31-.2.68-.8.57A12 12 0 0 1 8 19.9Z"
        />
      </g>
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
    <clipPath id="c"><path fill="#fff" d="M8 7.89h24v24H8z" /></clipPath>
  </defs>
</svg>`,
                eO = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#fff" fill-opacity=".05" />
      <g clip-path="url(#c)">
        <path
          fill="#4285F4"
          d="M20 17.7v4.65h6.46a5.53 5.53 0 0 1-2.41 3.61l3.9 3.02c2.26-2.09 3.57-5.17 3.57-8.82 0-.85-.08-1.67-.22-2.46H20Z"
        />
        <path
          fill="#34A853"
          d="m13.27 22.17-.87.67-3.11 2.42A12 12 0 0 0 20 31.9c3.24 0 5.96-1.07 7.94-2.9l-3.9-3.03A7.15 7.15 0 0 1 20 27.12a7.16 7.16 0 0 1-6.72-4.94v-.01Z"
        />
        <path
          fill="#FBBC05"
          d="M9.29 14.5a11.85 11.85 0 0 0 0 10.76l3.99-3.1a7.19 7.19 0 0 1 0-4.55l-4-3.1Z"
        />
        <path
          fill="#EA4335"
          d="M20 12.66c1.77 0 3.34.61 4.6 1.8l3.43-3.44A11.51 11.51 0 0 0 20 7.89c-4.7 0-8.74 2.69-10.71 6.62l3.99 3.1A7.16 7.16 0 0 1 20 12.66Z"
        />
      </g>
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
    <clipPath id="c"><path fill="#fff" d="M8 7.89h24v24H8z" /></clipPath>
  </defs>
</svg>`,
                eR = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    d="M8.51 5.66a.83.83 0 0 0-.57-.2.83.83 0 0 0-.52.28.8.8 0 0 0-.25.52 1 1 0 0 1-2 0c0-.75.34-1.43.81-1.91a2.75 2.75 0 0 1 4.78 1.92c0 1.24-.8 1.86-1.25 2.2l-.04.03c-.47.36-.5.43-.5.65a1 1 0 1 1-2 0c0-1.25.8-1.86 1.24-2.2l.04-.04c.47-.36.5-.43.5-.65 0-.3-.1-.49-.24-.6ZM9.12 11.87a1.13 1.13 0 1 1-2.25 0 1.13 1.13 0 0 1 2.25 0Z"
  />
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"
    clip-rule="evenodd"
  />
</svg>`,
                eT = E.YP `<svg fill="none" viewBox="0 0 14 15">
  <path
    fill="currentColor"
    d="M6 10.49a1 1 0 1 0 2 0v-2a1 1 0 0 0-2 0v2ZM7 4.49a1 1 0 1 0 0 2 1 1 0 0 0 0-2Z"
  />
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M7 14.99a7 7 0 1 0 0-14 7 7 0 0 0 0 14Zm5-7a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z"
    clip-rule="evenodd"
  />
</svg>`,
                eI = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M4.83 1.34h6.34c.68 0 1.26 0 1.73.04.5.05.97.15 1.42.4.52.3.95.72 1.24 1.24.26.45.35.92.4 1.42.04.47.04 1.05.04 1.73v3.71c0 .69 0 1.26-.04 1.74-.05.5-.14.97-.4 1.41-.3.52-.72.95-1.24 1.25-.45.25-.92.35-1.42.4-.47.03-1.05.03-1.73.03H4.83c-.68 0-1.26 0-1.73-.04-.5-.04-.97-.14-1.42-.4-.52-.29-.95-.72-1.24-1.24a3.39 3.39 0 0 1-.4-1.41A20.9 20.9 0 0 1 0 9.88v-3.7c0-.7 0-1.27.04-1.74.05-.5.14-.97.4-1.42.3-.52.72-.95 1.24-1.24.45-.25.92-.35 1.42-.4.47-.04 1.05-.04 1.73-.04ZM3.28 3.38c-.36.03-.51.08-.6.14-.21.11-.39.29-.5.5a.8.8 0 0 0-.08.19l5.16 3.44c.45.3 1.03.3 1.48 0L13.9 4.2a.79.79 0 0 0-.08-.2c-.11-.2-.29-.38-.5-.5-.09-.05-.24-.1-.6-.13-.37-.04-.86-.04-1.6-.04H4.88c-.73 0-1.22 0-1.6.04ZM14 6.54 9.85 9.31a3.33 3.33 0 0 1-3.7 0L2 6.54v3.3c0 .74 0 1.22.03 1.6.04.36.1.5.15.6.11.2.29.38.5.5.09.05.24.1.6.14.37.03.86.03 1.6.03h6.25c.73 0 1.22 0 1.6-.03.35-.03.5-.09.6-.14.2-.12.38-.3.5-.5.05-.1.1-.24.14-.6.03-.38.03-.86.03-1.6v-3.3Z"
    clip-rule="evenodd"
  />
</svg>`,
                eN = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path fill="currentColor" d="M10.81 5.81a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" />
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M3 4.75A4.75 4.75 0 0 1 7.75 0h4.5A4.75 4.75 0 0 1 17 4.75v10.5A4.75 4.75 0 0 1 12.25 20h-4.5A4.75 4.75 0 0 1 3 15.25V4.75ZM7.75 2A2.75 2.75 0 0 0 5 4.75v10.5A2.75 2.75 0 0 0 7.75 18h4.5A2.75 2.75 0 0 0 15 15.25V4.75A2.75 2.75 0 0 0 12.25 2h-4.5Z"
    clip-rule="evenodd"
  />
</svg>`,
                ej = E.YP `<svg fill="none" viewBox="0 0 22 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M16.32 13.62a3.14 3.14 0 1 1-.99 1.72l-1.6-.93a3.83 3.83 0 0 1-3.71 1 3.66 3.66 0 0 1-1.74-1l-1.6.94a3.14 3.14 0 1 1-1-1.73l1.6-.94a3.7 3.7 0 0 1 0-2 3.81 3.81 0 0 1 1.8-2.33c.29-.17.6-.3.92-.38V6.1a3.14 3.14 0 1 1 2 0l-.01.02v1.85H12a3.82 3.82 0 0 1 2.33 1.8 3.7 3.7 0 0 1 .39 2.91l1.6.93ZM2.6 16.54a1.14 1.14 0 0 0 1.98-1.14 1.14 1.14 0 0 0-1.98 1.14ZM11 2.01a1.14 1.14 0 1 0 0 2.28 1.14 1.14 0 0 0 0-2.28Zm1.68 10.45c.08-.19.14-.38.16-.58v-.05l.02-.13v-.13a1.92 1.92 0 0 0-.24-.8l-.11-.15a1.89 1.89 0 0 0-.74-.6 1.86 1.86 0 0 0-.77-.17h-.19a1.97 1.97 0 0 0-.89.34 1.98 1.98 0 0 0-.61.74 1.99 1.99 0 0 0-.16.9v.05a1.87 1.87 0 0 0 .24.74l.1.15c.12.16.26.3.42.42l.16.1.13.07.04.02a1.84 1.84 0 0 0 .76.17h.17a2 2 0 0 0 .91-.35 1.78 1.78 0 0 0 .52-.58l.03-.05a.84.84 0 0 0 .05-.11Zm5.15 4.5a1.14 1.14 0 0 0 1.14-1.97 1.13 1.13 0 0 0-1.55.41c-.32.55-.13 1.25.41 1.56Z"
    clip-rule="evenodd"
  />
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M4.63 9.43a1.5 1.5 0 1 0 1.5-2.6 1.5 1.5 0 0 0-1.5 2.6Zm.32-1.55a.5.5 0 0 1 .68-.19.5.5 0 0 1 .18.68.5.5 0 0 1-.68.19.5.5 0 0 1-.18-.68ZM17.94 8.88a1.5 1.5 0 1 1-2.6-1.5 1.5 1.5 0 1 1 2.6 1.5ZM16.9 7.69a.5.5 0 0 0-.68.19.5.5 0 0 0 .18.68.5.5 0 0 0 .68-.19.5.5 0 0 0-.18-.68ZM9.75 17.75a1.5 1.5 0 1 1 2.6 1.5 1.5 1.5 0 1 1-2.6-1.5Zm1.05 1.18a.5.5 0 0 0 .68-.18.5.5 0 0 0-.18-.68.5.5 0 0 0-.68.18.5.5 0 0 0 .18.68Z"
    clip-rule="evenodd"
  />
</svg>`,
                eM = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M9.13 1h1.71c1.46 0 2.63 0 3.56.1.97.1 1.8.33 2.53.85a5 5 0 0 1 1.1 1.11c.53.73.75 1.56.86 2.53.1.93.1 2.1.1 3.55v1.72c0 1.45 0 2.62-.1 3.55-.1.97-.33 1.8-.86 2.53a5 5 0 0 1-1.1 1.1c-.73.53-1.56.75-2.53.86-.93.1-2.1.1-3.55.1H9.13c-1.45 0-2.62 0-3.56-.1-.96-.1-1.8-.33-2.52-.85a5 5 0 0 1-1.1-1.11 5.05 5.05 0 0 1-.86-2.53c-.1-.93-.1-2.1-.1-3.55V9.14c0-1.45 0-2.62.1-3.55.1-.97.33-1.8.85-2.53a5 5 0 0 1 1.1-1.1 5.05 5.05 0 0 1 2.53-.86C6.51 1 7.67 1 9.13 1ZM5.79 3.09a3.1 3.1 0 0 0-1.57.48 3 3 0 0 0-.66.67c-.24.32-.4.77-.48 1.56-.1.82-.1 1.88-.1 3.4v1.6c0 1.15 0 2.04.05 2.76l.41-.42c.5-.5.93-.92 1.32-1.24.41-.33.86-.6 1.43-.7a3 3 0 0 1 .94 0c.35.06.66.2.95.37a17.11 17.11 0 0 0 .8.45c.1-.08.2-.2.41-.4l.04-.03a27 27 0 0 1 1.95-1.84 4.03 4.03 0 0 1 1.91-.94 4 4 0 0 1 1.25 0c.73.11 1.33.46 1.91.94l.64.55V9.2c0-1.52 0-2.58-.1-3.4a3.1 3.1 0 0 0-.48-1.56 3 3 0 0 0-.66-.67 3.1 3.1 0 0 0-1.56-.48C13.37 3 12.3 3 10.79 3h-1.6c-1.52 0-2.59 0-3.4.09Zm11.18 10-.04-.05a26.24 26.24 0 0 0-1.83-1.74c-.45-.36-.73-.48-.97-.52a2 2 0 0 0-.63 0c-.24.04-.51.16-.97.52-.46.38-1.01.93-1.83 1.74l-.02.02c-.17.18-.34.34-.49.47a2.04 2.04 0 0 1-1.08.5 1.97 1.97 0 0 1-1.25-.27l-.79-.46-.02-.02a.65.65 0 0 0-.24-.1 1 1 0 0 0-.31 0c-.08.02-.21.06-.49.28-.3.24-.65.59-1.2 1.14l-.56.56-.65.66a3 3 0 0 0 .62.6c.33.24.77.4 1.57.49.81.09 1.88.09 3.4.09h1.6c1.52 0 2.58 0 3.4-.09a3.1 3.1 0 0 0 1.56-.48 3 3 0 0 0 .66-.67c.24-.32.4-.77.49-1.56l.07-1.12Zm-8.02-1.03ZM4.99 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0Z"
    clip-rule="evenodd"
  />
</svg>`,
                eD = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M8 0a1 1 0 0 1 1 1v5.38a1 1 0 0 1-2 0V1a1 1 0 0 1 1-1ZM5.26 2.6a1 1 0 0 1-.28 1.39 5.46 5.46 0 1 0 6.04 0 1 1 0 1 1 1.1-1.67 7.46 7.46 0 1 1-8.25 0 1 1 0 0 1 1.4.28Z"
    clip-rule="evenodd"
  />
</svg>`,
                eB = E.YP ` <svg
  width="36"
  height="36"
  fill="none"
>
  <path
    d="M0 8a8 8 0 0 1 8-8h20a8 8 0 0 1 8 8v20a8 8 0 0 1-8 8H8a8 8 0 0 1-8-8V8Z"
    fill="#fff"
    fill-opacity=".05"
  />
  <path
    d="m18.262 17.513-8.944 9.49v.01a2.417 2.417 0 0 0 3.56 1.452l.026-.017 10.061-5.803-4.703-5.132Z"
    fill="#EA4335"
  />
  <path
    d="m27.307 15.9-.008-.008-4.342-2.52-4.896 4.36 4.913 4.912 4.325-2.494a2.42 2.42 0 0 0 .008-4.25Z"
    fill="#FBBC04"
  />
  <path
    d="M9.318 8.997c-.05.202-.084.403-.084.622V26.39c0 .218.025.42.084.621l9.246-9.247-9.246-8.768Z"
    fill="#4285F4"
  />
  <path
    d="m18.33 18 4.627-4.628-10.053-5.828a2.427 2.427 0 0 0-3.586 1.444L18.329 18Z"
    fill="#34A853"
  />
  <path
    d="M8 .5h20A7.5 7.5 0 0 1 35.5 8v20a7.5 7.5 0 0 1-7.5 7.5H8A7.5 7.5 0 0 1 .5 28V8A7.5 7.5 0 0 1 8 .5Z"
    stroke="#fff"
    stroke-opacity=".05"
  />
</svg>`,
                eU = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    d="M3 6a3 3 0 0 1 3-3h1a1 1 0 1 0 0-2H6a5 5 0 0 0-5 5v1a1 1 0 0 0 2 0V6ZM13 1a1 1 0 1 0 0 2h1a3 3 0 0 1 3 3v1a1 1 0 1 0 2 0V6a5 5 0 0 0-5-5h-1ZM3 13a1 1 0 1 0-2 0v1a5 5 0 0 0 5 5h1a1 1 0 1 0 0-2H6a3 3 0 0 1-3-3v-1ZM19 13a1 1 0 1 0-2 0v1a3 3 0 0 1-3 3h-1a1 1 0 1 0 0 2h1.01a5 5 0 0 0 5-5v-1ZM5.3 6.36c-.04.2-.04.43-.04.89s0 .7.05.89c.14.52.54.92 1.06 1.06.19.05.42.05.89.05.46 0 .7 0 .88-.05A1.5 1.5 0 0 0 9.2 8.14c.06-.2.06-.43.06-.89s0-.7-.06-.89A1.5 1.5 0 0 0 8.14 5.3c-.19-.05-.42-.05-.88-.05-.47 0-.7 0-.9.05a1.5 1.5 0 0 0-1.05 1.06ZM10.8 6.36c-.04.2-.04.43-.04.89s0 .7.05.89c.14.52.54.92 1.06 1.06.19.05.42.05.89.05.46 0 .7 0 .88-.05a1.5 1.5 0 0 0 1.06-1.06c.06-.2.06-.43.06-.89s0-.7-.06-.89a1.5 1.5 0 0 0-1.06-1.06c-.19-.05-.42-.05-.88-.05-.47 0-.7 0-.9.05a1.5 1.5 0 0 0-1.05 1.06ZM5.26 12.75c0-.46 0-.7.05-.89a1.5 1.5 0 0 1 1.06-1.06c.19-.05.42-.05.89-.05.46 0 .7 0 .88.05.52.14.93.54 1.06 1.06.06.2.06.43.06.89s0 .7-.06.89a1.5 1.5 0 0 1-1.06 1.06c-.19.05-.42.05-.88.05-.47 0-.7 0-.9-.05a1.5 1.5 0 0 1-1.05-1.06c-.05-.2-.05-.43-.05-.89ZM10.8 11.86c-.04.2-.04.43-.04.89s0 .7.05.89c.14.52.54.92 1.06 1.06.19.05.42.05.89.05.46 0 .7 0 .88-.05a1.5 1.5 0 0 0 1.06-1.06c.06-.2.06-.43.06-.89s0-.7-.06-.89a1.5 1.5 0 0 0-1.06-1.06c-.19-.05-.42-.05-.88-.05-.47 0-.7 0-.9.05a1.5 1.5 0 0 0-1.05 1.06Z"
  />
</svg>`,
                eF = E.YP `<svg fill="none" viewBox="0 0 14 16">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M3.94 1.04a1 1 0 0 1 .7 1.23l-.48 1.68a5.85 5.85 0 0 1 8.53 4.32 5.86 5.86 0 0 1-11.4 2.56 1 1 0 0 1 1.9-.57 3.86 3.86 0 1 0 1.83-4.5l1.87.53a1 1 0 0 1-.55 1.92l-4.1-1.15a1 1 0 0 1-.69-1.23l1.16-4.1a1 1 0 0 1 1.23-.7Z"
    clip-rule="evenodd"
  />
</svg>`,
                eL = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M9.36 4.21a5.14 5.14 0 1 0 0 10.29 5.14 5.14 0 0 0 0-10.29ZM1.64 9.36a7.71 7.71 0 1 1 14 4.47l2.52 2.5a1.29 1.29 0 1 1-1.82 1.83l-2.51-2.51A7.71 7.71 0 0 1 1.65 9.36Z"
    clip-rule="evenodd"
  />
</svg>`,
                eW = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M6.76.3a1 1 0 0 1 0 1.4L4.07 4.4h9a1 1 0 1 1 0 2h-9l2.69 2.68a1 1 0 1 1-1.42 1.42L.95 6.09a1 1 0 0 1 0-1.4l4.4-4.4a1 1 0 0 1 1.4 0Zm6.49 9.21a1 1 0 0 1 1.41 0l4.39 4.4a1 1 0 0 1 0 1.4l-4.39 4.4a1 1 0 0 1-1.41-1.42l2.68-2.68h-9a1 1 0 0 1 0-2h9l-2.68-2.68a1 1 0 0 1 0-1.42Z"
    clip-rule="evenodd"
  />
</svg>`,
                ez = E.YP `<svg width="10" height="10" viewBox="0 0 10 10">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M3.77986 0.566631C4.0589 0.845577 4.0589 1.29784 3.77986 1.57678L3.08261 2.2738H6.34184C6.73647 2.2738 7.05637 2.5936 7.05637 2.98808C7.05637 3.38257 6.73647 3.70237 6.34184 3.70237H3.08261L3.77986 4.39938C4.0589 4.67833 4.0589 5.13059 3.77986 5.40954C3.50082 5.68848 3.04841 5.68848 2.76937 5.40954L0.852346 3.49316C0.573306 3.21421 0.573306 2.76195 0.852346 2.48301L2.76937 0.566631C3.04841 0.287685 3.50082 0.287685 3.77986 0.566631ZM6.22 4.59102C6.49904 4.31208 6.95145 4.31208 7.23049 4.59102L9.14751 6.5074C9.42655 6.78634 9.42655 7.23861 9.14751 7.51755L7.23049 9.43393C6.95145 9.71287 6.49904 9.71287 6.22 9.43393C5.94096 9.15498 5.94096 8.70272 6.22 8.42377L6.91725 7.72676L3.65802 7.72676C3.26339 7.72676 2.94349 7.40696 2.94349 7.01247C2.94349 6.61798 3.26339 6.29819 3.65802 6.29819L6.91725 6.29819L6.22 5.60117C5.94096 5.32223 5.94096 4.86997 6.22 4.59102Z"
    clip-rule="evenodd"
  />
</svg>`,
                eq = E.YP `<svg fill="none" viewBox="0 0 14 14">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M3.48 2.18a1 1 0 0 1 1.41 0l2.68 2.68a1 1 0 1 1-1.41 1.42l-.98-.98v4.56a1 1 0 0 1-2 0V5.3l-.97.98A1 1 0 0 1 .79 4.86l2.69-2.68Zm6.34 2.93a1 1 0 0 1 1 1v4.56l.97-.98a1 1 0 1 1 1.42 1.42l-2.69 2.68a1 1 0 0 1-1.41 0l-2.68-2.68a1 1 0 0 1 1.41-1.42l.98.98V6.1a1 1 0 0 1 1-1Z"
    clip-rule="evenodd"
  />
</svg>`,
                eH = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#5865F2" />
      <path
        fill="#fff"
        fill-rule="evenodd"
        d="M25.71 28.15C30.25 28 32 25.02 32 25.02c0-6.61-2.96-11.98-2.96-11.98-2.96-2.22-5.77-2.15-5.77-2.15l-.29.32c3.5 1.07 5.12 2.61 5.12 2.61a16.75 16.75 0 0 0-10.34-1.93l-.35.04a15.43 15.43 0 0 0-5.88 1.9s1.71-1.63 5.4-2.7l-.2-.24s-2.81-.07-5.77 2.15c0 0-2.96 5.37-2.96 11.98 0 0 1.73 2.98 6.27 3.13l1.37-1.7c-2.6-.79-3.6-2.43-3.6-2.43l.58.35.09.06.08.04.02.01.08.05a17.25 17.25 0 0 0 4.52 1.58 14.4 14.4 0 0 0 8.3-.86c.72-.27 1.52-.66 2.37-1.21 0 0-1.03 1.68-3.72 2.44.61.78 1.35 1.67 1.35 1.67Zm-9.55-9.6c-1.17 0-2.1 1.03-2.1 2.28 0 1.25.95 2.28 2.1 2.28 1.17 0 2.1-1.03 2.1-2.28.01-1.25-.93-2.28-2.1-2.28Zm7.5 0c-1.17 0-2.1 1.03-2.1 2.28 0 1.25.95 2.28 2.1 2.28 1.17 0 2.1-1.03 2.1-2.28 0-1.25-.93-2.28-2.1-2.28Z"
        clip-rule="evenodd"
      />
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
  </defs>
</svg> `,
                eG = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#5A3E85" />
      <g clip-path="url(#c)">
        <path
          fill="#fff"
          d="M18.22 25.7 20 23.91h3.34l2.1-2.1v-6.68H15.4v8.78h2.82v1.77Zm3.87-8.16h1.25v3.66H22.1v-3.66Zm-3.34 0H20v3.66h-1.25v-3.66ZM20 7.9a12 12 0 1 0 0 24 12 12 0 0 0 0-24Zm6.69 14.56-3.66 3.66h-2.72l-1.77 1.78h-1.88V26.1H13.3v-9.82l.94-2.4H26.7v8.56Z"
        />
      </g>
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
    <clipPath id="c"><path fill="#fff" d="M8 7.89h24v24H8z" /></clipPath>
  </defs>
</svg>`,
                eZ = E.YP `<svg fill="none" viewBox="0 0 40 40">
  <g clip-path="url(#a)">
    <g clip-path="url(#b)">
      <circle cx="20" cy="19.89" r="20" fill="#1D9BF0" />
      <path
        fill="#fff"
        d="M30 13.81c-.74.33-1.53.55-2.36.65.85-.51 1.5-1.32 1.8-2.27-.79.47-1.66.8-2.6 1a4.1 4.1 0 0 0-7 3.73c-3.4-.17-6.42-1.8-8.45-4.28a4.1 4.1 0 0 0 1.27 5.47c-.67-.02-1.3-.2-1.86-.5a4.1 4.1 0 0 0 3.3 4.07c-.58.15-1.21.19-1.86.07a4.1 4.1 0 0 0 3.83 2.85A8.25 8.25 0 0 1 10 26.3a11.62 11.62 0 0 0 6.29 1.84c7.62 0 11.92-6.44 11.66-12.2.8-.59 1.5-1.3 2.05-2.13Z"
      />
    </g>
  </g>
  <defs>
    <clipPath id="a"><rect width="40" height="40" fill="#fff" rx="20" /></clipPath>
    <clipPath id="b"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath>
  </defs>
</svg>`,
                eK = E.YP `<svg fill="none" viewBox="0 0 16 16">
  <path
    fill="currentColor"
    d="m14.36 4.74.01.42c0 4.34-3.3 9.34-9.34 9.34A9.3 9.3 0 0 1 0 13.03a6.6 6.6 0 0 0 4.86-1.36 3.29 3.29 0 0 1-3.07-2.28c.5.1 1 .07 1.48-.06A3.28 3.28 0 0 1 .64 6.11v-.04c.46.26.97.4 1.49.41A3.29 3.29 0 0 1 1.11 2.1a9.32 9.32 0 0 0 6.77 3.43 3.28 3.28 0 0 1 5.6-3 6.59 6.59 0 0 0 2.08-.8 3.3 3.3 0 0 1-1.45 1.82A6.53 6.53 0 0 0 16 3.04c-.44.66-1 1.23-1.64 1.7Z"
  />
</svg>`,
                eV = E.YP `
  <svg fill="none" viewBox="0 0 48 44">
    <path
      style="fill: var(--wui-color-bg-300);"
      d="M4.56 8.64c-1.23 1.68-1.23 4.08-1.23 8.88v8.96c0 4.8 0 7.2 1.23 8.88.39.55.87 1.02 1.41 1.42C7.65 38 10.05 38 14.85 38h14.3c4.8 0 7.2 0 8.88-1.22a6.4 6.4 0 0 0 1.41-1.42c.83-1.14 1.1-2.6 1.19-4.92a6.4 6.4 0 0 0 5.16-4.65c.21-.81.21-1.8.21-3.79 0-1.98 0-2.98-.22-3.79a6.4 6.4 0 0 0-5.15-4.65c-.1-2.32-.36-3.78-1.19-4.92a6.4 6.4 0 0 0-1.41-1.42C36.35 6 33.95 6 29.15 6h-14.3c-4.8 0-7.2 0-8.88 1.22a6.4 6.4 0 0 0-1.41 1.42Z"
    />
    <path
      style="fill: var(--wui-color-fg-200);"
      fill-rule="evenodd"
      d="M2.27 11.33a6.4 6.4 0 0 1 6.4-6.4h26.66a6.4 6.4 0 0 1 6.4 6.4v1.7a6.4 6.4 0 0 1 5.34 6.3v5.34a6.4 6.4 0 0 1-5.34 6.3v1.7a6.4 6.4 0 0 1-6.4 6.4H8.67a6.4 6.4 0 0 1-6.4-6.4V11.33ZM39.6 31.07h-6.93a9.07 9.07 0 1 1 0-18.14h6.93v-1.6a4.27 4.27 0 0 0-4.27-4.26H8.67a4.27 4.27 0 0 0-4.27 4.26v21.34a4.27 4.27 0 0 0 4.27 4.26h26.66a4.27 4.27 0 0 0 4.27-4.26v-1.6Zm-6.93-16a6.93 6.93 0 0 0 0 13.86h8a4.27 4.27 0 0 0 4.26-4.26v-5.34a4.27 4.27 0 0 0-4.26-4.26h-8Z"
      clip-rule="evenodd"
    />
  </svg>
`,
                eQ = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M0 5.5c0-1.8 1.46-3.25 3.25-3.25H14.5c1.8 0 3.25 1.46 3.25 3.25v.28A3.25 3.25 0 0 1 20 8.88v2.24c0 1.45-.94 2.68-2.25 3.1v.28c0 1.8-1.46 3.25-3.25 3.25H3.25A3.25 3.25 0 0 1 0 14.5v-9Zm15.75 8.88h-2.38a4.38 4.38 0 0 1 0-8.76h2.38V5.5c0-.69-.56-1.25-1.25-1.25H3.25C2.56 4.25 2 4.81 2 5.5v9c0 .69.56 1.25 1.25 1.25H14.5c.69 0 1.25-.56 1.25-1.25v-.13Zm-2.38-6.76a2.37 2.37 0 1 0 0 4.75h3.38c.69 0 1.25-.55 1.25-1.24V8.87c0-.69-.56-1.24-1.25-1.24h-3.38Z"
    clip-rule="evenodd"
  />
</svg>`,
                eY = E.YP `<svg fill="none" viewBox="0 0 96 67">
  <path
    fill="currentColor"
    d="M25.32 18.8a32.56 32.56 0 0 1 45.36 0l1.5 1.47c.63.62.63 1.61 0 2.22l-5.15 5.05c-.31.3-.82.3-1.14 0l-2.07-2.03a22.71 22.71 0 0 0-31.64 0l-2.22 2.18c-.31.3-.82.3-1.14 0l-5.15-5.05a1.55 1.55 0 0 1 0-2.22l1.65-1.62Zm56.02 10.44 4.59 4.5c.63.6.63 1.6 0 2.21l-20.7 20.26c-.62.61-1.63.61-2.26 0L48.28 41.83a.4.4 0 0 0-.56 0L33.03 56.21c-.63.61-1.64.61-2.27 0L10.07 35.95a1.55 1.55 0 0 1 0-2.22l4.59-4.5a1.63 1.63 0 0 1 2.27 0L31.6 43.63a.4.4 0 0 0 .57 0l14.69-14.38a1.63 1.63 0 0 1 2.26 0l14.69 14.38a.4.4 0 0 0 .57 0l14.68-14.38a1.63 1.63 0 0 1 2.27 0Z"
  />
  <path
    stroke="#000"
    stroke-opacity=".1"
    d="M25.67 19.15a32.06 32.06 0 0 1 44.66 0l1.5 1.48c.43.42.43 1.09 0 1.5l-5.15 5.05a.31.31 0 0 1-.44 0l-2.07-2.03a23.21 23.21 0 0 0-32.34 0l-2.22 2.18a.31.31 0 0 1-.44 0l-5.15-5.05a1.05 1.05 0 0 1 0-1.5l1.65-1.63ZM81 29.6l4.6 4.5c.42.41.42 1.09 0 1.5l-20.7 20.26c-.43.43-1.14.43-1.57 0L48.63 41.47a.9.9 0 0 0-1.26 0L32.68 55.85c-.43.43-1.14.43-1.57 0L10.42 35.6a1.05 1.05 0 0 1 0-1.5l4.59-4.5a1.13 1.13 0 0 1 1.57 0l14.68 14.38a.9.9 0 0 0 1.27 0l-.35-.35.35.35L47.22 29.6a1.13 1.13 0 0 1 1.56 0l14.7 14.38a.9.9 0 0 0 1.26 0L79.42 29.6a1.13 1.13 0 0 1 1.57 0Z"
  />
</svg>`,
                eX = E.YP `<svg fill="none" viewBox="0 0 20 20">
  <path
    fill="currentColor"
    d="M11 6.67a1 1 0 1 0-2 0v2.66a1 1 0 0 0 2 0V6.67ZM10 14.5a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z"
  />
  <path
    fill="currentColor"
    fill-rule="evenodd"
    d="M10 1a9 9 0 1 0 0 18 9 9 0 0 0 0-18Zm-7 9a7 7 0 1 1 14 0 7 7 0 0 1-14 0Z"
    clip-rule="evenodd"
  />
</svg>`;
            var wui_icon_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let eJ = {
                    allWallets: X,
                    appStore: J,
                    chromeStore: ef,
                    apple: ei,
                    arrowBottom: en,
                    arrowLeft: eo,
                    arrowRight: ea,
                    arrowTop: es,
                    browser: el,
                    checkmark: ec,
                    chevronBottom: eu,
                    chevronLeft: ed,
                    chevronRight: eh,
                    chevronTop: ep,
                    clock: eg,
                    close: ew,
                    compass: eb,
                    coinPlaceholder: em,
                    copy: ev,
                    cursor: ey,
                    desktop: eC,
                    disconnect: ex,
                    discord: e_,
                    etherscan: eE,
                    extension: ek,
                    externalLink: e$,
                    facebook: eP,
                    filters: eS,
                    github: eA,
                    google: eO,
                    helpCircle: eR,
                    infoCircle: eT,
                    mail: eI,
                    mobile: eN,
                    networkPlaceholder: ej,
                    nftPlaceholder: eM,
                    off: eD,
                    playStore: eB,
                    qrCode: eU,
                    refresh: eF,
                    search: eL,
                    swapHorizontal: eW,
                    swapHorizontalBold: ez,
                    swapVertical: eq,
                    telegram: eH,
                    twitch: eG,
                    twitter: eZ,
                    twitterIcon: eK,
                    wallet: eQ,
                    walletConnect: eY,
                    walletPlaceholder: eV,
                    warningCircle: eX
                },
                e0 = class extends E.oi {
                    constructor() {
                        super(...arguments), this.size = "md", this.name = "copy", this.color = "fg-300"
                    }
                    render() {
                        return this.style.cssText = `
      --local-color: var(--wui-color-${this.color});
      --local-width: var(--wui-icon-size-${this.size});
    `, E.dy `${eJ[this.name]}`
                    }
                };
            e0.styles = [T, W, Y], wui_icon_decorate([(0, Q.Cb)()], e0.prototype, "size", void 0), wui_icon_decorate([(0, Q.Cb)()], e0.prototype, "name", void 0), wui_icon_decorate([(0, Q.Cb)()], e0.prototype, "color", void 0), e0 = wui_icon_decorate([customElement("wui-icon")], e0);
            var e1 = E.iv `
  :host {
    display: block;
    width: 100%;
    height: 100%;
  }

  img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center center;
    border-radius: inherit;
  }
`,
                wui_image_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let e2 = class extends E.oi {
                constructor() {
                    super(...arguments), this.src = "./path/to/image.jpg", this.alt = "Image"
                }
                render() {
                    return E.dy `<img src=${this.src} alt=${this.alt} />`
                }
            };
            e2.styles = [T, W, e1], wui_image_decorate([(0, Q.Cb)()], e2.prototype, "src", void 0), wui_image_decorate([(0, Q.Cb)()], e2.prototype, "alt", void 0), e2 = wui_image_decorate([customElement("wui-image")], e2);
            var e5 = E.iv `
  :host {
    display: block;
    width: var(--wui-box-size-lg);
    height: var(--wui-box-size-lg);
  }

  svg {
    width: var(--wui-box-size-lg);
    height: var(--wui-box-size-lg);
    fill: none;
    stroke: transparent;
    stroke-linecap: round;
    transition: all var(--wui-ease-in-power-3) var(--wui-duration-lg);
  }

  use {
    stroke: var(--wui-color-accent-100);
    stroke-width: 2px;
    stroke-dasharray: 54, 118;
    stroke-dashoffset: 172;
    animation: dash 1s linear infinite;
  }

  @keyframes dash {
    to {
      stroke-dashoffset: 0px;
    }
  }
`;
            let e3 = class extends E.oi {
                render() {
                    return E.dy `
      <svg viewBox="0 0 54 59">
        <path
          id="wui-loader-path"
          d="M17.22 5.295c3.877-2.277 5.737-3.363 7.72-3.726a11.44 11.44 0 0 1 4.12 0c1.983.363 3.844 1.45 7.72 3.726l6.065 3.562c3.876 2.276 5.731 3.372 7.032 4.938a11.896 11.896 0 0 1 2.06 3.63c.683 1.928.688 4.11.688 8.663v7.124c0 4.553-.005 6.735-.688 8.664a11.896 11.896 0 0 1-2.06 3.63c-1.3 1.565-3.156 2.66-7.032 4.937l-6.065 3.563c-3.877 2.276-5.737 3.362-7.72 3.725a11.46 11.46 0 0 1-4.12 0c-1.983-.363-3.844-1.449-7.72-3.726l-6.065-3.562c-3.876-2.276-5.731-3.372-7.032-4.938a11.885 11.885 0 0 1-2.06-3.63c-.682-1.928-.688-4.11-.688-8.663v-7.124c0-4.553.006-6.735.688-8.664a11.885 11.885 0 0 1 2.06-3.63c1.3-1.565 3.156-2.66 7.032-4.937l6.065-3.562Z"
        />
        <use xlink:href="#wui-loader-path"></use>
      </svg>
    `
                }
            };
            e3.styles = [T, e5], e3 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([customElement("wui-loading-hexagon")], e3);
            var e4 = E.iv `
  :host {
    display: flex;
  }

  :host([data-size='sm']) > svg {
    width: 12px;
    height: 12px;
  }

  :host([data-size='md']) > svg {
    width: 14px;
    height: 14px;
  }

  :host([data-size='lg']) > svg {
    width: 24px;
    height: 24px;
  }

  svg {
    animation: rotate 2s linear infinite;
    transition: all var(--wui-ease-in-power-3) var(--wui-duration-lg);
  }

  circle {
    fill: none;
    stroke: var(--local-color);
    stroke-width: 4px;
    stroke-dasharray: 1, 124;
    stroke-dashoffset: 0;
    stroke-linecap: round;
    animation: dash 1.5s ease-in-out infinite;
  }

  :host([data-size='md']) > svg > circle {
    stroke-width: 6px;
  }

  :host([data-size='sm']) > svg > circle {
    stroke-width: 8px;
  }

  @keyframes rotate {
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes dash {
    0% {
      stroke-dasharray: 1, 124;
      stroke-dashoffset: 0;
    }

    50% {
      stroke-dasharray: 90, 124;
      stroke-dashoffset: -35;
    }

    100% {
      stroke-dashoffset: -125;
    }
  }
`,
                wui_loading_spinner_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let e6 = class extends E.oi {
                constructor() {
                    super(...arguments), this.color = "accent-100", this.size = "lg"
                }
                render() {
                    return this.style.cssText = `--local-color: var(--wui-color-${this.color});`, this.dataset.size = this.size, E.dy `<svg viewBox="25 25 50 50">
      <circle r="20" cy="50" cx="50"></circle>
    </svg>`
                }
            };
            e6.styles = [T, e4], wui_loading_spinner_decorate([(0, Q.Cb)()], e6.prototype, "color", void 0), wui_loading_spinner_decorate([(0, Q.Cb)()], e6.prototype, "size", void 0), e6 = wui_loading_spinner_decorate([customElement("wui-loading-spinner")], e6);
            var e8 = E.iv `
  :host {
    display: block;
    width: var(--wui-box-size-md);
    height: var(--wui-box-size-md);
  }

  svg {
    width: var(--wui-box-size-md);
    height: var(--wui-box-size-md);
    transition: all var(--wui-ease-in-power-3) var(--wui-duration-lg);
  }

  rect {
    fill: none;
    stroke: var(--wui-color-accent-100);
    stroke-width: 4px;
    stroke-linecap: round;
    animation: dash 1s linear infinite;
  }

  @keyframes dash {
    to {
      stroke-dashoffset: 0px;
    }
  }
`,
                wui_loading_thumbnail_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let e9 = class extends E.oi {
                constructor() {
                    super(...arguments), this.radius = 36
                }
                render() {
                    return this.svgLoaderTemplate()
                }
                svgLoaderTemplate() {
                    let a = this.radius > 50 ? 50 : this.radius,
                        s = 36 - a;
                    return E.dy `
      <svg viewBox="0 0 110 110" width="110" height="110">
        <rect
          x="2"
          y="2"
          width="106"
          height="106"
          rx=${a}
          stroke-dasharray="${116+s} ${245+s}"
          stroke-dashoffset=${360+1.75*s}
        />
      </svg>
    `
                }
            };
            e9.styles = [T, e8], wui_loading_thumbnail_decorate([(0, Q.Cb)({
                type: Number
            })], e9.prototype, "radius", void 0), e9 = wui_loading_thumbnail_decorate([customElement("wui-loading-thumbnail")], e9);
            var e7 = E.iv `
  :host {
    display: block;
    outline: 1px solid var(--wui-gray-glass-005);
    outline-offset: -1px;
    background: linear-gradient(
      120deg,
      var(--wui-color-bg-200) 5%,
      var(--wui-color-bg-200) 48%,
      var(--wui-color-bg-300) 55%,
      var(--wui-color-bg-300) 60%,
      var(--wui-color-bg-300) calc(60% + 10px),
      var(--wui-color-bg-200) calc(60% + 12px),
      var(--wui-color-bg-200) 100%
    );
    background-size: 250%;
    animation: shimmer 3s linear infinite reverse;
  }

  @keyframes shimmer {
    from {
      background-position: -250% 0;
    }
    to {
      background-position: 250% 0;
    }
  }
`,
                wui_shimmer_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tt = class extends E.oi {
                constructor() {
                    super(...arguments), this.width = "", this.height = "", this.borderRadius = "m"
                }
                render() {
                    return this.style.cssText = `
      width: ${this.width};
      height: ${this.height};
      border-radius: clamp(0px,var(--wui-border-radius-${this.borderRadius}), 40px);
    `, E.dy `<slot></slot>`
                }
            };
            tt.styles = [e7], wui_shimmer_decorate([(0, Q.Cb)()], tt.prototype, "width", void 0), wui_shimmer_decorate([(0, Q.Cb)()], tt.prototype, "height", void 0), wui_shimmer_decorate([(0, Q.Cb)()], tt.prototype, "borderRadius", void 0), tt = wui_shimmer_decorate([customElement("wui-shimmer")], tt);
            var tr = p(35377);
            /**
             * @license
             * Copyright 2017 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let e = a => (...s) => ({
                _$litDirective$: a,
                values: s
            });
            let i = class i {
                constructor(a) {}
                get _$AU() {
                    return this._$AM._$AU
                }
                _$AT(a, s, p) {
                    this._$Ct = a, this._$AM = s, this._$Ci = p
                }
                _$AS(a, s) {
                    return this.update(a, s)
                }
                update(a, s) {
                    return this.render(...s)
                }
            };
            /**
             * @license
             * Copyright 2018 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let ti = e(class extends i {
                constructor(a) {
                    if (super(a), 1 !== a.type || "class" !== a.name || a.strings ? .length > 2) throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")
                }
                render(a) {
                    return " " + Object.keys(a).filter(s => a[s]).join(" ") + " "
                }
                update(a, [s]) {
                    if (void 0 === this.it) {
                        for (let p in this.it = new Set, void 0 !== a.strings && (this.st = new Set(a.strings.join(" ").split(/\s/).filter(a => "" !== a))), s) s[p] && !this.st ? .has(p) && this.it.add(p);
                        return this.render(s)
                    }
                    let p = a.element.classList;
                    for (let a of this.it) a in s || (p.remove(a), this.it.delete(a));
                    for (let a in s) {
                        let g = !!s[a];
                        g === this.it.has(a) || this.st ? .has(a) || (g ? (p.add(a), this.it.add(a)) : (p.remove(a), this.it.delete(a)))
                    }
                    return tr.Jb
                }
            });
            var tn = E.iv `
  :host {
    display: flex !important;
  }

  slot {
    display: inline-block;
    font-style: normal;
    font-family: var(--wui-font-family);
    font-feature-settings:
      'tnum' on,
      'lnum' on,
      'case' on;
    line-height: 130%;
    font-weight: var(--wui-font-weight-regular);
    overflow: inherit;
    text-overflow: inherit;
    text-align: var(--local-align);
    color: var(--local-color);
  }

  .wui-font-large-500,
  .wui-font-large-600,
  .wui-font-large-700 {
    font-size: var(--wui-font-size-large);
    letter-spacing: var(--wui-letter-spacing-large);
  }

  .wui-font-paragraph-500,
  .wui-font-paragraph-600,
  .wui-font-paragraph-700 {
    font-size: var(--wui-font-size-paragraph);
    letter-spacing: var(--wui-letter-spacing-paragraph);
  }

  .wui-font-small-400,
  .wui-font-small-500,
  .wui-font-small-600 {
    font-size: var(--wui-font-size-small);
    letter-spacing: var(--wui-letter-spacing-small);
  }

  .wui-font-tiny-500,
  .wui-font-tiny-600 {
    font-size: var(--wui-font-size-tiny);
    letter-spacing: var(--wui-letter-spacing-tiny);
  }

  .wui-font-micro-700,
  .wui-font-micro-600 {
    font-size: var(--wui-font-size-micro);
    letter-spacing: var(--wui-letter-spacing-micro);
    text-transform: uppercase;
  }

  .wui-font-small-400 {
    font-weight: var(--wui-font-weight-light);
  }

  .wui-font-large-700,
  .wui-font-paragraph-700,
  .wui-font-micro-700 {
    font-weight: var(--wui-font-weight-bold);
  }

  .wui-font-large-600,
  .wui-font-paragraph-600,
  .wui-font-small-600,
  .wui-font-tiny-600,
  .wui-font-micro-600 {
    font-weight: var(--wui-font-weight-medium);
  }
`,
                wui_text_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let to = class extends E.oi {
                constructor() {
                    super(...arguments), this.variant = "paragraph-500", this.color = "fg-300", this.align = "left"
                }
                render() {
                    let a = {
                        [`wui-font-${this.variant}`]: !0,
                        [`wui-color-${this.color}`]: !0
                    };
                    return this.style.cssText = `
      --local-align: ${this.align};
      --local-color: var(--wui-color-${this.color});
    `, E.dy `<slot class=${ti(a)}></slot>`
                }
            };
            to.styles = [T, tn], wui_text_decorate([(0, Q.Cb)()], to.prototype, "variant", void 0), wui_text_decorate([(0, Q.Cb)()], to.prototype, "color", void 0), wui_text_decorate([(0, Q.Cb)()], to.prototype, "align", void 0), to = wui_text_decorate([customElement("wui-text")], to);
            let ta = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <rect width="60" height="60" fill="#1DC956" rx="30" />
  <circle cx="30" cy="30" r="3" fill="#fff" />
  <path
    fill="#2BEE6C"
    stroke="#fff"
    stroke-width="2"
    d="m45.32 17.9-.88-.42.88.42.02-.05c.1-.2.21-.44.26-.7l-.82-.15.82.16a2 2 0 0 0-.24-1.4c-.13-.23-.32-.42-.47-.57a8.42 8.42 0 0 1-.04-.04l-.04-.04a2.9 2.9 0 0 0-.56-.47l-.51.86.5-.86a2 2 0 0 0-1.4-.24c-.26.05-.5.16-.69.26l-.05.02-15.05 7.25-.1.05c-1.14.55-1.85.89-2.46 1.37a7 7 0 0 0-1.13 1.14c-.5.6-.83 1.32-1.38 2.45l-.05.11-7.25 15.05-.02.05c-.1.2-.21.43-.26.69a2 2 0 0 0 .24 1.4l.85-.5-.85.5c.13.23.32.42.47.57l.04.04.04.04c.15.15.34.34.56.47a2 2 0 0 0 1.41.24l-.2-.98.2.98c.25-.05.5-.17.69-.26l.05-.02-.42-.87.42.87 15.05-7.25.1-.05c1.14-.55 1.85-.89 2.46-1.38a7 7 0 0 0 1.13-1.13 12.87 12.87 0 0 0 1.43-2.56l7.25-15.05Z"
  />
  <path
    fill="#1DC956"
    d="M33.38 32.72 30.7 29.3 15.86 44.14l.2.2a1 1 0 0 0 1.14.2l15.1-7.27a3 3 0 0 0 1.08-4.55Z"
  />
  <path
    fill="#86F999"
    d="m26.62 27.28 2.67 3.43 14.85-14.85-.2-.2a1 1 0 0 0-1.14-.2l-15.1 7.27a3 3 0 0 0-1.08 4.55Z"
  />
  <circle cx="30" cy="30" r="3" fill="#fff" transform="rotate(45 30 30)" />
  <rect width="59" height="59" x=".5" y=".5" stroke="#062B2B" stroke-opacity=".1" rx="29.5" />
</svg> `,
                ts = E.YP `<svg viewBox="0 0 60 60" fill="none">
  <g clip-path="url(#clip0_7734_50402)">
    <path
      d="M0 24.9C0 15.6485 0 11.0228 1.97053 7.56812C3.3015 5.23468 5.23468 3.3015 7.56812 1.97053C11.0228 0 15.6485 0 24.9 0H35.1C44.3514 0 48.9772 0 52.4319 1.97053C54.7653 3.3015 56.6985 5.23468 58.0295 7.56812C60 11.0228 60 15.6485 60 24.9V35.1C60 44.3514 60 48.9772 58.0295 52.4319C56.6985 54.7653 54.7653 56.6985 52.4319 58.0295C48.9772 60 44.3514 60 35.1 60H24.9C15.6485 60 11.0228 60 7.56812 58.0295C5.23468 56.6985 3.3015 54.7653 1.97053 52.4319C0 48.9772 0 44.3514 0 35.1V24.9Z"
      fill="#EB8B47"
    />
    <path
      d="M0.5 24.9C0.5 20.2652 0.50047 16.8221 0.744315 14.105C0.987552 11.3946 1.46987 9.45504 2.40484 7.81585C3.69145 5.56019 5.56019 3.69145 7.81585 2.40484C9.45504 1.46987 11.3946 0.987552 14.105 0.744315C16.8221 0.50047 20.2652 0.5 24.9 0.5H35.1C39.7348 0.5 43.1779 0.50047 45.895 0.744315C48.6054 0.987552 50.545 1.46987 52.1841 2.40484C54.4398 3.69145 56.3086 5.56019 57.5952 7.81585C58.5301 9.45504 59.0124 11.3946 59.2557 14.105C59.4995 16.8221 59.5 20.2652 59.5 24.9V35.1C59.5 39.7348 59.4995 43.1779 59.2557 45.895C59.0124 48.6054 58.5301 50.545 57.5952 52.1841C56.3086 54.4398 54.4398 56.3086 52.1841 57.5952C50.545 58.5301 48.6054 59.0124 45.895 59.2557C43.1779 59.4995 39.7348 59.5 35.1 59.5H24.9C20.2652 59.5 16.8221 59.4995 14.105 59.2557C11.3946 59.0124 9.45504 58.5301 7.81585 57.5952C5.56019 56.3086 3.69145 54.4398 2.40484 52.1841C1.46987 50.545 0.987552 48.6054 0.744315 45.895C0.50047 43.1779 0.5 39.7348 0.5 35.1V24.9Z"
      stroke="#062B2B"
      stroke-opacity="0.1"
    />
    <path
      d="M19 52C24.5228 52 29 47.5228 29 42C29 36.4772 24.5228 32 19 32C13.4772 32 9 36.4772 9 42C9 47.5228 13.4772 52 19 52Z"
      fill="#FF974C"
      stroke="white"
      stroke-width="2"
    />
    <path
      fill-rule="evenodd"
      clip-rule="evenodd"
      d="M42.8437 8.3264C42.4507 7.70891 41.5493 7.70891 41.1564 8.32641L28.978 27.4638C28.5544 28.1295 29.0326 29.0007 29.8217 29.0007H54.1783C54.9674 29.0007 55.4456 28.1295 55.022 27.4638L42.8437 8.3264Z"
      fill="white"
    />
    <path
      fill-rule="evenodd"
      clip-rule="evenodd"
      d="M42.3348 11.6456C42.659 11.7608 42.9061 12.1492 43.4005 12.926L50.7332 24.4488C51.2952 25.332 51.5763 25.7737 51.5254 26.1382C51.4915 26.3808 51.3698 26.6026 51.1833 26.7614C50.9031 27 50.3796 27 49.3327 27H34.6673C33.6204 27 33.0969 27 32.8167 26.7614C32.6302 26.6026 32.5085 26.3808 32.4746 26.1382C32.4237 25.7737 32.7048 25.332 33.2669 24.4488L40.5995 12.926C41.0939 12.1492 41.341 11.7608 41.6652 11.6456C41.8818 11.5687 42.1182 11.5687 42.3348 11.6456ZM35.0001 26.999C38.8661 26.999 42.0001 23.865 42.0001 19.999C42.0001 23.865 45.1341 26.999 49.0001 26.999H35.0001Z"
      fill="#FF974C"
    />
    <path
      d="M10.1061 9.35712C9.9973 9.67775 9.99867 10.0388 9.99978 10.3323C9.99989 10.3611 10 10.3893 10 10.4167V25.5833C10 25.6107 9.99989 25.6389 9.99978 25.6677C9.99867 25.9612 9.9973 26.3222 10.1061 26.6429C10.306 27.2317 10.7683 27.694 11.3571 27.8939C11.6777 28.0027 12.0388 28.0013 12.3323 28.0002C12.3611 28.0001 12.3893 28 12.4167 28H19C24.5228 28 29 23.5228 29 18C29 12.4772 24.5228 8 19 8H12.4167C12.3893 8 12.3611 7.99989 12.3323 7.99978C12.0388 7.99867 11.6778 7.9973 11.3571 8.10614C10.7683 8.306 10.306 8.76834 10.1061 9.35712Z"
      fill="#FF974C"
      stroke="white"
      stroke-width="2"
    />
    <circle cx="19" cy="18" r="4" fill="#EB8B47" stroke="white" stroke-width="2" />
    <circle cx="19" cy="42" r="4" fill="#EB8B47" stroke="white" stroke-width="2" />
  </g>
  <defs>
    <clipPath id="clip0_7734_50402">
      <rect width="60" height="60" fill="white" />
    </clipPath>
  </defs>
</svg> `,
                tl = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <g clip-path="url(#a)">
    <path
      fill="#1DC956"
      d="M0 25.01c0-9.25 0-13.88 1.97-17.33a15 15 0 0 1 5.6-5.6C11.02.11 15.65.11 24.9.11h10.2c9.25 0 13.88 0 17.33 1.97a15 15 0 0 1 5.6 5.6C60 11.13 60 15.76 60 25v10.2c0 9.25 0 13.88-1.97 17.33a15 15 0 0 1-5.6 5.6c-3.45 1.97-8.08 1.97-17.33 1.97H24.9c-9.25 0-13.88 0-17.33-1.97a15 15 0 0 1-5.6-5.6C0 49.1 0 44.46 0 35.21v-10.2Z"
    />
    <path
      fill="#2BEE6C"
      d="M16.1 60c-3.82-.18-6.4-.64-8.53-1.86a15 15 0 0 1-5.6-5.6C.55 50.06.16 46.97.04 41.98L4.2 40.6a4 4 0 0 0 2.48-2.39l4.65-12.4a2 2 0 0 1 2.5-1.2l2.53.84a2 2 0 0 0 2.43-1l2.96-5.94a2 2 0 0 1 3.7.32l3.78 12.58a2 2 0 0 0 3.03 1.09l3.34-2.23a2 2 0 0 0 .65-.7l5.3-9.72a2 2 0 0 1 1.42-1.01l4.14-.69a2 2 0 0 1 1.6.44l3.9 3.24a2 2 0 0 0 2.7-.12l4.62-4.63c.08 2.2.08 4.8.08 7.93v10.2c0 9.25 0 13.88-1.97 17.33a15 15 0 0 1-5.6 5.6c-2.13 1.22-4.7 1.68-8.54 1.86H16.11Z"
    />
    <path
      fill="#fff"
      d="m.07 43.03-.05-2.1 3.85-1.28a3 3 0 0 0 1.86-1.79l4.66-12.4a3 3 0 0 1 3.75-1.8l2.53.84a1 1 0 0 0 1.21-.5l2.97-5.94a3 3 0 0 1 5.56.48l3.77 12.58a1 1 0 0 0 1.51.55l3.34-2.23a1 1 0 0 0 .33-.35l5.3-9.71a3 3 0 0 1 2.14-1.53l4.13-.69a3 3 0 0 1 2.41.66l3.9 3.24a1 1 0 0 0 1.34-.06l5.28-5.28c.05.85.08 1.75.1 2.73L56 22.41a3 3 0 0 1-4.04.19l-3.9-3.25a1 1 0 0 0-.8-.21l-4.13.69a1 1 0 0 0-.72.5l-5.3 9.72a3 3 0 0 1-.97 1.05l-3.34 2.23a3 3 0 0 1-4.53-1.63l-3.78-12.58a1 1 0 0 0-1.85-.16l-2.97 5.94a3 3 0 0 1-3.63 1.5l-2.53-.84a1 1 0 0 0-1.25.6l-4.65 12.4a5 5 0 0 1-3.1 3L.07 43.02Z"
    />
    <path
      fill="#fff"
      fill-rule="evenodd"
      d="M49.5 19a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z"
      clip-rule="evenodd"
    />
    <path fill="#fff" d="M45 .28v59.66l-2 .1V.19c.7.02 1.37.05 2 .1Z" />
    <path fill="#2BEE6C" d="M47.5 19a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" />
    <path
      stroke="#fff"
      stroke-opacity=".1"
      d="M.5 25.01c0-4.63 0-8.08.24-10.8.25-2.7.73-4.64 1.66-6.28a14.5 14.5 0 0 1 5.42-5.41C9.46 1.58 11.39 1.1 14.1.85A133 133 0 0 1 24.9.61h10.2c4.63 0 8.08 0 10.8.24 2.7.25 4.65.73 6.28 1.67a14.5 14.5 0 0 1 5.42 5.4c.93 1.65 1.41 3.58 1.66 6.3.24 2.71.24 6.16.24 10.79v10.2c0 4.64 0 8.08-.24 10.8-.25 2.7-.73 4.65-1.66 6.28a14.5 14.5 0 0 1-5.42 5.42c-1.63.93-3.57 1.41-6.28 1.66-2.72.24-6.17.24-10.8.24H24.9c-4.63 0-8.08 0-10.8-.24-2.7-.25-4.64-.73-6.28-1.66a14.5 14.5 0 0 1-5.42-5.42C1.47 50.66 1 48.72.74 46.01A133 133 0 0 1 .5 35.2v-10.2Z"
    />
  </g>
  <defs>
    <clipPath id="a"><path fill="#fff" d="M0 0h60v60H0z" /></clipPath>
  </defs>
</svg>`,
                tc = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <g clip-path="url(#a)">
    <rect width="60" height="60" fill="#C653C6" rx="30" />
    <path
      fill="#E87DE8"
      d="M57.98.01v19.5a4.09 4.09 0 0 0-2.63 2.29L50.7 34.2a2 2 0 0 1-2.5 1.2l-2.53-.84a2 2 0 0 0-2.42 1l-2.97 5.94a2 2 0 0 1-3.7-.32L32.8 28.6a2 2 0 0 0-3.02-1.09l-3.35 2.23a2 2 0 0 0-.64.7l-5.3 9.72a2 2 0 0 1-1.43 1.01l-4.13.69a2 2 0 0 1-1.61-.44l-3.9-3.24a2 2 0 0 0-2.69.12L2.1 42.93.02 43V.01h57.96Z"
    />
    <path
      fill="#fff"
      d="m61.95 16.94.05 2.1-3.85 1.28a3 3 0 0 0-1.86 1.79l-4.65 12.4a3 3 0 0 1-3.76 1.8l-2.53-.84a1 1 0 0 0-1.2.5l-2.98 5.94a3 3 0 0 1-5.55-.48l-3.78-12.58a1 1 0 0 0-1.5-.55l-3.35 2.23a1 1 0 0 0-.32.35l-5.3 9.72a3 3 0 0 1-2.14 1.52l-4.14.69a3 3 0 0 1-2.41-.66l-3.9-3.24a1 1 0 0 0-1.34.06l-5.28 5.28c-.05-.84-.08-1.75-.1-2.73l3.97-3.96a3 3 0 0 1 4.04-.19l3.89 3.25a1 1 0 0 0 .8.21l4.14-.68a1 1 0 0 0 .71-.51l5.3-9.71a3 3 0 0 1 .97-1.06l3.34-2.23a3 3 0 0 1 4.54 1.63l3.77 12.58a1 1 0 0 0 1.86.16l2.96-5.93a3 3 0 0 1 3.64-1.5l2.52.83a1 1 0 0 0 1.25-.6l4.66-12.4a5 5 0 0 1 3.1-2.99l4.43-1.48Z"
    />
    <path
      fill="#fff"
      fill-rule="evenodd"
      d="M35.5 27a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z"
      clip-rule="evenodd"
    />
    <path fill="#fff" d="M31 0v60h-2V0h2Z" />
    <path fill="#E87DE8" d="M33.5 27a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" />
  </g>
  <rect width="59" height="59" x=".5" y=".5" stroke="#fff" stroke-opacity=".1" rx="29.5" />
  <defs>
    <clipPath id="a"><rect width="60" height="60" fill="#fff" rx="30" /></clipPath>
  </defs>
</svg> `,
                tu = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <g clip-path="url(#a)">
    <rect width="60" height="60" fill="#987DE8" rx="30" />
    <path
      fill="#fff"
      fill-rule="evenodd"
      d="m15.48 28.37 11.97-19.3a3 3 0 0 1 5.1 0l11.97 19.3a6 6 0 0 1 .9 3.14v.03a6 6 0 0 1-1.16 3.56L33.23 50.2a4 4 0 0 1-6.46 0L15.73 35.1a6 6 0 0 1-1.15-3.54v-.03a6 6 0 0 1 .9-3.16Z"
      clip-rule="evenodd"
    />
    <path
      fill="#643CDD"
      d="M30.84 10.11a1 1 0 0 0-.84-.46V24.5l12.6 5.53a2 2 0 0 0-.28-1.4L30.84 10.11Z"
    />
    <path
      fill="#BDADEB"
      d="M30 9.65a1 1 0 0 0-.85.46L17.66 28.64a2 2 0 0 0-.26 1.39L30 24.5V9.65Z"
    />
    <path
      fill="#643CDD"
      d="M30 50.54a1 1 0 0 0 .8-.4l11.24-15.38c.3-.44-.2-1-.66-.73l-9.89 5.68a3 3 0 0 1-1.5.4v10.43Z"
    />
    <path
      fill="#BDADEB"
      d="m17.97 34.76 11.22 15.37c.2.28.5.41.8.41V40.11a3 3 0 0 1-1.49-.4l-9.88-5.68c-.47-.27-.97.3-.65.73Z"
    />
    <path
      fill="#401AB3"
      d="M42.6 30.03 30 24.5v13.14a3 3 0 0 0 1.5-.4l10.14-5.83a2 2 0 0 0 .95-1.38Z"
    />
    <path
      fill="#7C5AE2"
      d="M30 37.64V24.46l-12.6 5.57a2 2 0 0 0 .97 1.39l10.13 5.82a3 3 0 0 0 1.5.4Z"
    />
  </g>
  <rect width="59" height="59" x=".5" y=".5" stroke="#fff" stroke-opacity=".1" rx="29.5" />
  <defs>
    <clipPath id="a"><rect width="60" height="60" fill="#fff" rx="30" /></clipPath>
  </defs>
</svg> `,
                td = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <rect width="60" height="60" fill="#1DC956" rx="3" />
  <path
    fill="#1FAD7E"
    stroke="#fff"
    stroke-width="2"
    d="m30.49 29.13-.49-.27-.49.27-12.77 7.1-.05.02c-.86.48-1.58.88-2.1 1.24-.54.37-1.04.81-1.28 1.45a3 3 0 0 0 0 2.12c.24.63.74 1.08 1.27 1.45.53.36 1.25.76 2.11 1.24l.05.03 6.33 3.51.17.1c2.33 1.3 3.72 2.06 5.22 2.32a9 9 0 0 0 3.08 0c1.5-.26 2.9-1.03 5.22-2.32l.18-.1 6.32-3.51.05-.03a26.9 26.9 0 0 0 2.1-1.24 3.21 3.21 0 0 0 1.28-1.45l-.94-.35.94.35a3 3 0 0 0 0-2.12l-.94.35.94-.35a3.21 3.21 0 0 0-1.27-1.45c-.53-.36-1.25-.76-2.11-1.24l-.05-.03-12.77-7.1Z"
  />
  <path
    fill="#2BEE6C"
    stroke="#fff"
    stroke-width="2"
    d="m30.49 19.13-.49-.27-.49.27-12.77 7.1-.05.02c-.86.48-1.58.88-2.1 1.24-.54.37-1.04.81-1.28 1.45a3 3 0 0 0 0 2.12c.24.63.74 1.08 1.27 1.45.53.36 1.25.76 2.11 1.24l.05.03 6.33 3.51.17.1c2.33 1.3 3.72 2.06 5.22 2.32a9 9 0 0 0 3.08 0c1.5-.26 2.9-1.03 5.22-2.32l.18-.1 6.32-3.51.05-.03a26.9 26.9 0 0 0 2.1-1.24 3.21 3.21 0 0 0 1.28-1.45l-.94-.35.94.35a3 3 0 0 0 0-2.12l-.94.35.94-.35a3.21 3.21 0 0 0-1.27-1.45c-.53-.36-1.25-.76-2.11-1.24l-.05-.03-12.77-7.1Z"
  />
  <path
    fill="#86F999"
    stroke="#fff"
    stroke-width="2"
    d="m46.69 21.06-.94-.35.94.35a3 3 0 0 0 0-2.12l-.94.35.94-.35a3.21 3.21 0 0 0-1.27-1.45c-.53-.36-1.25-.76-2.11-1.24l-.05-.03-6.32-3.51-.18-.1c-2.33-1.3-3.72-2.06-5.22-2.33a9 9 0 0 0-3.08 0c-1.5.27-2.9 1.04-5.22 2.33l-.17.1-6.33 3.51-.05.03c-.86.48-1.58.88-2.1 1.24-.54.37-1.04.81-1.28 1.45a3 3 0 0 0 0 2.12c.24.63.74 1.08 1.27 1.45.53.36 1.25.76 2.11 1.24l.05.03 6.33 3.51.17.1c2.33 1.3 3.72 2.06 5.22 2.32a9 9 0 0 0 3.08 0c1.5-.26 2.9-1.03 5.22-2.32l.18-.1 6.32-3.51.05-.03a26.9 26.9 0 0 0 2.1-1.24 3.21 3.21 0 0 0 1.28-1.45Z"
  />
  <rect width="59" height="59" x=".5" y=".5" stroke="#fff" stroke-opacity=".1" rx="2.5" />
</svg>`,
                th = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <rect width="60" height="60" fill="#C653C6" rx="3" />
  <path
    fill="#fff"
    d="M20.03 15.22C20 15.6 20 16.07 20 17v2.8c0 1.14 0 1.7-.2 2.12-.15.31-.3.5-.58.71-.37.28-1.06.42-2.43.7-.59.12-1.11.29-1.6.51a9 9 0 0 0-4.35 4.36C10 30 10 32.34 10 37c0 4.66 0 7 .84 8.8a9 9 0 0 0 4.36 4.36C17 51 19.34 51 24 51h12c4.66 0 7 0 8.8-.84a9 9 0 0 0 4.36-4.36C50 44 50 41.66 50 37c0-4.66 0-7-.84-8.8a9 9 0 0 0-4.36-4.36c-.48-.22-1-.39-1.6-.5-1.36-.29-2.05-.43-2.42-.7-.27-.22-.43-.4-.58-.72-.2-.42-.2-.98-.2-2.11V17c0-.93 0-1.4-.03-1.78a9 9 0 0 0-8.19-8.19C31.4 7 30.93 7 30 7s-1.4 0-1.78.03a9 9 0 0 0-8.19 8.19Z"
  />
  <path
    fill="#E87DE8"
    d="M22 17c0-.93 0-1.4.04-1.78a7 7 0 0 1 6.18-6.18C28.6 9 29.07 9 30 9s1.4 0 1.78.04a7 7 0 0 1 6.18 6.18c.04.39.04.85.04 1.78v4.5a1.5 1.5 0 0 1-3 0V17c0-.93 0-1.4-.08-1.78a4 4 0 0 0-3.14-3.14C31.39 12 30.93 12 30 12s-1.4 0-1.78.08a4 4 0 0 0-3.14 3.14c-.08.39-.08.85-.08 1.78v4.5a1.5 1.5 0 0 1-3 0V17Z"
  />
  <path
    fill="#E87DE8"
    fill-rule="evenodd"
    d="M12 36.62c0-4.32 0-6.48.92-8.09a7 7 0 0 1 2.61-2.61C17.14 25 19.3 25 23.62 25h6.86c.46 0 .7 0 .9.02 2.73.22 4.37 2.43 4.62 4.98.27-2.7 2.11-5 5.02-5A6.98 6.98 0 0 1 48 31.98v5.4c0 4.32 0 6.48-.92 8.09a7 7 0 0 1-2.61 2.61c-1.61.92-3.77.92-8.09.92h-5.86c-.46 0-.7 0-.9-.02-2.73-.22-4.37-2.43-4.62-4.98-.26 2.58-1.94 4.82-4.71 4.99l-.7.01c-.55 0-.82 0-1.05-.02a7 7 0 0 1-6.52-6.52c-.02-.23-.02-.5-.02-1.05v-4.79Zm21.24-.27a4 4 0 1 0-6.48 0 31.28 31.28 0 0 1 1.57 2.23c.17.4.17.81.17 1.24V42.5a1.5 1.5 0 0 0 3 0V39.82c0-.43 0-.85.17-1.24.09-.2.58-.87 1.57-2.23Z"
    clip-rule="evenodd"
  />
  <rect width="59" height="59" x=".5" y=".5" stroke="#fff" stroke-opacity=".1" rx="2.5" />
</svg>`,
                tp = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <g clip-path="url(#a)">
    <path
      fill="#EB8B47"
      d="M0 24.9c0-9.25 0-13.88 1.97-17.33a15 15 0 0 1 5.6-5.6C11.02 0 15.65 0 24.9 0h10.2c9.25 0 13.88 0 17.33 1.97a15 15 0 0 1 5.6 5.6C60 11.02 60 15.65 60 24.9v10.2c0 9.25 0 13.88-1.97 17.33a15 15 0 0 1-5.6 5.6C48.98 60 44.35 60 35.1 60H24.9c-9.25 0-13.88 0-17.33-1.97a15 15 0 0 1-5.6-5.6C0 48.98 0 44.35 0 35.1V24.9Z"
    />
    <path
      stroke="#062B2B"
      stroke-opacity=".1"
      d="M.5 24.9c0-4.64 0-8.08.24-10.8.25-2.7.73-4.65 1.66-6.28A14.5 14.5 0 0 1 7.82 2.4C9.46 1.47 11.39 1 14.1.74A133 133 0 0 1 24.9.5h10.2c4.63 0 8.08 0 10.8.24 2.7.25 4.65.73 6.28 1.66a14.5 14.5 0 0 1 5.42 5.42c.93 1.63 1.41 3.57 1.66 6.28.24 2.72.24 6.16.24 10.8v10.2c0 4.63 0 8.08-.24 10.8-.25 2.7-.73 4.64-1.66 6.28a14.5 14.5 0 0 1-5.42 5.41c-1.63.94-3.57 1.42-6.28 1.67-2.72.24-6.17.24-10.8.24H24.9c-4.63 0-8.08 0-10.8-.24-2.7-.25-4.64-.73-6.28-1.67a14.5 14.5 0 0 1-5.42-5.4C1.47 50.53 1 48.6.74 45.88A133 133 0 0 1 .5 35.1V24.9Z"
    />
    <path
      fill="#FF974C"
      stroke="#fff"
      stroke-width="2"
      d="M39.2 29.2a13 13 0 1 0-18.4 0l1.3 1.28a12.82 12.82 0 0 1 2.1 2.39 6 6 0 0 1 .6 1.47c.2.76.2 1.56.2 3.17v11.24c0 1.08 0 1.61.13 2.12a4 4 0 0 0 .41.98c.26.45.64.83 1.4 1.6l.3.29c.65.65.98.98 1.36 1.09.26.07.54.07.8 0 .38-.11.7-.44 1.36-1.1l3.48-3.47c.65-.65.98-.98 1.09-1.36a1.5 1.5 0 0 0 0-.8c-.1-.38-.44-.7-1.1-1.36l-.47-.48c-.65-.65-.98-.98-1.09-1.36a1.5 1.5 0 0 1 0-.8c.1-.38.44-.7 1.1-1.36l.47-.48c.65-.65.98-.98 1.09-1.36a1.5 1.5 0 0 0 0-.8c-.1-.38-.44-.7-1.1-1.36l-.48-.5c-.65-.64-.98-.97-1.08-1.35a1.5 1.5 0 0 1 0-.79c.1-.38.42-.7 1.06-1.36l5.46-5.55Z"
    />
    <circle cx="30" cy="17" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2" />
  </g>
  <defs>
    <clipPath id="a"><path fill="#fff" d="M0 0h60v60H0z" /></clipPath>
  </defs>
</svg> `,
                tf = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <g clip-path="url(#a)">
    <rect width="60" height="60" fill="#00ACE6" rx="30" />
    <circle cx="64" cy="39" r="50" fill="#1AC6FF" stroke="#fff" stroke-width="2" />
    <circle cx="78" cy="30" r="50" fill="#4DD2FF" stroke="#fff" stroke-width="2" />
    <circle cx="72" cy="15" r="35" fill="#80DFFF" stroke="#fff" stroke-width="2" />
    <circle cx="34" cy="-17" r="45" stroke="#fff" stroke-width="2" />
    <circle cx="34" cy="-5" r="50" stroke="#fff" stroke-width="2" />
    <circle cx="30" cy="45" r="4" fill="#4DD2FF" stroke="#fff" stroke-width="2" />
    <circle cx="39.5" cy="27.5" r="4" fill="#80DFFF" stroke="#fff" stroke-width="2" />
    <circle cx="16" cy="24" r="4" fill="#19C6FF" stroke="#fff" stroke-width="2" />
  </g>
  <rect width="59" height="59" x=".5" y=".5" stroke="#062B2B" stroke-opacity=".1" rx="29.5" />
  <defs>
    <clipPath id="a"><rect width="60" height="60" fill="#fff" rx="30" /></clipPath>
  </defs>
</svg>`,
                tg = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <g clip-path="url(#a)">
    <rect width="60" height="60" fill="#C653C6" rx="3" />
    <path
      fill="#E87DE8"
      stroke="#fff"
      stroke-width="2"
      d="M52.1 47.34c0-4.24-1.44-9.55-5.9-12.4a2.86 2.86 0 0 0-1.6-3.89v-.82c0-1.19-.52-2.26-1.35-3a4.74 4.74 0 0 0-2.4-6.26v-5.5a11.31 11.31 0 1 0-22.63 0v2.15a3.34 3.34 0 0 0-1.18 5.05 4.74 4.74 0 0 0-.68 6.44A5.22 5.22 0 0 0 14 35.92c-3.06 4.13-6.1 8.3-6.1 15.64 0 2.67.37 4.86.74 6.39a20.3 20.3 0 0 0 .73 2.39l.02.04v.01l.92-.39-.92.4.26.6h38.26l.3-.49-.87-.51.86.5.02-.01.03-.07a16.32 16.32 0 0 0 .57-1.05c.36-.72.85-1.74 1.33-2.96a25.51 25.51 0 0 0 1.94-9.07Z"
    />
    <path
      fill="#fff"
      fill-rule="evenodd"
      d="M26.5 29.5c-3-.5-5.5-3-5.5-7v-7c0-.47 0-.7.03-.9a3 3 0 0 1 2.58-2.57c.2-.03.42-.03.89-.03 2 0 2.5-2.5 2.5-2.5s0 2.5 2.5 2.5c1.4 0 2.1 0 2.65.23a3 3 0 0 1 1.62 1.62c.23.55.23 1.25.23 2.65v6c0 4-3 7-6.5 7 1.35.23 4 0 6.5-2v9.53C34 38.5 31.5 40 28 40s-6-1.5-6-2.97L24 34l2.5 1.5v-6ZM26 47h4.5c2.5 0 3 4 3 5.5h-3l-1-1.5H26v-4Zm-6.25 5.5H24V57h-8c0-1 1-4.5 3.75-4.5Z"
      clip-rule="evenodd"
    />
  </g>
  <rect width="59" height="59" x=".5" y=".5" stroke="#fff" stroke-opacity=".1" rx="2.5" />
  <defs>
    <clipPath id="a"><rect width="60" height="60" fill="#fff" rx="3" /></clipPath>
  </defs>
</svg> `,
                tw = E.YP `<svg fill="none" viewBox="0 0 60 60">
  <rect width="60" height="60" fill="#794CFF" rx="3" />
  <path
    fill="#987DE8"
    stroke="#fff"
    stroke-width="2"
    d="M33 22.5v-1H16v5H8.5V36H13v-5h3v7.5h17V31h1v7.5h17v-17H34v5h-1v-4Z"
  />
  <path fill="#fff" d="M37.5 25h10v10h-10z" />
  <path fill="#4019B2" d="M42.5 25h5v10h-5z" />
  <path fill="#fff" d="M19.5 25h10v10h-10z" />
  <path fill="#4019B2" d="M24.5 25h5v10h-5z" />
  <path fill="#fff" d="M12 30.5h4V37h-4v-6.5Z" />
  <rect width="59" height="59" x=".5" y=".5" stroke="#fff" stroke-opacity=".1" rx="2.5" />
</svg>`,
                tm = E.YP `<svg
  viewBox="0 0 60 60"
  fill="none"
>
  <g clip-path="url(#1)">
    <rect width="60" height="60" rx="30" fill="#00ACE6" />
    <path
      d="M59 73C59 89.0163 46.0163 102 30 102C13.9837 102 1 89.0163 1 73C1 56.9837 12 44 30 44C48 44 59 56.9837 59 73Z"
      fill="#1AC6FF"
      stroke="white"
      stroke-width="2"
    />
    <path
      d="M18.6904 19.9015C19.6264 15.3286 23.3466 11.8445 27.9708 11.2096C29.3231 11.024 30.6751 11.0238 32.0289 11.2096C36.6532 11.8445 40.3733 15.3286 41.3094 19.9015C41.4868 20.7681 41.6309 21.6509 41.7492 22.5271C41.8811 23.5041 41.8811 24.4944 41.7492 25.4715C41.6309 26.3476 41.4868 27.2304 41.3094 28.097C40.3733 32.6699 36.6532 36.154 32.0289 36.7889C30.6772 36.9744 29.3216 36.9743 27.9708 36.7889C23.3466 36.154 19.6264 32.6699 18.6904 28.097C18.513 27.2304 18.3689 26.3476 18.2506 25.4715C18.1186 24.4944 18.1186 23.5041 18.2506 22.5271C18.3689 21.6509 18.513 20.7681 18.6904 19.9015Z"
      fill="#1AC6FF"
      stroke="white"
      stroke-width="2"
    />
    <circle cx="24.5" cy="23.5" r="1.5" fill="white" />
    <circle cx="35.5" cy="23.5" r="1.5" fill="white" />
    <path
      d="M31 20L28 28H32"
      stroke="white"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
  </g>
  <rect x="0.5" y="0.5" width="59" height="59" rx="29.5" stroke="white" stroke-opacity="0.1" />
  <defs>
    <clipPath id="1">
      <rect width="60" height="60" rx="30" fill="white" />
    </clipPath>
  </defs>
</svg> `,
                tb = E.YP `<svg viewBox="0 0 60 60" fill="none">
  <g clip-path="url(#1)">
    <path
      d="M0 24.9C0 15.6485 0 11.0228 1.97053 7.56812C3.3015 5.23468 5.23468 3.3015 7.56812 1.97053C11.0228 0 15.6485 0 24.9 0H35.1C44.3514 0 48.9772 0 52.4319 1.97053C54.7653 3.3015 56.6985 5.23468 58.0295 7.56812C60 11.0228 60 15.6485 60 24.9V35.1C60 44.3514 60 48.9772 58.0295 52.4319C56.6985 54.7653 54.7653 56.6985 52.4319 58.0295C48.9772 60 44.3514 60 35.1 60H24.9C15.6485 60 11.0228 60 7.56812 58.0295C5.23468 56.6985 3.3015 54.7653 1.97053 52.4319C0 48.9772 0 44.3514 0 35.1V24.9Z"
      fill="#794CFF"
    />
    <path
      d="M0.5 24.9C0.5 20.2652 0.50047 16.8221 0.744315 14.105C0.987552 11.3946 1.46987 9.45504 2.40484 7.81585C3.69145 5.56019 5.56019 3.69145 7.81585 2.40484C9.45504 1.46987 11.3946 0.987552 14.105 0.744315C16.8221 0.50047 20.2652 0.5 24.9 0.5H35.1C39.7348 0.5 43.1779 0.50047 45.895 0.744315C48.6054 0.987552 50.545 1.46987 52.1841 2.40484C54.4398 3.69145 56.3086 5.56019 57.5952 7.81585C58.5301 9.45504 59.0124 11.3946 59.2557 14.105C59.4995 16.8221 59.5 20.2652 59.5 24.9V35.1C59.5 39.7348 59.4995 43.1779 59.2557 45.895C59.0124 48.6054 58.5301 50.545 57.5952 52.1841C56.3086 54.4398 54.4398 56.3086 52.1841 57.5952C50.545 58.5301 48.6054 59.0124 45.895 59.2557C43.1779 59.4995 39.7348 59.5 35.1 59.5H24.9C20.2652 59.5 16.8221 59.4995 14.105 59.2557C11.3946 59.0124 9.45504 58.5301 7.81585 57.5952C5.56019 56.3086 3.69145 54.4398 2.40484 52.1841C1.46987 50.545 0.987552 48.6054 0.744315 45.895C0.50047 43.1779 0.5 39.7348 0.5 35.1V24.9Z"
      stroke="#062B2B"
      stroke-opacity="0.1"
    />
    <path
      d="M35.1403 31.5016C35.1193 30.9637 35.388 30.4558 35.8446 30.1707C36.1207 29.9982 36.4761 29.8473 36.7921 29.7685C37.3143 29.6382 37.8664 29.7977 38.2386 30.1864C38.8507 30.8257 39.3004 31.6836 39.8033 32.408C40.2796 33.0942 41.4695 33.2512 41.9687 32.5047C42.4839 31.7341 42.9405 30.8229 43.572 30.1399C43.9375 29.7447 44.4866 29.5756 45.0111 29.6967C45.3283 29.7701 45.6863 29.9147 45.9655 30.0823C46.4269 30.3595 46.7045 30.8626 46.6928 31.4008C46.6731 32.3083 46.3764 33.2571 46.2158 34.1473C46.061 35.0048 46.9045 35.8337 47.7592 35.664C48.6464 35.4878 49.5899 35.1747 50.497 35.1391C51.0348 35.1181 51.5427 35.3868 51.8279 35.8433C52.0004 36.1195 52.1513 36.4749 52.2301 36.7908C52.3604 37.3131 52.2009 37.8651 51.8121 38.2374C51.1729 38.8495 50.3151 39.2991 49.5908 39.8019C48.9046 40.2782 48.7473 41.4683 49.4939 41.9675C50.2644 42.4827 51.1757 42.9393 51.8587 43.5708C52.2539 43.9362 52.423 44.4854 52.3018 45.0099C52.2285 45.3271 52.0839 45.6851 51.9162 45.9642C51.6391 46.4257 51.1359 46.7032 50.5978 46.6916C49.6903 46.6719 48.7417 46.3753 47.8516 46.2146C46.9939 46.0598 46.1648 46.9035 46.3346 47.7583C46.5108 48.6454 46.8239 49.5888 46.8594 50.4958C46.8805 51.0336 46.6117 51.5415 46.1552 51.8267C45.879 51.9992 45.5236 52.15 45.2077 52.2289C44.6854 52.3592 44.1334 52.1997 43.7611 51.8109C43.1491 51.1718 42.6996 50.314 42.1968 49.5897C41.7203 48.9034 40.5301 48.7463 40.0309 49.493C39.5157 50.2634 39.0592 51.1746 38.4278 51.8574C38.0623 52.2527 37.5132 52.4218 36.9887 52.3006C36.6715 52.2273 36.3135 52.0826 36.0343 51.915C35.5729 51.6379 35.2953 51.1347 35.307 50.5966C35.3267 49.6891 35.6233 48.7405 35.7839 47.8505C35.9388 46.9928 35.0951 46.1636 34.2402 46.3334C33.3531 46.5096 32.4098 46.8227 31.5028 46.8582C30.9649 46.8793 30.457 46.6105 30.1719 46.154C29.9994 45.8778 29.8485 45.5224 29.7697 45.2065C29.6394 44.6842 29.7989 44.1322 30.1877 43.7599C30.8269 43.1479 31.6847 42.6982 32.4091 42.1954C33.0954 41.7189 33.2522 40.5289 32.5056 40.0297C31.7351 39.5145 30.824 39.058 30.1411 38.4265C29.7459 38.0611 29.5768 37.5119 29.698 36.9875C29.7713 36.6702 29.9159 36.3122 30.0836 36.0331C30.3607 35.5717 30.8638 35.2941 31.402 35.3058C32.3095 35.3255 33.2583 35.6221 34.1485 35.7828C35.006 35.9376 35.8349 35.094 35.6652 34.2393C35.489 33.3521 35.1759 32.4087 35.1403 31.5016Z"
      fill="#906EF7"
      stroke="white"
      stroke-width="2"
    />
    <path
      d="M20.7706 8.22357C20.9036 7.51411 21.5231 7 22.2449 7H23.7551C24.4769 7 25.0964 7.51411 25.2294 8.22357C25.5051 9.69403 25.4829 11.6321 27.1202 12.2606C27.3092 12.3331 27.4958 12.4105 27.6798 12.4926C29.2818 13.2072 30.6374 11.8199 31.8721 10.9752C32.4678 10.5676 33.2694 10.6421 33.7798 11.1525L34.8477 12.2204C35.3581 12.7308 35.4326 13.5323 35.025 14.128C34.1802 15.3627 32.7931 16.7183 33.5077 18.3202C33.5898 18.5043 33.6672 18.6909 33.7398 18.88C34.3683 20.5171 36.3061 20.4949 37.7764 20.7706C38.4859 20.9036 39 21.5231 39 22.2449V23.7551C39 24.4769 38.4859 25.0964 37.7764 25.2294C36.3061 25.5051 34.3685 25.483 33.7401 27.1201C33.6675 27.3093 33.59 27.4961 33.5079 27.6803C32.7934 29.282 34.1803 30.6374 35.025 31.8719C35.4326 32.4677 35.3581 33.2692 34.8477 33.7796L33.7798 34.8475C33.2694 35.3579 32.4678 35.4324 31.8721 35.0248C30.6376 34.1801 29.2823 32.7934 27.6806 33.508C27.4962 33.5903 27.3093 33.6678 27.12 33.7405C25.483 34.3688 25.5051 36.3062 25.2294 37.7764C25.0964 38.4859 24.4769 39 23.7551 39H22.2449C21.5231 39 20.9036 38.4859 20.7706 37.7764C20.4949 36.3062 20.517 34.3688 18.88 33.7405C18.6908 33.6678 18.5039 33.5903 18.3196 33.5081C16.7179 32.7936 15.3625 34.1804 14.1279 35.0251C13.5322 35.4327 12.7307 35.3582 12.2203 34.8478L11.1524 33.7799C10.642 33.2695 10.5675 32.4679 10.9751 31.8722C11.8198 30.6376 13.2067 29.2822 12.4922 27.6804C12.41 27.4962 12.3325 27.3093 12.2599 27.1201C11.6315 25.483 9.69392 25.5051 8.22357 25.2294C7.51411 25.0964 7 24.4769 7 23.7551V22.2449C7 21.5231 7.51411 20.9036 8.22357 20.7706C9.69394 20.4949 11.6317 20.5171 12.2602 18.88C12.3328 18.6909 12.4103 18.5042 12.4924 18.3201C13.207 16.7181 11.8198 15.3625 10.975 14.1278C10.5674 13.5321 10.6419 12.7305 11.1523 12.2201L12.2202 11.1522C12.7306 10.6418 13.5322 10.5673 14.1279 10.9749C15.3626 11.8197 16.7184 13.2071 18.3204 12.4925C18.5044 12.4105 18.6909 12.3331 18.8799 12.2606C20.5171 11.6321 20.4949 9.69403 20.7706 8.22357Z"
      fill="#906EF7"
      stroke="white"
      stroke-width="2"
    />
    <circle cx="23" cy="23" r="6" fill="#794CFF" stroke="white" stroke-width="2" />
    <circle cx="41" cy="41" r="4" fill="#794CFF" stroke="white" stroke-width="2" />
  </g>
  <defs>
    <clipPath id="1">
      <rect width="60" height="60" fill="white" />
    </clipPath>
  </defs>
</svg> `;
            var tv = E.iv `
  :host {
    display: block;
    width: 55px;
    height: 55px;
  }
`,
                wui_visual_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let ty = {
                    browser: ta,
                    dao: ts,
                    defi: tl,
                    defiAlt: tc,
                    eth: tu,
                    layers: td,
                    lock: th,
                    login: tp,
                    network: tf,
                    nft: tg,
                    noun: tw,
                    profile: tm,
                    system: tb
                },
                tC = class extends E.oi {
                    constructor() {
                        super(...arguments), this.name = "browser"
                    }
                    render() {
                        return E.dy `${ty[this.name]}`
                    }
                };
            tC.styles = [T, tv], wui_visual_decorate([(0, Q.Cb)()], tC.prototype, "name", void 0), tC = wui_visual_decorate([customElement("wui-visual")], tC);
            var tx = p(80824);
            let t_ = {
                getSpacingStyles: (a, s) => Array.isArray(a) ? a[s] ? `var(--wui-spacing-${a[s]})` : void 0 : "string" == typeof a ? `var(--wui-spacing-${a})` : void 0,
                getFormattedDate: a => new Intl.DateTimeFormat("en-US", {
                    month: "short",
                    day: "numeric"
                }).format(a),
                getHostName(a) {
                    let s = new URL(a);
                    return s.hostname
                },
                getTruncateString: ({
                    string: a,
                    charsStart: s,
                    charsEnd: p,
                    truncate: g
                }) => a.length <= s + p ? a : "end" === g ? `${a.substring(0,s)}...` : "start" === g ? `...${a.substring(a.length-p)}` : `${a.substring(0,Math.floor(s))}...${a.substring(a.length-Math.floor(p))}`,
                generateAvatarColors(a) {
                    let s = a.toLowerCase().replace(/^0x/iu, ""),
                        p = s.substring(0, 6),
                        g = this.hexToRgb(p),
                        m = [];
                    for (let a = 0; a < 5; a += 1) {
                        let s = this.tintColor(g, .15 * a);
                        m.push(`rgb(${s[0]}, ${s[1]}, ${s[2]})`)
                    }
                    return `
    --local-color-1: ${m[0]};
    --local-color-2: ${m[1]};
    --local-color-3: ${m[2]};
    --local-color-4: ${m[3]};
    --local-color-5: ${m[4]};
   `
                },
                hexToRgb(a) {
                    let s = parseInt(a, 16);
                    return [s >> 16 & 255, s >> 8 & 255, 255 & s]
                },
                tintColor(a, s) {
                    let [p, g, m] = a;
                    return [Math.round(p + (255 - p) * s), Math.round(g + (255 - g) * s), Math.round(m + (255 - m) * s)]
                },
                isNumber: a => /^[0-9]+$/u.test(a),
                getColorTheme: a => a || ("undefined" != typeof window && window.matchMedia ? window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light" : "dark")
            };
            var tE = E.iv `
  :host {
    display: flex;
    width: inherit;
    height: inherit;
  }
`,
                wui_flex_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tk = class extends E.oi {
                render() {
                    return this.style.cssText = `
      flex-direction: ${this.flexDirection};
      flex-wrap: ${this.flexWrap};
      flex-basis: ${this.flexBasis};
      flex-grow: ${this.flexGrow};
      flex-shrink: ${this.flexShrink};
      align-items: ${this.alignItems};
      justify-content: ${this.justifyContent};
      column-gap: ${this.columnGap&&`var(--wui-spacing-${this.columnGap})`};
      row-gap: ${this.rowGap&&`var(--wui-spacing-${this.rowGap})`};
      gap: ${this.gap&&`var(--wui-spacing-${this.gap})`};
      padding-top: ${this.padding&&t_.getSpacingStyles(this.padding,0)};
      padding-right: ${this.padding&&t_.getSpacingStyles(this.padding,1)};
      padding-bottom: ${this.padding&&t_.getSpacingStyles(this.padding,2)};
      padding-left: ${this.padding&&t_.getSpacingStyles(this.padding,3)};
      margin-top: ${this.margin&&t_.getSpacingStyles(this.margin,0)};
      margin-right: ${this.margin&&t_.getSpacingStyles(this.margin,1)};
      margin-bottom: ${this.margin&&t_.getSpacingStyles(this.margin,2)};
      margin-left: ${this.margin&&t_.getSpacingStyles(this.margin,3)};
    `, E.dy `<slot></slot>`
                }
            };
            tk.styles = [T, tE], wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "flexDirection", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "flexWrap", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "flexBasis", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "flexGrow", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "flexShrink", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "alignItems", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "justifyContent", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "columnGap", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "rowGap", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "gap", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "padding", void 0), wui_flex_decorate([(0, Q.Cb)()], tk.prototype, "margin", void 0), tk = wui_flex_decorate([customElement("wui-flex")], tk);
            var t$ = E.iv `
  :host {
    display: block;
    width: 64px;
    height: 64px;
    outline: 8px solid var(--wui-gray-glass-005);
    border-radius: var(--wui-border-radius-3xl);
    overflow: hidden;
    position: relative;
  }

  :host([data-variant='generated']) {
    --mixed-local-color-1: var(--local-color-1);
    --mixed-local-color-2: var(--local-color-2);
    --mixed-local-color-3: var(--local-color-3);
    --mixed-local-color-4: var(--local-color-4);
    --mixed-local-color-5: var(--local-color-5);
  }

  @supports (background: color-mix(in srgb, white 50%, black)) {
    :host([data-variant='generated']) {
      --mixed-local-color-1: color-mix(
        in srgb,
        var(--w3m-color-mix) var(--w3m-color-mix-strength),
        var(--local-color-1)
      );
      --mixed-local-color-2: color-mix(
        in srgb,
        var(--w3m-color-mix) var(--w3m-color-mix-strength),
        var(--local-color-2)
      );
      --mixed-local-color-3: color-mix(
        in srgb,
        var(--w3m-color-mix) var(--w3m-color-mix-strength),
        var(--local-color-3)
      );
      --mixed-local-color-4: color-mix(
        in srgb,
        var(--w3m-color-mix) var(--w3m-color-mix-strength),
        var(--local-color-4)
      );
      --mixed-local-color-5: color-mix(
        in srgb,
        var(--w3m-color-mix) var(--w3m-color-mix-strength),
        var(--local-color-5)
      );
    }
  }

  :host([data-variant='generated']) {
    outline: 8px solid var(--wui-avatar-border);
    background: radial-gradient(
      75.29% 75.29% at 64.96% 24.36%,
      #fff 0.52%,
      var(--mixed-local-color-5) 31.25%,
      var(--mixed-local-color-3) 51.56%,
      var(--mixed-local-color-2) 65.63%,
      var(--mixed-local-color-1) 82.29%,
      var(--mixed-local-color-4) 100%
    );
  }

  :host([data-variant='default']) {
    outline: 8px solid var(--wui-avatar-border);
    background: radial-gradient(
      75.29% 75.29% at 64.96% 24.36%,
      #fff 0.52%,
      #f5ccfc 31.25%,
      #dba4f5 51.56%,
      #9a8ee8 65.63%,
      #6493da 82.29%,
      #6ebdea 100%
    );
  }
`,
                wui_avatar_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tP = class extends E.oi {
                constructor() {
                    super(...arguments), this.imageSrc = void 0, this.alt = void 0, this.address = void 0
                }
                render() {
                    return E.dy `${this.visualTemplate()}`
                }
                visualTemplate() {
                    if (this.imageSrc) return this.dataset.variant = "image", E.dy `<wui-image src=${this.imageSrc} alt=${this.alt??"avatar"}></wui-image>`;
                    if (this.address) {
                        this.dataset.variant = "generated";
                        let a = t_.generateAvatarColors(this.address);
                        return this.style.cssText = a, null
                    }
                    return this.dataset.variant = "default", null
                }
            };
            tP.styles = [T, t$], wui_avatar_decorate([(0, Q.Cb)()], tP.prototype, "imageSrc", void 0), wui_avatar_decorate([(0, Q.Cb)()], tP.prototype, "alt", void 0), wui_avatar_decorate([(0, Q.Cb)()], tP.prototype, "address", void 0), tP = wui_avatar_decorate([customElement("wui-avatar")], tP);
            var tS = E.iv `
  :host {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    position: relative;
    overflow: hidden;
    background-color: var(--wui-gray-glass-020);
    border-radius: var(--local-border-radius);
    outline: var(--local-border);
    outline-offset: 0px;
    width: var(--local-size);
    height: var(--local-size);
    min-height: var(--local-size);
    min-width: var(--local-size);
  }

  @supports (background: color-mix(in srgb, white 50%, black)) {
    :host {
      background-color: color-mix(in srgb, var(--local-bg-value) var(--local-bg-mix), transparent);
    }
  }
`,
                wui_icon_box_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tA = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.backgroundColor = "accent-100", this.iconColor = "accent-100", this.background = "transparent", this.border = !1, this.borderColor = "wui-color-bg-125", this.icon = "copy"
                }
                render() {
                    let a = this.iconSize || this.size,
                        s = "lg" === this.size,
                        p = "gray" === this.background,
                        g = "opaque" === this.background,
                        m = "accent-100" === this.backgroundColor && g || "success-100" === this.backgroundColor && g || "error-100" === this.backgroundColor && g || "inverse-100" === this.backgroundColor && g,
                        v = `var(--wui-color-${this.backgroundColor})`;
                    return m ? v = `var(--wui-icon-box-bg-${this.backgroundColor})` : p && (v = `var(--wui-gray-${this.backgroundColor})`), this.style.cssText = `
       --local-bg-value: ${v};
       --local-bg-mix: ${m||p?"100%":s?"12%":"16%"};
       --local-border-radius: var(--wui-border-radius-${s?"xxs":"3xl"});
       --local-size: var(--wui-icon-box-size-${this.size});
       --local-border: ${"wui-color-bg-125"===this.borderColor?"2px":"1px"} solid ${this.border?`var(--${this.borderColor})`:"transparent"}
   `, E.dy ` <wui-icon color=${this.iconColor} size=${a} name=${this.icon}></wui-icon> `
                }
            };
            tA.styles = [T, F, tS], wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "size", void 0), wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "backgroundColor", void 0), wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "iconColor", void 0), wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "iconSize", void 0), wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "background", void 0), wui_icon_box_decorate([(0, Q.Cb)({
                type: Boolean
            })], tA.prototype, "border", void 0), wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "borderColor", void 0), wui_icon_box_decorate([(0, Q.Cb)()], tA.prototype, "icon", void 0), tA = wui_icon_box_decorate([customElement("wui-icon-box")], tA);
            var tO = E.iv `
  :host {
    display: block;
  }

  button {
    border-radius: var(--wui-border-radius-3xl);
    background: var(--wui-gray-glass-002);
    display: flex;
    gap: var(--wui-spacing-xs);
    padding: var(--wui-spacing-3xs) var(--wui-spacing-xs) var(--wui-spacing-3xs)
      var(--wui-spacing-xs);
    border: 1px solid var(--wui-gray-glass-005);
  }

  button:disabled {
    background: var(--wui-gray-glass-015);
  }

  button:disabled > wui-text {
    color: var(--wui-gray-glass-015);
  }

  button:disabled > wui-flex > wui-text {
    color: var(--wui-gray-glass-015);
  }

  button:disabled > wui-image,
  button:disabled > wui-icon-box,
  button:disabled > wui-flex > wui-avatar {
    filter: grayscale(1);
  }

  button:has(wui-image) {
    padding: var(--wui-spacing-3xs) var(--wui-spacing-3xs) var(--wui-spacing-3xs)
      var(--wui-spacing-xs);
  }

  wui-text {
    color: var(--wui-color-fg-100);
  }

  wui-flex > wui-text {
    color: var(--wui-color-fg-200);
    transition: all var(--wui-ease-out-power-1) var(--wui-duration-lg);
  }

  wui-image,
  wui-icon-box {
    border-radius: var(--wui-border-radius-3xl);
    width: 24px;
    height: 24px;
    outline: 2px solid var(--wui-gray-glass-005);
  }

  wui-flex {
    border-radius: var(--wui-border-radius-3xl);
    border: 1px solid var(--wui-gray-glass-005);
    background: var(--wui-gray-glass-005);
    padding: 4px var(--wui-spacing-m) 4px var(--wui-spacing-xxs);
  }

  wui-flex.local-no-balance {
    border-radius: 0px;
    border: none;
    background: transparent;
  }

  wui-avatar {
    width: 20px;
    height: 20px;
    outline: 2px solid var(--wui-gray-glass-010);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled > wui-flex > wui-text {
      color: var(--wui-color-fg-175);
    }

    button:active:enabled > wui-flex > wui-text {
      color: var(--wui-color-fg-175);
    }
  }
`,
                wui_account_button_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tR = class extends E.oi {
                constructor() {
                    super(...arguments), this.networkSrc = void 0, this.avatarSrc = void 0, this.balance = void 0, this.disabled = !1, this.isProfileName = !1, this.address = ""
                }
                render() {
                    return E.dy `
      <button ?disabled=${this.disabled}>
        ${this.balanceTemplate()}
        <wui-flex
          gap="xxs"
          alignItems="center"
          class=${(0,tx.o)(this.balance?void 0:"local-no-balance")}
        >
          <wui-avatar
            .imageSrc=${this.avatarSrc}
            alt=${this.address}
            address=${this.address}
          ></wui-avatar>
          <wui-text variant="paragraph-600" color="inherit">
            ${t_.getTruncateString({string:this.address,charsStart:this.isProfileName?18:4,charsEnd:this.isProfileName?0:6,truncate:this.isProfileName?"end":"middle"})}
          </wui-text>
        </wui-flex>
      </button>
    `
                }
                balanceTemplate() {
                    if (this.balance) {
                        let a = this.networkSrc ? E.dy `<wui-image src=${this.networkSrc}></wui-image>` : E.dy `
            <wui-icon-box
              size="sm"
              iconColor="fg-200"
              backgroundColor="fg-300"
              icon="networkPlaceholder"
            ></wui-icon-box>
          `;
                        return E.dy `
        ${a}
        <wui-text variant="paragraph-600" color="inherit"> ${this.balance} </wui-text>
      `
                    }
                    return null
                }
            };
            tR.styles = [T, F, tO], wui_account_button_decorate([(0, Q.Cb)()], tR.prototype, "networkSrc", void 0), wui_account_button_decorate([(0, Q.Cb)()], tR.prototype, "avatarSrc", void 0), wui_account_button_decorate([(0, Q.Cb)()], tR.prototype, "balance", void 0), wui_account_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tR.prototype, "disabled", void 0), wui_account_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tR.prototype, "isProfileName", void 0), wui_account_button_decorate([(0, Q.Cb)()], tR.prototype, "address", void 0), tR = wui_account_button_decorate([customElement("wui-account-button")], tR);
            var tT = E.iv `
  :host {
    position: relative;
    border-radius: inherit;
    overflow: hidden;
    background-color: var(--wui-gray-glass-002);
    display: flex;
    justify-content: center;
    align-items: center;
    width: var(--local-size);
    height: var(--local-size);
    border-radius: var(--local-border-radius);
  }

  :host::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: inherit;
    border: 1px solid var(--wui-gray-glass-010);
    pointer-events: none;
  }

  :host([name='Extension'])::after {
    border: 1px solid var(--wui-accent-glass-010);
  }

  :host([data-wallet-icon='allWallets']) {
    background-color: var(--wui-all-wallets-bg-100);
  }

  :host([data-wallet-icon='allWallets'])::after {
    border: 1px solid var(--wui-accent-glass-010);
  }

  wui-icon[data-parent-size='inherit'] {
    width: 75%;
    height: 75%;
    align-items: center;
  }

  wui-icon[data-parent-size='sm'] {
    width: 18px;
    height: 18px;
  }

  wui-icon[data-parent-size='md'] {
    width: 24px;
    height: 24px;
  }

  wui-icon[data-parent-size='lg'] {
    width: 42px;
    height: 42px;
  }

  wui-icon[data-parent-size='full'] {
    width: 100%;
    height: 100%;
  }
`,
                wui_wallet_image_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tI = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.name = ""
                }
                render() {
                    let a = "xxs";
                    return a = "lg" === this.size ? "m" : "md" === this.size ? "xs" : "xxs", this.style.cssText = `
       --local-border-radius: var(--wui-border-radius-${a});
       --local-size: var(--wui-wallet-image-size-${this.size});
   `, this.walletIcon && (this.dataset.walletIcon = this.walletIcon), E.dy ` ${this.templateVisual()}`
                }
                templateVisual() {
                    return this.imageSrc ? E.dy `<wui-image src=${this.imageSrc} alt=${this.name}></wui-image>` : this.walletIcon ? E.dy `<wui-icon
        data-parent-size="md"
        size="md"
        color="inherit"
        name=${this.walletIcon}
      ></wui-icon>` : E.dy `<wui-icon
      data-parent-size=${this.size}
      size="inherit"
      color="inherit"
      name="walletPlaceholder"
    ></wui-icon>`
                }
            };
            tI.styles = [T, tT], wui_wallet_image_decorate([(0, Q.Cb)()], tI.prototype, "size", void 0), wui_wallet_image_decorate([(0, Q.Cb)()], tI.prototype, "name", void 0), wui_wallet_image_decorate([(0, Q.Cb)()], tI.prototype, "imageSrc", void 0), wui_wallet_image_decorate([(0, Q.Cb)()], tI.prototype, "walletIcon", void 0), tI = wui_wallet_image_decorate([customElement("wui-wallet-image")], tI);
            var tN = E.iv `
  :host {
    position: relative;
    border-radius: var(--wui-border-radius-xxs);
    width: 40px;
    height: 40px;
    overflow: hidden;
    background: var(--wui-gray-glass-002);
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--wui-spacing-4xs);
    padding: 3.75px !important;
  }

  :host::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: inherit;
    border: 1px solid var(--wui-gray-glass-010);
    pointer-events: none;
  }

  :host > wui-wallet-image {
    width: 14px;
    height: 14px;
    border-radius: var(--wui-border-radius-5xs);
  }
`,
                wui_all_wallets_image_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tj = class extends E.oi {
                constructor() {
                    super(...arguments), this.walletImages = []
                }
                render() {
                    let a = this.walletImages.length < 4;
                    return E.dy `${this.walletImages.slice(0,4).map(({src:a,walletName:s})=>E.dy` <
                        wui - wallet - image
                    size = "inherit"
                    imageSrc = $ {
                        a
                    }
                    name = $ {
                            (0, tx.o)(s)
                        } >
                        < /wui-wallet-image>
                    `)}
    ${a?[...Array(4-this.walletImages.length)].map(()=>E.dy` <wui-wallet-image size="inherit" name=""></wui-wallet-image>`):null}`
                }
            };
            tj.styles = [T, tN], wui_all_wallets_image_decorate([(0, Q.Cb)({
                type: Array
            })], tj.prototype, "walletImages", void 0), tj = wui_all_wallets_image_decorate([customElement("wui-all-wallets-image")], tj);
            var tM = E.iv `
  :host {
    width: var(--local-width);
    position: relative;
  }

  button {
    border: 1px solid var(--wui-gray-glass-010);
    border-radius: var(--wui-border-radius-m);
    width: var(--local-width);
  }

  button:disabled {
    border: 1px solid var(--wui-gray-glass-010);
  }

  button[data-size='sm'] {
    padding: 6px 12px;
  }

  ::slotted(*) {
    transition: opacity 200ms ease-in-out;
    opacity: var(--local-opacity-100);
  }

  button > wui-text {
    transition: opacity 200ms ease-in-out;
    opacity: var(--local-opacity-100);
  }

  button[data-size='md'] {
    padding: 9px var(--wui-spacing-l) 9px var(--wui-spacing-l);
  }

  wui-loading-spinner {
    position: absolute;
    left: 50%;
    top: 50%;
    transition: all 200ms ease-in-out;
    transform: translate(-50%, -50%);
    opacity: var(--local-opacity-000);
  }
`,
                wui_button_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tD = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.disabled = !1, this.fullWidth = !1, this.loading = !1, this.variant = "fill"
                }
                render() {
                    this.style.cssText = `
    --local-width: ${this.fullWidth?"100%":"auto"};
    --local-opacity-100: ${this.loading?0:1};
    --local-opacity-000: ${this.loading?1:0};`;
                    let a = "md" === this.size ? "paragraph-600" : "small-600";
                    return E.dy `
      <button
        data-variant=${this.variant}
        data-size=${this.size}
        ?disabled=${this.disabled||this.loading}
        ontouchstart
      >
        ${this.loadingTemplate()}
        <slot name="iconLeft"></slot>
        <wui-text variant=${a} color="inherit">
          <slot></slot>
        </wui-text>
        <slot name="iconRight"></slot>
      </button>
    `
                }
                loadingTemplate() {
                    return this.loading ? E.dy `<wui-loading-spinner color="fg-300"></wui-loading-spinner>` : E.dy ``
                }
            };
            tD.styles = [T, F, tM], wui_button_decorate([(0, Q.Cb)()], tD.prototype, "size", void 0), wui_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tD.prototype, "disabled", void 0), wui_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tD.prototype, "fullWidth", void 0), wui_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tD.prototype, "loading", void 0), wui_button_decorate([(0, Q.Cb)()], tD.prototype, "variant", void 0), tD = wui_button_decorate([customElement("wui-button")], tD);
            let tB = E.YP `<svg  viewBox="0 0 48 54" fill="none">
  <path
    d="M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z"
  />
</svg>`;
            var tU = E.iv `
  :host {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 76px;
    row-gap: var(--wui-spacing-xs);
    padding: var(--wui-spacing-xs) 10px;
    background-color: var(--wui-gray-glass-002);
    border-radius: clamp(0px, var(--wui-border-radius-xs), 20px);
    position: relative;
  }

  wui-shimmer[data-type='network'] {
    border: none;
    -webkit-clip-path: var(--wui-path-network);
    clip-path: var(--wui-path-network);
  }

  svg {
    position: absolute;
    width: 48px;
    height: 54px;
    z-index: 1;
  }

  svg > path {
    stroke: var(--wui-gray-glass-010);
    stroke-width: 1px;
  }
`,
                wui_card_select_loader_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tF = class extends E.oi {
                constructor() {
                    super(...arguments), this.type = "wallet"
                }
                render() {
                    return E.dy `
      ${this.shimmerTemplate()}
      <wui-shimmer width="56px" height="20px" borderRadius="xs"></wui-shimmer>
    `
                }
                shimmerTemplate() {
                    return "network" === this.type ? E.dy ` <wui-shimmer
          data-type=${this.type}
          width="48px"
          height="54px"
          borderRadius="xs"
        ></wui-shimmer>
        ${tB}` : E.dy `<wui-shimmer width="56px" height="56px" borderRadius="xs"></wui-shimmer>`
                }
            };
            tF.styles = [T, F, tU], wui_card_select_loader_decorate([(0, Q.Cb)()], tF.prototype, "type", void 0), tF = wui_card_select_loader_decorate([customElement("wui-card-select-loader")], tF);
            let tL = E.YP `<svg width="86" height="96" fill="none">
  <path
    d="M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z"
  />
</svg>`;
            var tW = E.iv `
  :host {
    position: relative;
    border-radius: inherit;
    display: flex;
    justify-content: center;
    align-items: center;
    width: var(--local-width);
    height: var(--local-height);
  }

  svg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    fill: var(--wui-gray-glass-002);
  }

  svg > path {
    stroke: var(--local-stroke);
    transition: stroke var(--wui-ease-out-power-1) var(--wui-duration-lg);
  }

  wui-image {
    width: 100%;
    height: 100%;
    -webkit-clip-path: var(--local-path);
    clip-path: var(--local-path);
    background: var(--wui-gray-glass-002);
  }

  wui-icon {
    transform: translateY(-5%);
    width: var(--local-icon-size);
    height: var(--local-icon-size);
  }
`,
                wui_network_image_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tz = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.name = "uknown", this.selected = !1
                }
                render() {
                    let a = "lg" === this.size;
                    return this.style.cssText = `
      --local-stroke: ${this.selected?"var(--wui-color-accent-100)":"var(--wui-gray-glass-010)"};
      --local-path: ${a?"var(--wui-path-network-lg)":"var(--wui-path-network)"};
      --local-width: ${a?"86px":"48px"};
      --local-height: ${a?"96px":"54px"};
      --local-icon-size: ${a?"42px":"24px"};
    `, E.dy `${this.templateVisual()} ${a?tL:tB}`
                }
                templateVisual() {
                    return this.imageSrc ? E.dy `<wui-image src=${this.imageSrc} alt=${this.name}></wui-image>` : E.dy `<wui-icon size="inherit" color="fg-200" name="networkPlaceholder"></wui-icon>`
                }
            };
            tz.styles = [T, tW], wui_network_image_decorate([(0, Q.Cb)()], tz.prototype, "size", void 0), wui_network_image_decorate([(0, Q.Cb)()], tz.prototype, "name", void 0), wui_network_image_decorate([(0, Q.Cb)()], tz.prototype, "imageSrc", void 0), wui_network_image_decorate([(0, Q.Cb)({
                type: Boolean
            })], tz.prototype, "selected", void 0), tz = wui_network_image_decorate([customElement("wui-network-image")], tz);
            var tq = E.iv `
  button {
    flex-direction: column;
    width: 76px;
    row-gap: var(--wui-spacing-xs);
    padding: var(--wui-spacing-xs) var(--wui-spacing-0);
    background-color: var(--wui-gray-glass-002);
    border-radius: clamp(0px, var(--wui-border-radius-xs), 20px);
  }

  button > wui-text {
    color: var(--wui-color-fg-100);
    max-width: 64px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    justify-content: center;
  }

  button:disabled > wui-text {
    color: var(--wui-gray-glass-015);
  }

  [data-selected='true'] {
    background-color: var(--wui-accent-glass-020);
  }

  @media (hover: hover) and (pointer: fine) {
    [data-selected='true']:hover:enabled {
      background-color: var(--wui-accent-glass-015);
    }
  }

  [data-selected='true']:active:enabled {
    background-color: var(--wui-accent-glass-010);
  }
`,
                wui_card_select_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tH = class extends E.oi {
                constructor() {
                    super(...arguments), this.name = "Unknown", this.type = "wallet", this.imageSrc = void 0, this.disabled = !1, this.selected = !1
                }
                render() {
                    return E.dy `
      <button data-selected=${(0,tx.o)(this.selected)} ?disabled=${this.disabled} ontouchstart>
        ${this.imageTemplate()}
        <wui-text variant="tiny-500" color=${this.selected?"accent-100":"inherit"}>
          ${this.name}
        </wui-text>
      </button>
    `
                }
                imageTemplate() {
                    return "network" === this.type ? E.dy `
        <wui-network-image
          .selected=${this.selected}
          imageSrc=${(0,tx.o)(this.imageSrc)}
          name=${this.name}
        >
        </wui-network-image>
      ` : E.dy `
      <wui-wallet-image size="md" imageSrc=${(0,tx.o)(this.imageSrc)} name=${this.name}>
      </wui-wallet-image>
    `
                }
            };
            tH.styles = [T, F, tq], wui_card_select_decorate([(0, Q.Cb)()], tH.prototype, "name", void 0), wui_card_select_decorate([(0, Q.Cb)()], tH.prototype, "type", void 0), wui_card_select_decorate([(0, Q.Cb)()], tH.prototype, "imageSrc", void 0), wui_card_select_decorate([(0, Q.Cb)({
                type: Boolean
            })], tH.prototype, "disabled", void 0), wui_card_select_decorate([(0, Q.Cb)({
                type: Boolean
            })], tH.prototype, "selected", void 0), tH = wui_card_select_decorate([customElement("wui-card-select")], tH);
            var tG = E.iv `
  a {
    border: 1px solid var(--wui-gray-glass-010);
    border-radius: var(--wui-border-radius-3xl);
  }

  wui-image {
    border-radius: var(--wui-border-radius-3xl);
    overflow: hidden;
  }

  a.disabled > wui-icon,
  a.disabled > wui-image {
    filter: grayscale(1);
  }

  a[data-variant='fill'] {
    color: var(--wui-color-inverse-100);
    background-color: var(--wui-color-accent-100);
  }

  a[data-variant='shade'] {
    background-color: transparent;
    background-color: var(--wui-gray-glass-010);
    color: var(--wui-color-fg-200);
  }

  a[data-variant='transparent'] {
    column-gap: var(--wui-spacing-xxs);
    background-color: transparent;
    padding: 7px var(--wui-spacing-s) 7px 10px;
    color: var(--wui-color-fg-150);
  }

  a[data-variant='transparent']:has(wui-text:first-child) {
    padding: 7px var(--wui-spacing-s);
  }

  a[data-variant='fill'],
  a[data-variant='shade'] {
    column-gap: var(--wui-spacing-xs);
    padding: var(--wui-spacing-xxs) var(--wui-spacing-m) var(--wui-spacing-xxs)
      var(--wui-spacing-xs);
  }

  a[data-variant='fill']:has(wui-text:first-child),
  a[data-variant='shade']:has(wui-text:first-child) {
    padding: 8.5px var(--wui-spacing-m) 9.5px var(--wui-spacing-m);
  }

  a[data-variant='fill'] > wui-image,
  a[data-variant='shade'] > wui-image {
    width: 24px;
    height: 24px;
  }

  a[data-variant='fill'] > wui-image {
    border: 1px solid var(--wui-color-accent-090);
  }

  a[data-variant='shade'] > wui-image {
    border: 1px solid var(--wui-gray-glass-010);
  }

  a[data-variant='fill'] > wui-icon,
  a[data-variant='shade'] > wui-icon {
    width: 14px;
    height: 14px;
  }

  a[data-variant='transparent'] > wui-image {
    width: 14px;
    height: 14px;
  }

  a[data-variant='transparent'] > wui-icon {
    width: 12px;
    height: 12px;
  }

  a[data-variant='fill']:focus-visible {
    background-color: var(--wui-color-accent-090);
  }

  a[data-variant='shade']:focus-visible {
    background-color: var(--wui-gray-glass-015);
  }

  a[data-variant='transparent']:focus-visible {
    background-color: var(--wui-gray-glass-005);
  }

  a.disabled {
    color: var(--wui-gray-glass-015);
    background-color: var(--wui-gray-glass-015);
    pointer-events: none;
  }

  @media (hover: hover) and (pointer: fine) {
    a[data-variant='fill']:hover {
      background-color: var(--wui-color-accent-090);
    }

    a[data-variant='shade']:hover {
      background-color: var(--wui-gray-glass-015);
    }

    a[data-variant='transparent']:hover {
      background-color: var(--wui-gray-glass-005);
    }
  }

  a[data-variant='fill']:active {
    background-color: var(--wui-color-accent-080);
  }

  a[data-variant='shade']:active {
    background-color: var(--wui-gray-glass-020);
  }

  a[data-variant='transparent']:active {
    background-color: var(--wui-gray-glass-010);
  }
`,
                wui_chip_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tZ = class extends E.oi {
                constructor() {
                    super(...arguments), this.variant = "fill", this.imageSrc = void 0, this.disabled = !1, this.icon = "externalLink", this.href = ""
                }
                render() {
                    let a = "transparent" === this.variant ? "small-600" : "paragraph-600";
                    return E.dy `
      <a
        rel="noreferrer"
        target="_blank"
        href=${this.href}
        class=${this.disabled?"disabled":""}
        data-variant=${this.variant}
      >
        ${this.imageTemplate()}
        <wui-text variant=${a} color="inherit">
          ${t_.getHostName(this.href)}
        </wui-text>
        <wui-icon name=${this.icon} color="inherit" size="inherit"></wui-icon>
      </a>
    `
                }
                imageTemplate() {
                    return this.imageSrc ? E.dy `<wui-image src=${this.imageSrc}></wui-image>` : null
                }
            };
            tZ.styles = [T, F, tG], wui_chip_decorate([(0, Q.Cb)()], tZ.prototype, "variant", void 0), wui_chip_decorate([(0, Q.Cb)()], tZ.prototype, "imageSrc", void 0), wui_chip_decorate([(0, Q.Cb)({
                type: Boolean
            })], tZ.prototype, "disabled", void 0), wui_chip_decorate([(0, Q.Cb)()], tZ.prototype, "icon", void 0), wui_chip_decorate([(0, Q.Cb)()], tZ.prototype, "href", void 0), tZ = wui_chip_decorate([customElement("wui-chip")], tZ);
            var tK = E.iv `
  :host {
    position: relative;
    display: block;
  }

  button {
    background: var(--wui-color-accent-100);
    border: 1px solid var(--wui-gray-glass-010);
    border-radius: var(--wui-border-radius-m);
    gap: var(--wui-spacing-xs);
  }

  button.loading {
    background: var(--wui-gray-glass-010);
    border: 1px solid var(--wui-gray-glass-010);
    pointer-events: none;
  }

  button:disabled {
    background-color: var(--wui-gray-glass-015);
    border: 1px solid var(--wui-gray-glass-010);
  }

  button:disabled > wui-text {
    color: var(--wui-gray-glass-015);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-accent-090);
    }

    button:active:enabled {
      background-color: var(--wui-color-accent-080);
    }
  }

  button:focus-visible {
    border: 1px solid var(--wui-gray-glass-010);
    background-color: var(--wui-color-accent-090);
    -webkit-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    -moz-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
  }

  button[data-size='sm'] {
    padding: 6.75px 10px 7.25px;
  }

  ::slotted(*) {
    transition: opacity 200ms ease-in-out;
    opacity: var(--local-opacity-100);
  }

  button > wui-text {
    transition: opacity 200ms ease-in-out;
    opacity: var(--local-opacity-100);
    color: var(--wui-color-inverse-100);
  }

  button[data-size='md'] {
    padding: 9px var(--wui-spacing-l) 9px var(--wui-spacing-l);
  }

  button[data-size='md'] + wui-text {
    padding-left: var(--wui-spacing-3xs);
  }

  wui-loading-spinner {
    width: 14px;
    height: 14px;
  }

  wui-loading-spinner::slotted(svg) {
    width: 10px !important;
    height: 10px !important;
  }

  button[data-size='sm'] > wui-loading-spinner {
    width: 12px;
    height: 12px;
  }
`,
                wui_connect_button_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tV = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.loading = !1
                }
                render() {
                    let a = "md" === this.size ? "paragraph-600" : "small-600";
                    return E.dy `
      <button data-size=${this.size} ?disabled=${this.loading} ontouchstart>
        ${this.loadingTemplate()}
        <wui-text variant=${a} color=${this.loading?"accent-100":"inherit"}>
          <slot></slot>
        </wui-text>
      </button>
    `
                }
                loadingTemplate() {
                    return this.loading ? E.dy `<wui-loading-spinner size=${this.size} color="accent-100"></wui-loading-spinner>` : null
                }
            };
            tV.styles = [T, F, tK], wui_connect_button_decorate([(0, Q.Cb)()], tV.prototype, "size", void 0), wui_connect_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tV.prototype, "loading", void 0), tV = wui_connect_button_decorate([customElement("wui-connect-button")], tV);
            var tQ = E.iv `
  wui-flex {
    width: 100%;
    background-color: var(--wui-gray-glass-002);
    border-radius: var(--wui-border-radius-xs);
  }
`,
                wui_cta_button_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tY = class extends E.oi {
                constructor() {
                    super(...arguments), this.disabled = !1, this.label = "", this.buttonLabel = ""
                }
                render() {
                    return E.dy `
      <wui-flex
        justifyContent="space-between"
        alignItems="center"
        .padding=${["1xs","2l","1xs","2l"]}
      >
        <wui-text variant="paragraph-500" colo="fg-200">${this.label}</wui-text>
        <wui-button size="sm" variant="accent">
          ${this.buttonLabel}
          <wui-icon size="sm" color="inherit" slot="iconRight" name="chevronRight"></wui-icon>
        </wui-button>
      </wui-flex>
    `
                }
            };
            tY.styles = [T, F, tQ], wui_cta_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], tY.prototype, "disabled", void 0), wui_cta_button_decorate([(0, Q.Cb)()], tY.prototype, "label", void 0), wui_cta_button_decorate([(0, Q.Cb)()], tY.prototype, "buttonLabel", void 0), tY = wui_cta_button_decorate([customElement("wui-cta-button")], tY);
            /**
             * @license
             * Copyright 2020 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let {
                D: tX
            } = tr._$LH, directive_helpers_f = a => void 0 === a.strings, async_directive_s = (a, s) => {
                let p = a._$AN;
                if (void 0 === p) return !1;
                for (let a of p) a._$AO ? .(s, !1), async_directive_s(a, s);
                return !0
            }, o = a => {
                let s, p;
                do {
                    if (void 0 === (s = a._$AM)) break;
                    (p = s._$AN).delete(a), a = s
                } while (0 === p ? .size)
            }, async_directive_r = a => {
                for (let s; s = a._$AM; a = s) {
                    let p = s._$AN;
                    if (void 0 === p) s._$AN = p = new Set;
                    else if (p.has(a)) break;
                    p.add(a), async_directive_c(s)
                }
            };

            function async_directive_h(a) {
                void 0 !== this._$AN ? (o(this), this._$AM = a, async_directive_r(this)) : this._$AM = a
            }

            function async_directive_n(a, s = !1, p = 0) {
                let g = this._$AH,
                    m = this._$AN;
                if (void 0 !== m && 0 !== m.size) {
                    if (s) {
                        if (Array.isArray(g))
                            for (let a = p; a < g.length; a++) async_directive_s(g[a], !1), o(g[a]);
                        else null != g && (async_directive_s(g, !1), o(g))
                    } else async_directive_s(this, a)
                }
            }
            let async_directive_c = a => {
                2 == a.type && (a._$AP ? ? = async_directive_n, a._$AQ ? ? = async_directive_h)
            };
            let f = class f extends i {
                constructor() {
                    super(...arguments), this._$AN = void 0
                }
                _$AT(a, s, p) {
                    super._$AT(a, s, p), async_directive_r(this), this.isConnected = a._$AU
                }
                _$AO(a, s = !0) {
                    a !== this.isConnected && (this.isConnected = a, a ? this.reconnected ? .() : this.disconnected ? .()), s && (async_directive_s(this, a), o(this))
                }
                setValue(a) {
                    if (directive_helpers_f(this._$Ct)) this._$Ct._$AI(a, this);
                    else {
                        let s = [...this._$Ct._$AH];
                        s[this._$Ci] = a, this._$Ct._$AI(s, this, 0)
                    }
                }
                disconnected() {}
                reconnected() {}
            };
            /**
             * @license
             * Copyright 2020 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let ref_e = () => new ref_h;
            let ref_h = class ref_h {};
            let tJ = new WeakMap,
                t0 = e(class extends f {
                    render(a) {
                        return tr.Ld
                    }
                    update(a, [s]) {
                        let p = s !== this.G;
                        return p && void 0 !== this.G && this.ot(void 0), (p || this.rt !== this.lt) && (this.G = s, this.ct = a.options ? .host, this.ot(this.lt = a.element)), tr.Ld
                    }
                    ot(a) {
                        if ("function" == typeof this.G) {
                            let s = this.ct ? ? globalThis,
                                p = tJ.get(s);
                            void 0 === p && (p = new WeakMap, tJ.set(s, p)), void 0 !== p.get(this.G) && this.G.call(this.ct, void 0), p.set(this.G, a), void 0 !== a && this.G.call(this.ct, a)
                        } else this.G.value = a
                    }
                    get rt() {
                        return "function" == typeof this.G ? tJ.get(this.ct ? ? globalThis) ? .get(this.G) : this.G ? .value
                    }
                    disconnected() {
                        this.rt === this.lt && this.ot(void 0)
                    }
                    reconnected() {
                        this.ot(this.lt)
                    }
                });
            var t1 = E.iv `
  :host {
    position: relative;
    width: 100%;
    display: inline-block;
    color: var(--wui-color-fg-275);
  }

  input {
    width: 100%;
    border-radius: var(--wui-border-radius-xxs);
    border: 1px solid var(--wui-gray-glass-005);
    background: var(--wui-gray-glass-005);
    font-size: var(--wui-font-size-paragraph);
    font-weight: var(--wui-font-weight-regular);
    letter-spacing: var(--wui-letter-spacing-paragraph);
    color: var(--wui-color-fg-100);
    transition: all var(--wui-ease-inout-power-1) var(--wui-duration-lg);
    caret-color: var(--wui-color-accent-100);
  }

  input:disabled {
    cursor: not-allowed;
    border: 1px solid var(--wui-gray-glass-010);
    background: var(--wui-gray-glass-015);
  }

  input:disabled::placeholder,
  input:disabled + wui-icon {
    color: var(--wui-color-fg-300);
  }

  input::placeholder {
    color: var(--wui-color-fg-275);
  }

  input:focus:enabled {
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-sm);
    background-color: var(--wui-gray-glass-010);
    border: 1px solid var(--wui-color-accent-100);
    -webkit-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    -moz-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
  }

  input:hover:enabled {
    background-color: var(--wui-gray-glass-010);
  }

  wui-icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
  }

  .wui-size-sm {
    padding: 9px var(--wui-spacing-m) 10px var(--wui-spacing-s);
  }

  wui-icon + .wui-size-sm {
    padding: 9px var(--wui-spacing-m) 10px 36px;
  }

  wui-icon[data-input='sm'] {
    left: var(--wui-spacing-s);
  }

  .wui-size-md {
    padding: 15px var(--wui-spacing-m) var(--wui-spacing-l) var(--wui-spacing-m);
  }

  wui-icon + .wui-size-md {
    padding: 15px var(--wui-spacing-m) var(--wui-spacing-l) 42px;
  }

  wui-icon[data-input='md'] {
    left: var(--wui-spacing-m);
  }

  input:placeholder-shown ~ ::slotted(wui-input-element),
  input:placeholder-shown ~ ::slotted(wui-icon) {
    opacity: 0;
    pointer-events: none;
  }

  ::slotted(wui-input-element),
  ::slotted(wui-icon) {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    transition: all var(--wui-ease-in-power-2) var(--wui-duration-md);
  }

  ::slotted(wui-input-element) {
    right: var(--wui-spacing-m);
  }

  ::slotted(wui-icon) {
    right: 0px;
  }
`,
                wui_input_text_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let t2 = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.disabled = !1, this.placeholder = "", this.type = "text", this.inputElementRef = ref_e()
                }
                render() {
                    let a = `wui-size-${this.size}`;
                    return E.dy ` ${this.templateIcon()}
      <input
        ${t0(this.inputElementRef)}
        class=${a}
        type=${this.type}
        enterkeyhint=${(0,tx.o)(this.enterKeyHint)}
        ?disabled=${this.disabled}
        placeholder=${this.placeholder}
        @input=${this.dispatchInputChangeEvent.bind(this)}
      />
      <slot></slot>`
                }
                templateIcon() {
                    return this.icon ? E.dy `<wui-icon
        data-input=${this.size}
        size="md"
        color="inherit"
        name=${this.icon}
      ></wui-icon>` : null
                }
                dispatchInputChangeEvent() {
                    this.dispatchEvent(new CustomEvent("inputChange", {
                        detail: this.inputElementRef.value ? .value,
                        bubbles: !0,
                        composed: !0
                    }))
                }
            };
            t2.styles = [T, F, t1], wui_input_text_decorate([(0, Q.Cb)()], t2.prototype, "size", void 0), wui_input_text_decorate([(0, Q.Cb)()], t2.prototype, "icon", void 0), wui_input_text_decorate([(0, Q.Cb)({
                type: Boolean
            })], t2.prototype, "disabled", void 0), wui_input_text_decorate([(0, Q.Cb)()], t2.prototype, "placeholder", void 0), wui_input_text_decorate([(0, Q.Cb)()], t2.prototype, "type", void 0), wui_input_text_decorate([(0, Q.Cb)()], t2.prototype, "keyHint", void 0), t2 = wui_input_text_decorate([customElement("wui-input-text")], t2);
            var t5 = E.iv `
  :host {
    position: relative;
    display: inline-block;
  }

  wui-icon {
    padding: var(--wui-spacing-xl);
    cursor: pointer;
    transition: all var(--wui-duration-lg) var(--wui-ease-in-power-1);
  }

  wui-icon:hover {
    color: var(--wui-color-fg-200) !important;
  }

  wui-icon::part(chevronRight) {
    width: 12px;
    height: 12px;
  }

  wui-text {
    margin: var(--wui-spacing-xxs) var(--wui-spacing-m) var(--wui-spacing-0) var(--wui-spacing-m);
  }
`,
                wui_email_input_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let t3 = class extends E.oi {
                render() {
                    return E.dy `
      <wui-input-text placeholder="Email" icon="mail" size="md">
        <wui-icon size="inherit" color="fg-100" name="chevronRight"></wui-icon>
      </wui-input-text>
      ${this.templateError()}
    `
                }
                templateError() {
                    return this.errorMessage ? E.dy `<wui-text variant="tiny-500" color="error-100">${this.errorMessage}</wui-text>` : null
                }
            };
            t3.styles = [T, t5], wui_email_input_decorate([(0, Q.Cb)()], t3.prototype, "errorMessage", void 0), t3 = wui_email_input_decorate([customElement("wui-email-input")], t3);
            var t4 = E.iv `
  button {
    border-radius: var(--wui-border-radius-xxs);
    color: var(--wui-color-fg-100);
    padding: var(--wui-spacing-2xs);
  }

  @media (max-width: 700px) {
    button {
      padding: var(--wui-spacing-s);
    }
  }

  button > wui-icon {
    pointer-events: none;
  }

  button:disabled > wui-icon {
    color: var(--wui-color-bg-300) !important;
  }

  button:disabled {
    background-color: transparent;
  }
`,
                wui_icon_link_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let t6 = class extends E.oi {
                constructor() {
                    super(...arguments), this.size = "md", this.disabled = !1, this.icon = "copy", this.iconColor = "inherit"
                }
                render() {
                    return E.dy `
      <button ?disabled=${this.disabled} ontouchstart>
        <wui-icon color=${this.iconColor} size=${this.size} name=${this.icon}></wui-icon>
      </button>
    `
                }
            };
            t6.styles = [T, F, W, t4], wui_icon_link_decorate([(0, Q.Cb)()], t6.prototype, "size", void 0), wui_icon_link_decorate([(0, Q.Cb)({
                type: Boolean
            })], t6.prototype, "disabled", void 0), wui_icon_link_decorate([(0, Q.Cb)()], t6.prototype, "icon", void 0), wui_icon_link_decorate([(0, Q.Cb)()], t6.prototype, "iconColor", void 0), t6 = wui_icon_link_decorate([customElement("wui-icon-link")], t6);
            var t8 = E.iv `
  button {
    background-color: var(--wui-color-fg-300);
    border-radius: var(--wui-border-radius-4xs);
    width: 16px;
    height: 16px;
  }

  button:disabled {
    background-color: var(--wui-color-bg-300);
  }

  wui-icon {
    color: var(--wui-color-bg-200) !important;
  }

  button:focus-visible {
    background-color: var(--wui-color-fg-250);
    border: 1px solid var(--wui-color-accent-100);
  }

  button:active:enabled {
    background-color: var(--wui-color-fg-225);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-fg-250);
    }
  }
`,
                wui_input_element_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let t9 = class extends E.oi {
                constructor() {
                    super(...arguments), this.icon = "copy"
                }
                render() {
                    return E.dy `
      <button>
        <wui-icon color="inherit" size="xxs" name=${this.icon}></wui-icon>
      </button>
    `
                }
            };
            t9.styles = [T, F, t8], wui_input_element_decorate([(0, Q.Cb)()], t9.prototype, "icon", void 0), t9 = wui_input_element_decorate([customElement("wui-input-element")], t9);
            var t7 = E.iv `
  :host {
    position: relative;
    display: inline-block;
  }

  input {
    width: 50px;
    height: 50px;
    background: var(--wui-gray-glass-005);
    border-radius: var(--wui-border-radius-xs);
    border: 1px solid var(--wui-gray-glass-005);
    font-family: var(--wui-font-family);
    font-size: var(--wui-font-size-large);
    font-weight: var(--wui-font-weight-regular);
    letter-spacing: var(--wui-letter-spacing-large);
    text-align: center;
    color: var(--wui-color-fg-100);
    caret-color: var(--wui-color-accent-100);
    transition: all var(--wui-ease-inout-power-1) var(--wui-duration-lg);
    box-sizing: border-box;
    -webkit-appearance: none;
    -moz-appearance: textfield;
    padding: 0px;
  }

  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield;
  }

  input:disabled {
    cursor: not-allowed;
    border: 1px solid var(--wui-gray-glass-010);
    background: var(--wui-gray-glass-015);
  }

  input:focus:enabled {
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-sm);
    background-color: var(--wui-gray-glass-010);
    border: 1px solid var(--wui-color-accent-100);
    -webkit-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    -moz-box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
    box-shadow: 0px 0px 0px 4px var(--wui-box-shadow-blue);
  }

  input:hover:enabled {
    background-color: var(--wui-gray-glass-010);
  }
`,
                wui_input_numeric_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rt = class extends E.oi {
                constructor() {
                    super(...arguments), this.disabled = !1
                }
                render() {
                    return E.dy `<input
      type="number"
      maxlength="1"
      inputmode="numeric"
      autofocus
      ?disabled=${this.disabled}
    /> `
                }
            };
            rt.styles = [T, F, t7], wui_input_numeric_decorate([(0, Q.Cb)({
                type: Boolean
            })], rt.prototype, "disabled", void 0), rt = wui_input_numeric_decorate([customElement("wui-input-numeric")], rt);
            var rr = E.iv `
  button {
    padding: var(--wui-spacing-4xs) var(--wui-spacing-xxs);
    border-radius: var(--wui-border-radius-3xs);
    background-color: transparent;
    color: var(--wui-color-accent-100);
  }

  button:disabled {
    background-color: transparent;
    color: var(--wui-gray-glass-015);
  }
`,
                wui_link_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let ri = class extends E.oi {
                constructor() {
                    super(...arguments), this.disabled = !1, this.color = "inherit"
                }
                render() {
                    return E.dy `
      <button ?disabled=${this.disabled} ontouchstart>
        <slot name="iconLeft"></slot>
        <wui-text variant="small-600" color=${this.color}>
          <slot></slot>
        </wui-text>
        <slot name="iconRight"></slot>
      </button>
    `
                }
            };
            ri.styles = [T, F, rr], wui_link_decorate([(0, Q.Cb)({
                type: Boolean
            })], ri.prototype, "disabled", void 0), wui_link_decorate([(0, Q.Cb)()], ri.prototype, "color", void 0), ri = wui_link_decorate([customElement("wui-link")], ri);
            var rn = E.iv `
  button {
    column-gap: var(--wui-spacing-s);
    padding: 11px 18px 11px var(--wui-spacing-s);
    width: 100%;
    background-color: var(--wui-gray-glass-002);
    border-radius: var(--wui-border-radius-xs);
    color: var(--wui-color-fg-250);
  }

  button[data-iconvariant='square'],
  button[data-iconvariant='square-blue'] {
    padding: 6px 18px 6px 9px;
  }

  button > wui-flex {
    flex: 1;
  }

  button > wui-image {
    width: 32px;
    height: 32px;
    outline: 2px solid var(--wui-gray-glass-005);
    border-radius: var(--wui-border-radius-3xl);
  }

  button > wui-icon {
    width: 36px;
    height: 36px;
  }

  button > wui-icon-box[data-variant='blue'] {
    outline: 2px solid var(--wui-accent-glass-005);
  }

  button > wui-icon-box[data-variant='overlay'] {
    outline: 2px solid var(--wui-gray-glass-005);
  }

  button > wui-icon-box[data-variant='square-blue'] {
    border-radius: var(--wui-border-radius-3xs);
    position: relative;
    border: none;
    width: 36px;
    height: 36px;
  }

  button > wui-icon-box[data-variant='square-blue']::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: inherit;
    border: 1px solid var(--wui-accent-glass-010);
    pointer-events: none;
  }

  button > wui-icon:last-child {
    width: 14px;
    height: 14px;
  }

  button:disabled {
    background-color: var(--wui-gray-glass-015);
    color: var(--wui-gray-glass-015);
  }

  button[data-loading='true'] > wui-icon {
    transition: opacity 200ms ease-in-out;
    opacity: 0;
  }

  wui-loading-spinner {
    position: absolute;
    right: 18px;
    top: 50%;
    transform: translateY(-50%);
  }
`,
                wui_list_item_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let ro = class extends E.oi {
                constructor() {
                    super(...arguments), this.variant = "icon", this.disabled = !1, this.imageSrc = void 0, this.alt = void 0, this.chevron = !1, this.loading = !1
                }
                render() {
                    return E.dy `
      <button
        ?disabled=${!!this.loading||!!this.disabled}
        data-loading=${this.loading}
        data-iconvariant=${(0,tx.o)(this.iconVariant)}
        ontouchstart
      >
        ${this.loadingTemplate()} ${this.visualTemplate()}
        <wui-flex gap="3xs">
          <slot></slot>
        </wui-flex>
        ${this.chevronTemplate()}
      </button>
    `
                }
                visualTemplate() {
                    if ("image" === this.variant && this.imageSrc) return E.dy `<wui-image src=${this.imageSrc} alt=${this.alt??"list item"}></wui-image>`;
                    if ("square" === this.iconVariant && this.icon && "icon" === this.variant) return E.dy `<wui-icon name=${this.icon}></wui-icon>`;
                    if ("icon" === this.variant && this.icon && this.iconVariant) {
                        let a = ["blue", "square-blue"].includes(this.iconVariant) ? "accent-100" : "fg-200",
                            s = "square-blue" === this.iconVariant ? "mdl" : "md",
                            p = this.iconSize ? this.iconSize : s;
                        return E.dy `
        <wui-icon-box
          data-variant=${this.iconVariant}
          icon=${this.icon}
          iconSize=${p}
          background="transparent"
          iconColor=${a}
          backgroundColor=${a}
          size=${s}
        ></wui-icon-box>
      `
                    }
                    return null
                }
                loadingTemplate() {
                    return this.loading ? E.dy `<wui-loading-spinner color="fg-300"></wui-loading-spinner>` : E.dy ``
                }
                chevronTemplate() {
                    return this.chevron ? E.dy `<wui-icon size="inherit" color="fg-200" name="chevronRight"></wui-icon>` : null
                }
            };
            ro.styles = [T, F, rn], wui_list_item_decorate([(0, Q.Cb)()], ro.prototype, "icon", void 0), wui_list_item_decorate([(0, Q.Cb)()], ro.prototype, "iconSize", void 0), wui_list_item_decorate([(0, Q.Cb)()], ro.prototype, "variant", void 0), wui_list_item_decorate([(0, Q.Cb)()], ro.prototype, "iconVariant", void 0), wui_list_item_decorate([(0, Q.Cb)({
                type: Boolean
            })], ro.prototype, "disabled", void 0), wui_list_item_decorate([(0, Q.Cb)()], ro.prototype, "imageSrc", void 0), wui_list_item_decorate([(0, Q.Cb)()], ro.prototype, "alt", void 0), wui_list_item_decorate([(0, Q.Cb)({
                type: Boolean
            })], ro.prototype, "chevron", void 0), wui_list_item_decorate([(0, Q.Cb)({
                type: Boolean
            })], ro.prototype, "loading", void 0), ro = wui_list_item_decorate([customElement("wui-list-item")], ro), (x = _ || (_ = {})).approve = "approved", x.bought = "bought", x.borrow = "borrowed", x.burn = "burnt", x.cancel = "canceled", x.claim = "claimed", x.deploy = "deployed", x.deposit = "deposited", x.execute = "executed", x.mint = "minted", x.receive = "received", x.repay = "repaid", x.send = "sent", x.sell = "sold", x.stake = "staked", x.trade = "swapped", x.unstake = "unstaked", x.withdraw = "withdrawn";
            var ra = E.iv `
  :host > wui-flex {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    width: 40px;
    height: 40px;
    outline: 1px solid var(--wui-gray-glass-005);
    outline-offset: -1px;
    background-color: var(--wui-gray-glass-005);
  }

  :host > wui-flex wui-image {
    display: block;
    z-index: -1;
  }

  :host > wui-flex,
  :host > wui-flex wui-image,
  .swap-images-container,
  .swap-images-container.nft,
  wui-image.nft {
    border-top-left-radius: var(--local-left-border-radius);
    border-top-right-radius: var(--local-right-border-radius);
    border-bottom-left-radius: var(--local-left-border-radius);
    border-bottom-right-radius: var(--local-right-border-radius);
  }

  wui-icon {
    width: 20px;
    height: 20px;
  }

  wui-icon-box {
    position: absolute;
    right: 0;
    bottom: 0;
    transform: translate(20%, 20%);
  }

  .swap-images-container {
    position: relative;
    width: 40px;
    height: 40px;
    overflow: hidden;
  }

  .swap-images-container wui-image:first-child {
    position: absolute;
    width: 40px;
    height: 40px;
    top: 0;
    left: 0%;
    clip-path: inset(0px calc(50% + 2px) 0px 0%);
  }

  .swap-images-container wui-image:last-child {
    clip-path: inset(0px 0px 0px calc(50% + 2px));
  }
`,
                wui_transaction_visual_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rs = class extends E.oi {
                constructor() {
                    super(...arguments), this.images = [], this.secondImage = {
                        type: void 0,
                        url: ""
                    }
                }
                render() {
                    let [a, s] = this.images, p = a ? .type === "NFT", g = s ? .url ? "NFT" === s.type : p;
                    return this.style.cssText = `
    --local-left-border-radius: ${p?"var(--wui-border-radius-xxs)":"var(--wui-border-radius-s)"};
    --local-right-border-radius: ${g?"var(--wui-border-radius-xxs)":"var(--wui-border-radius-s)"};
    `, E.dy `<wui-flex> ${this.templateVisual()} ${this.templateIcon()} </wui-flex>`
                }
                templateVisual() {
                    let [a, s] = this.images, p = a ? .type, g = 2 === this.images.length;
                    return g && (a ? .url || s ? .url) ? E.dy `<div class="swap-images-container">
        ${a?.url?E.dy`<wui-image src=${a.url} alt="Transaction image"></wui-image>`:null}
        ${s?.url?E.dy`<wui-image src=${s.url} alt="Transaction image"></wui-image>`:null}
      </div>` : a ? .url ? E.dy `<wui-image src=${a.url} alt="Transaction image"></wui-image>` : "NFT" === p ? E.dy `<wui-icon size="inherit" color="fg-200" name="nftPlaceholder"></wui-icon>` : E.dy `<wui-icon size="inherit" color="fg-200" name="coinPlaceholder"></wui-icon>`
                }
                templateIcon() {
                    let a, s = "accent-100";
                    return (a = this.getIcon(), this.status && (s = this.getStatusColor()), a) ? E.dy `
      <wui-icon-box
        size="xxs"
        iconColor=${s}
        backgroundColor=${s}
        background="opaque"
        icon=${a}
        ?border=${!0}
        borderColor="wui-color-bg-125"
      ></wui-icon-box>
    ` : null
                }
                getDirectionIcon() {
                    switch (this.direction) {
                        case "in":
                            return "arrowBottom";
                        case "out":
                            return "arrowTop";
                        default:
                            return
                    }
                }
                getIcon() {
                    return this.onlyDirectionIcon ? this.getDirectionIcon() : "trade" === this.type ? "swapHorizontalBold" : "approve" === this.type ? "checkmark" : "cancel" === this.type ? "close" : this.getDirectionIcon()
                }
                getStatusColor() {
                    switch (this.status) {
                        case "confirmed":
                            return "success-100";
                        case "failed":
                            return "error-100";
                        case "pending":
                            return "inverse-100";
                        default:
                            return "accent-100"
                    }
                }
            };
            rs.styles = [ra], wui_transaction_visual_decorate([(0, Q.Cb)()], rs.prototype, "type", void 0), wui_transaction_visual_decorate([(0, Q.Cb)()], rs.prototype, "status", void 0), wui_transaction_visual_decorate([(0, Q.Cb)()], rs.prototype, "direction", void 0), wui_transaction_visual_decorate([(0, Q.Cb)()], rs.prototype, "onlyDirectionIcon", void 0), wui_transaction_visual_decorate([(0, Q.Cb)()], rs.prototype, "images", void 0), wui_transaction_visual_decorate([(0, Q.Cb)()], rs.prototype, "secondImage", void 0), rs = wui_transaction_visual_decorate([customElement("wui-transaction-visual")], rs);
            var rl = E.iv `
  :host > wui-flex:first-child {
    align-items: center;
    column-gap: var(--wui-spacing-s);
    padding: 6.5px var(--wui-spacing-l) 6.5px var(--wui-spacing-xs);
    width: 100%;
  }

  :host > wui-flex:first-child wui-text:nth-child(1) {
    text-transform: capitalize;
  }

  wui-transaction-visual {
    width: 40px;
    height: 40px;
  }

  wui-flex {
    flex: 1;
  }

  :host wui-flex wui-flex {
    overflow: hidden;
  }

  :host .description-container wui-text span {
    word-break: break-all;
  }

  :host .description-container wui-text {
    overflow: hidden;
  }

  :host .description-separator-icon {
    margin: 0px 6px;
  }

  :host wui-text > span {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }
`,
                wui_transaction_list_item_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rc = class extends E.oi {
                constructor() {
                    super(...arguments), this.type = "approve", this.onlyDirectionIcon = !1, this.images = []
                }
                render() {
                    return E.dy `
      <wui-flex>
        <wui-transaction-visual
          status=${this.status}
          direction=${this.direction}
          type=${this.type}
          onlyDirectionIcon=${this.onlyDirectionIcon}
          .images=${this.images}
        ></wui-transaction-visual>
        <wui-flex flexDirection="column" gap="3xs">
          <wui-text variant="paragraph-600" color="fg-100">
            ${_[this.type]}
          </wui-text>
          <wui-flex class="description-container">
            ${this.templateDescription()} ${this.templateSecondDescription()}
          </wui-flex>
        </wui-flex>
        <wui-text variant="micro-700" color="fg-300"><span>${this.date}</span></wui-text>
      </wui-flex>
    `
                }
                templateDescription() {
                    let a = this.descriptions ? .[0];
                    return a ? E.dy `
          <wui-text variant="small-500" color="fg-200">
            <span>${a}</span>
          </wui-text>
        ` : null
                }
                templateSecondDescription() {
                    let a = this.descriptions ? .[1];
                    return a ? E.dy `
          <wui-icon class="description-separator-icon" size="xxs" name="arrowRight"></wui-icon>
          <wui-text variant="small-400" color="fg-200">
            <span>${a}</span>
          </wui-text>
        ` : null
                }
            };
            rc.styles = [T, rl], wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "type", void 0), wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "descriptions", void 0), wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "date", void 0), wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "onlyDirectionIcon", void 0), wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "status", void 0), wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "direction", void 0), wui_transaction_list_item_decorate([(0, Q.Cb)()], rc.prototype, "images", void 0), rc = wui_transaction_list_item_decorate([customElement("wui-transaction-list-item")], rc);
            var ru = E.iv `
  :host > wui-flex:first-child {
    column-gap: var(--wui-spacing-s);
    padding: 7px var(--wui-spacing-l) 7px var(--wui-spacing-xs);
    width: 100%;
  }

  wui-flex {
    display: flex;
    flex: 1;
  }
`;
            let rd = class extends E.oi {
                render() {
                    return E.dy `
      <wui-flex alignItems="center">
        <wui-shimmer width="40px" height="40px"></wui-shimmer>
        <wui-flex flexDirection="column" gap="2xs">
          <wui-shimmer width="72px" height="16px" borderRadius="4xs"></wui-shimmer>
          <wui-shimmer width="148px" height="14px" borderRadius="4xs"></wui-shimmer>
        </wui-flex>
        <wui-shimmer width="24px" height="12px" borderRadius="5xs"></wui-shimmer>
      </wui-flex>
    `
                }
            };
            rd.styles = [T, ru], rd = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([customElement("wui-transaction-list-item-loader")], rd);
            var rh = E.iv `
  :host {
    display: block;
    padding: 3.5px 5px !important;
    border-radius: var(--wui-border-radius-5xs);
  }

  :host([data-variant='main']) {
    background-color: var(--wui-accent-glass-015);
    color: var(--wui-color-accent-100);
  }

  :host([data-variant='shade']) {
    background-color: var(--wui-gray-glass-010);
    color: var(--wui-color-fg-200);
  }

  :host([data-variant='success']) {
    background-color: var(--wui-icon-box-bg-success-100);
    color: var(--wui-color-success-100);
  }

  :host([data-variant='error']) {
    background-color: var(--wui-icon-box-bg-error-100);
    color: var(--wui-color-error-100);
  }
`,
                wui_tag_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rp = class extends E.oi {
                constructor() {
                    super(...arguments), this.variant = "main"
                }
                render() {
                    return this.dataset.variant = this.variant, E.dy `
      <wui-text data-variant=${this.variant} variant="micro-700" color="inherit">
        <slot></slot>
      </wui-text>
    `
                }
            };
            rp.styles = [T, rh], wui_tag_decorate([(0, Q.Cb)()], rp.prototype, "variant", void 0), rp = wui_tag_decorate([customElement("wui-tag")], rp);
            var rf = E.iv `
  button {
    column-gap: var(--wui-spacing-s);
    padding: 7px var(--wui-spacing-l) 7px var(--wui-spacing-xs);
    width: 100%;
    background-color: var(--wui-gray-glass-002);
    border-radius: var(--wui-border-radius-xs);
    color: var(--wui-color-fg-100);
  }

  button > wui-text:nth-child(2) {
    display: flex;
    flex: 1;
  }

  wui-icon {
    color: var(--wui-color-fg-200) !important;
  }

  button:disabled {
    background-color: var(--wui-gray-glass-015);
    color: var(--wui-gray-glass-015);
  }

  button:disabled > wui-tag {
    background-color: var(--wui-gray-glass-010);
    color: var(--wui-color-fg-300);
  }
`,
                wui_list_wallet_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rg = class extends E.oi {
                constructor() {
                    super(...arguments), this.walletImages = [], this.imageSrc = "", this.name = "", this.disabled = !1, this.showAllWallets = !1
                }
                render() {
                    return E.dy `
      <button ?disabled=${this.disabled} ontouchstart>
        ${this.templateAllWallets()} ${this.templateWalletImage()}
        <wui-text variant="paragraph-500" color="inherit">${this.name}</wui-text>
        ${this.templateStatus()}
      </button>
    `
                }
                templateAllWallets() {
                    return this.showAllWallets && this.imageSrc ? E.dy ` <wui-all-wallets-image .imageeSrc=${this.imageSrc}> </wui-all-wallets-image> ` : this.showAllWallets && this.walletIcon ? E.dy ` <wui-wallet-image .walletIcon=${this.walletIcon} size="sm"> </wui-wallet-image> ` : null
                }
                templateWalletImage() {
                    return !this.showAllWallets && this.imageSrc ? E.dy `<wui-wallet-image
        size="sm"
        imageSrc=${this.imageSrc}
        name=${this.name}
      ></wui-wallet-image>` : this.showAllWallets || this.imageSrc ? null : E.dy `<wui-wallet-image size="sm" name=${this.name}></wui-wallet-image>`
                }
                templateStatus() {
                    return this.tagLabel && this.tagVariant ? E.dy `<wui-tag variant=${this.tagVariant}>${this.tagLabel}</wui-tag>` : this.icon ? E.dy `<wui-icon color="inherit" size="sm" name=${this.icon}></wui-icon>` : null
                }
            };
            rg.styles = [T, F, rf], wui_list_wallet_decorate([(0, Q.Cb)({
                type: Array
            })], rg.prototype, "walletImages", void 0), wui_list_wallet_decorate([(0, Q.Cb)()], rg.prototype, "imageSrc", void 0), wui_list_wallet_decorate([(0, Q.Cb)()], rg.prototype, "name", void 0), wui_list_wallet_decorate([(0, Q.Cb)()], rg.prototype, "tagLabel", void 0), wui_list_wallet_decorate([(0, Q.Cb)()], rg.prototype, "tagVariant", void 0), wui_list_wallet_decorate([(0, Q.Cb)()], rg.prototype, "icon", void 0), wui_list_wallet_decorate([(0, Q.Cb)()], rg.prototype, "walletIcon", void 0), wui_list_wallet_decorate([(0, Q.Cb)({
                type: Boolean
            })], rg.prototype, "disabled", void 0), wui_list_wallet_decorate([(0, Q.Cb)({
                type: Boolean
            })], rg.prototype, "showAllWallets", void 0), rg = wui_list_wallet_decorate([customElement("wui-list-wallet")], rg);
            var rw = E.iv `
  :host {
    display: block;
    width: 40px;
    height: 40px;
    border-radius: var(--wui-border-radius-3xl);
    border: 1px solid var(--wui-gray-glass-010);
    overflow: hidden;
  }

  wui-icon {
    width: 100%;
    height: 100%;
  }
`,
                wui_logo_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rm = class extends E.oi {
                constructor() {
                    super(...arguments), this.logo = "google"
                }
                render() {
                    return E.dy `<wui-icon color="inherit" size="inherit" name=${this.logo}></wui-icon> `
                }
            };
            rm.styles = [T, rw], wui_logo_decorate([(0, Q.Cb)()], rm.prototype, "logo", void 0), rm = wui_logo_decorate([customElement("wui-logo")], rm);
            var rb = E.iv `
  :host {
    display: block;
  }

  button {
    width: 50px;
    height: 50px;
    background: var(--wui-gray-glass-002);
    border-radius: var(--wui-border-radius-xs);
  }
`,
                wui_logo_select_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rv = class extends E.oi {
                constructor() {
                    super(...arguments), this.logo = "google", this.disabled = !1
                }
                render() {
                    return E.dy `
      <button ?disabled=${this.disabled} ontouchstart>
        <wui-logo logo=${this.logo}></wui-logo>
      </button>
    `
                }
            };
            rv.styles = [T, F, rb], wui_logo_select_decorate([(0, Q.Cb)()], rv.prototype, "logo", void 0), wui_logo_select_decorate([(0, Q.Cb)({
                type: Boolean
            })], rv.prototype, "disabled", void 0), rv = wui_logo_select_decorate([customElement("wui-logo-select")], rv);
            var ry = E.iv `
  :host {
    display: block;
  }

  button {
    border-radius: var(--wui-border-radius-3xl);
    display: flex;
    gap: var(--wui-spacing-xs);
    padding: var(--wui-spacing-2xs) var(--wui-spacing-s) var(--wui-spacing-2xs)
      var(--wui-spacing-xs);
    border: 1px solid var(--wui-gray-glass-010);
    background-color: var(--wui-gray-glass-005);
    color: var(--wui-color-fg-100);
  }

  button:disabled {
    border: 1px solid var(--wui-gray-glass-005);
    background-color: var(--wui-gray-glass-015);
    color: var(--wui-gray-glass-015);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-gray-glass-010);
    }

    button:active:enabled {
      background-color: var(--wui-gray-glass-015);
    }
  }

  wui-image,
  wui-icon-box {
    border-radius: var(--wui-border-radius-3xl);
    width: 24px;
    height: 24px;
    outline: 2px solid var(--wui-gray-glass-005);
  }
`,
                wui_network_button_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rC = class extends E.oi {
                constructor() {
                    super(...arguments), this.imageSrc = void 0, this.disabled = !1
                }
                render() {
                    return E.dy `
      <button ?disabled=${this.disabled}>
        ${this.visualTemplate()}
        <wui-text variant="paragraph-600" color="inherit">
          <slot></slot>
        </wui-text>
      </button>
    `
                }
                visualTemplate() {
                    return this.imageSrc ? E.dy `<wui-image src=${this.imageSrc}></wui-image>` : E.dy `
      <wui-icon-box
        size="sm"
        iconColor="inverse-100"
        backgroundColor="fg-100"
        icon="networkPlaceholder"
      ></wui-icon-box>
    `
                }
            };
            rC.styles = [T, F, ry], wui_network_button_decorate([(0, Q.Cb)()], rC.prototype, "imageSrc", void 0), wui_network_button_decorate([(0, Q.Cb)({
                type: Boolean
            })], rC.prototype, "disabled", void 0), rC = wui_network_button_decorate([customElement("wui-network-button")], rC);
            var rx = E.iv `
  :host {
    position: relative;
    display: block;
  }
`,
                wui_otp_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let r_ = class extends E.oi {
                constructor() {
                    super(...arguments), this.length = 6, this.numerics = [], this.handleKeyDown = (a, s) => {
                        let p = a.target,
                            g = this.getInputElement(p);
                        if (!g) return;
                        ["ArrowLeft", "ArrowRight", "Shift", "Delete"].includes(a.key) && a.preventDefault();
                        let m = g.selectionStart;
                        switch (a.key) {
                            case "ArrowLeft":
                                m && g.setSelectionRange(m + 1, m + 1), this.focusInputField("prev", s);
                                break;
                            case "ArrowRight":
                            case "Shift":
                                this.focusInputField("next", s);
                                break;
                            case "Delete":
                            case "Backspace":
                                "" === g.value ? this.focusInputField("prev", s) : g.value = ""
                        }
                    }, this.focusInputField = (a, s) => {
                        if ("next" === a) {
                            let a = s + 1,
                                p = this.numerics[a < this.length ? a : s],
                                g = p ? this.getInputElement(p) : void 0;
                            g && g.focus()
                        }
                        if ("prev" === a) {
                            let a = s - 1,
                                p = this.numerics[a > -1 ? a : s],
                                g = p ? this.getInputElement(p) : void 0;
                            g && g.focus()
                        }
                    }
                }
                firstUpdated() {
                    let a = this.shadowRoot ? .querySelectorAll("wui-input-numeric");
                    a && (this.numerics = Array.from(a))
                }
                render() {
                    return E.dy `
      <wui-flex gap="xxs">
        ${[...Array(this.length)].map((a,s)=>E.dy`
            <wui-input-numeric
              @input=${a=>this.handleInput(a,s)}
              @keydown=${a=>this.handleKeyDown(a,s)}
            >
            </wui-input-numeric>
          `)}
      </wui-flex>
    `
                }
                handleInput(a, s) {
                    let p = a.target,
                        g = this.getInputElement(p);
                    if (g) {
                        let p = g.value;
                        if ("insertFromPaste" === a.inputType) this.handlePaste(g, p, s);
                        else {
                            let m = t_.isNumber(p);
                            m && a.data ? (g.value = a.data, this.focusInputField("next", s)) : g.value = ""
                        }
                    }
                }
                handlePaste(a, s, p) {
                    let g = s[0],
                        m = g && t_.isNumber(g);
                    if (m) {
                        a.value = g;
                        let m = s.substring(1);
                        if (p + 1 < this.length && m.length) {
                            let a = this.numerics[p + 1],
                                s = a ? this.getInputElement(a) : void 0;
                            s && this.handlePaste(s, m, p + 1)
                        } else this.focusInputField("next", p)
                    } else a.value = ""
                }
                getInputElement(a) {
                    return a.shadowRoot ? .querySelector("input") ? a.shadowRoot.querySelector("input") : null
                }
            };
            r_.styles = [T, rx], wui_otp_decorate([(0, Q.Cb)({
                type: Number
            })], r_.prototype, "length", void 0), r_ = wui_otp_decorate([customElement("wui-otp")], r_);
            var rE = p(75298);

            function isAdjecentDots(a, s, p) {
                return a !== s && (a - s < 0 ? s - a : a - s) <= p + .1
            }
            let rk = {
                generate(a, s, p) {
                    let g = "#141414",
                        m = [],
                        v = function(a, s) {
                            let p = Array.prototype.slice.call(rE.create(a, {
                                    errorCorrectionLevel: "Q"
                                }).modules.data, 0),
                                g = Math.sqrt(p.length);
                            return p.reduce((a, s, p) => (p % g == 0 ? a.push([s]) : a[a.length - 1].push(s)) && a, [])
                        }(a, 0),
                        x = s / v.length,
                        _ = [{
                            x: 0,
                            y: 0
                        }, {
                            x: 1,
                            y: 0
                        }, {
                            x: 0,
                            y: 1
                        }];
                    _.forEach(({
                        x: a,
                        y: s
                    }) => {
                        let p = (v.length - 7) * x * a,
                            T = (v.length - 7) * x * s;
                        for (let a = 0; a < _.length; a += 1) {
                            let s = x * (7 - 2 * a);
                            m.push(E.YP `
            <rect
              fill=${2===a?g:"transparent"}
              width=${0===a?s-5:s}
              rx= ${0===a?(s-5)*.45:.45*s}
              ry= ${0===a?(s-5)*.45:.45*s}
              stroke=${g}
              stroke-width=${0===a?5:0}
              height=${0===a?s-5:s}
              x= ${0===a?T+x*a+2.5:T+x*a}
              y= ${0===a?p+x*a+2.5:p+x*a}
            />
          `)
                        }
                    });
                    let T = Math.floor((p + 25) / x),
                        F = v.length / 2 - T / 2,
                        W = v.length / 2 + T / 2 - 1,
                        z = [];
                    v.forEach((a, s) => {
                        a.forEach((a, p) => {
                            if (v[s][p] && !(s < 7 && p < 7 || s > v.length - 8 && p < 7 || s < 7 && p > v.length - 8) && !(s > F && s < W && p > F && p < W)) {
                                let a = s * x + x / 2,
                                    g = p * x + x / 2;
                                z.push([a, g])
                            }
                        })
                    });
                    let Z = {};
                    return z.forEach(([a, s]) => {
                        Z[a] ? Z[a] ? .push(s) : Z[a] = [s]
                    }), Object.entries(Z).map(([a, s]) => {
                        let p = s.filter(a => s.every(s => !isAdjecentDots(a, s, x)));
                        return [Number(a), p]
                    }).forEach(([a, s]) => {
                        s.forEach(s => {
                            m.push(E.YP `<circle cx=${a} cy=${s} fill=${g} r=${x/2.5} />`)
                        })
                    }), Object.entries(Z).filter(([a, s]) => s.length > 1).map(([a, s]) => {
                        let p = s.filter(a => s.some(s => isAdjecentDots(a, s, x)));
                        return [Number(a), p]
                    }).map(([a, s]) => {
                        s.sort((a, s) => a < s ? -1 : 1);
                        let p = [];
                        for (let a of s) {
                            let s = p.find(s => s.some(s => isAdjecentDots(a, s, x)));
                            s ? s.push(a) : p.push([a])
                        }
                        return [a, p.map(a => [a[0], a[a.length - 1]])]
                    }).forEach(([a, s]) => {
                        s.forEach(([s, p]) => {
                            m.push(E.YP `
              <line
                x1=${a}
                x2=${a}
                y1=${s}
                y2=${p}
                stroke=${g}
                stroke-width=${x/1.25}
                stroke-linecap="round"
              />
            `)
                        })
                    }), m
                }
            };
            var r$ = E.iv `
  :host {
    position: relative;
    user-select: none;
    display: block;
    overflow: hidden;
    aspect-ratio: 1 / 1;
    width: var(--local-size);
  }

  :host([data-theme='dark']) {
    border-radius: clamp(0px, var(--wui-border-radius-l), 40px);
    background-color: var(--wui-color-inverse-100);
    padding: var(--wui-spacing-l);
  }

  :host([data-theme='light']) {
    outline: 1px solid var(--wui-color-bg-125);
    background-color: var(--wui-color-bg-125);
  }

  svg:first-child,
  wui-image,
  wui-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateY(-50%) translateX(-50%);
  }

  wui-image {
    width: 25%;
    height: 25%;
    border-radius: var(--wui-border-radius-xs);
  }

  wui-icon {
    width: 100%;
    height: 100%;
    color: #3396ff !important;
    transform: translateY(-50%) translateX(-50%) scale(0.25);
  }
`,
                wui_qr_code_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rP = class extends E.oi {
                constructor() {
                    super(...arguments), this.uri = "", this.size = 0, this.theme = "dark", this.imageSrc = void 0, this.alt = void 0
                }
                render() {
                    return this.dataset.theme = this.theme, this.style.cssText = `--local-size: ${this.size}px`, E.dy `${this.templateVisual()} ${this.templateSvg()}`
                }
                templateSvg() {
                    let a = "light" === this.theme ? this.size : this.size - 32;
                    return E.YP `
      <svg height=${a} width=${a}>
        ${rk.generate(this.uri,a,a/4)}
      </svg>
    `
                }
                templateVisual() {
                    return this.imageSrc ? E.dy `<wui-image src=${this.imageSrc} alt=${this.alt??"logo"}></wui-image>` : E.dy `<wui-icon size="inherit" color="inherit" name="walletConnect"></wui-icon>`
                }
            };
            rP.styles = [T, r$], wui_qr_code_decorate([(0, Q.Cb)()], rP.prototype, "uri", void 0), wui_qr_code_decorate([(0, Q.Cb)({
                type: Number
            })], rP.prototype, "size", void 0), wui_qr_code_decorate([(0, Q.Cb)()], rP.prototype, "theme", void 0), wui_qr_code_decorate([(0, Q.Cb)()], rP.prototype, "imageSrc", void 0), wui_qr_code_decorate([(0, Q.Cb)()], rP.prototype, "alt", void 0), rP = wui_qr_code_decorate([customElement("wui-qr-code")], rP);
            var rS = E.iv `
  :host {
    position: relative;
    display: inline-block;
    width: 100%;
  }
`;
            let rA = class extends E.oi {
                constructor() {
                    super(...arguments), this.inputComponentRef = ref_e()
                }
                render() {
                    return E.dy `
      <wui-input-text
        ${t0(this.inputComponentRef)}
        placeholder="Search wallet"
        icon="search"
        type="search"
        enterKeyHint="search"
        size="sm"
      >
        <wui-input-element @click=${this.clearValue} icon="close"></wui-input-element>
      </wui-input-text>
    `
                }
                clearValue() {
                    let a = this.inputComponentRef.value,
                        s = a ? .inputElementRef.value;
                    s && (s.value = "", s.focus(), s.dispatchEvent(new Event("input")))
                }
            };
            rA.styles = [T, rS], rA = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([customElement("wui-search-bar")], rA);
            var rO = E.iv `
  :host {
    display: flex;
    column-gap: var(--wui-spacing-xs);
    align-items: center;
    padding: 7px var(--wui-spacing-l) 7px var(--wui-spacing-xs);
    border-radius: var(--wui-border-radius-3xl);
    border: 1px solid var(--wui-gray-glass-005);
    background-color: var(--wui-color-bg-175);
    box-shadow:
      0px 14px 64px -4px rgba(0, 0, 0, 0.15),
      0px 8px 22px -6px rgba(0, 0, 0, 0.15);
  }
`,
                wui_snackbar_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rR = class extends E.oi {
                constructor() {
                    super(...arguments), this.backgroundColor = "accent-100", this.iconColor = "accent-100", this.icon = "checkmark", this.message = ""
                }
                render() {
                    return E.dy `
      <wui-icon-box
        size="xs"
        iconColor=${this.iconColor}
        backgroundColor=${this.backgroundColor}
        icon=${this.icon}
      ></wui-icon-box>
      <wui-text variant="paragraph-500" color="fg-100">${this.message}</wui-text>
    `
                }
            };
            rR.styles = [T, rO], wui_snackbar_decorate([(0, Q.Cb)()], rR.prototype, "backgroundColor", void 0), wui_snackbar_decorate([(0, Q.Cb)()], rR.prototype, "iconColor", void 0), wui_snackbar_decorate([(0, Q.Cb)()], rR.prototype, "icon", void 0), wui_snackbar_decorate([(0, Q.Cb)()], rR.prototype, "message", void 0), rR = wui_snackbar_decorate([customElement("wui-snackbar")], rR);
            var rT = E.iv `
  :host {
    display: inline-flex;
    background-color: var(--wui-gray-glass-002);
    border-radius: var(--wui-border-radius-3xl);
    padding: var(--wui-spacing-3xs);
    position: relative;
    height: 36px;
    overflow: hidden;
  }

  :host::before {
    content: '';
    position: absolute;
    pointer-events: none;
    top: 4px;
    left: 4px;
    display: block;
    width: var(--local-tab-width);
    height: 28px;
    border-radius: var(--wui-border-radius-3xl);
    background-color: var(--wui-gray-glass-002);
    box-shadow: inset 0 0 0 1px var(--wui-gray-glass-002);
    transform: translateX(calc(var(--local-tab) * var(--local-tab-width)));
    transition: transform var(--wui-ease-out-power-2) var(--wui-duration-lg);
  }

  :host([data-type='flex'])::before {
    left: 3px;
    transform: translateX(calc((var(--local-tab) * 34px) + (var(--local-tab) * 4px)));
  }

  :host([data-type='flex']) {
    display: flex;
    padding: 0px 0px 0px 12px;
    gap: 4px;
  }

  :host([data-type='flex']) > button > wui-text {
    position: absolute;
    left: 18px;
    opacity: 0;
  }

  button[data-active='true'] > wui-icon,
  button[data-active='true'] > wui-text {
    color: var(--wui-color-fg-100);
  }

  button[data-active='false'] > wui-icon,
  button[data-active='false'] > wui-text {
    color: var(--wui-color-fg-200);
  }

  button[data-active='true']:disabled,
  button[data-active='false']:disabled {
    background-color: transparent;
    opacity: 0.5;
    cursor: not-allowed;
  }

  button[data-active='true']:disabled > wui-text {
    color: var(--wui-color-fg-200);
  }

  button[data-active='false']:disabled > wui-text {
    color: var(--wui-color-fg-300);
  }

  button > wui-icon,
  button > wui-text {
    pointer-events: none;
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-lg);
  }

  button {
    width: var(--local-tab-width);
  }

  :host([data-type='flex']) > button {
    width: 34px;
    position: relative;
    display: flex;
    justify-content: flex-start;
  }

  button:hover:enabled,
  button:active:enabled {
    background-color: transparent !important;
  }

  button:hover:enabled > wui-icon,
  button:active:enabled > wui-icon {
    color: var(--wui-color-fg-125);
  }

  button:hover:enabled > wui-text,
  button:active:enabled > wui-text {
    color: var(--wui-color-fg-125);
  }
`,
                wui_tabs_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rI = class extends E.oi {
                constructor() {
                    super(...arguments), this.tabs = [], this.onTabChange = () => null, this.buttons = [], this.disabled = !1, this.activeTab = 0, this.localTabWidth = "100px", this.isDense = !1
                }
                render() {
                    return this.isDense = this.tabs.length > 3, this.style.cssText = `
      --local-tab: ${this.activeTab};
      --local-tab-width: ${this.localTabWidth};
    `, this.dataset.type = this.isDense ? "flex" : "block", this.tabs.map((a, s) => {
                        let p = s === this.activeTab;
                        return E.dy `
        <button
          ?disabled=${this.disabled}
          @click=${()=>this.onTabClick(s)}
          data-active=${p}
        >
          <wui-icon size="sm" color="inherit" name=${a.icon}></wui-icon>
          <wui-text variant="small-600" color="inherit"> ${a.label} </wui-text>
        </button>
      `
                    })
                }
                firstUpdated() {
                    this.shadowRoot && this.isDense && (this.buttons = [...this.shadowRoot.querySelectorAll("button")], setTimeout(() => {
                        this.animateTabs(0, !0)
                    }, 0))
                }
                onTabClick(a) {
                    this.buttons && this.animateTabs(a, !1), this.activeTab = a, this.onTabChange(a)
                }
                animateTabs(a, s) {
                    let p = this.buttons[this.activeTab],
                        g = this.buttons[a],
                        m = p ? .querySelector("wui-text"),
                        v = g ? .querySelector("wui-text"),
                        x = g ? .getBoundingClientRect(),
                        _ = v ? .getBoundingClientRect();
                    p && m && !s && a !== this.activeTab && (m.animate([{
                        opacity: 0
                    }], {
                        duration: 50,
                        easing: "ease",
                        fill: "forwards"
                    }), p.animate([{
                        width: "34px"
                    }], {
                        duration: 500,
                        easing: "ease",
                        fill: "forwards"
                    })), g && x && _ && v && (a !== this.activeTab || s) && (this.localTabWidth = `${Math.round(x.width+_.width)+6}px`, g.animate([{
                        width: `${x.width+_.width}px`
                    }], {
                        duration: s ? 0 : 500,
                        fill: "forwards",
                        easing: "ease"
                    }), v.animate([{
                        opacity: 1
                    }], {
                        duration: s ? 0 : 125,
                        delay: s ? 0 : 200,
                        fill: "forwards",
                        easing: "ease"
                    }))
                }
            };
            rI.styles = [T, F, rT], wui_tabs_decorate([(0, Q.Cb)({
                type: Array
            })], rI.prototype, "tabs", void 0), wui_tabs_decorate([(0, Q.Cb)()], rI.prototype, "onTabChange", void 0), wui_tabs_decorate([(0, Q.Cb)({
                type: Array
            })], rI.prototype, "buttons", void 0), wui_tabs_decorate([(0, Q.Cb)({
                type: Boolean
            })], rI.prototype, "disabled", void 0), wui_tabs_decorate([(0, Q.SB)()], rI.prototype, "activeTab", void 0), wui_tabs_decorate([(0, Q.SB)()], rI.prototype, "localTabWidth", void 0), wui_tabs_decorate([(0, Q.SB)()], rI.prototype, "isDense", void 0), rI = wui_tabs_decorate([customElement("wui-tabs")], rI);
            var rN = E.iv `
  :host {
    display: block;
    padding: 9px var(--wui-spacing-s) 10px var(--wui-spacing-s);
    border-radius: var(--wui-border-radius-xxs);
    background-color: var(--wui-color-fg-100);
    color: var(--wui-color-bg-100);
    position: relative;
  }

  wui-icon {
    position: absolute;
    width: 12px !important;
    height: 4px !important;
  }

  wui-icon[data-placement='top'] {
    bottom: 0;
    left: 50%;
    transform: translate(-50%, 95%);
  }

  wui-icon[data-placement='bottom'] {
    top: 0;
    left: 50%;
    transform: translate(-50%, -95%) rotate(180deg);
  }

  wui-icon[data-placement='right'] {
    top: 50%;
    left: 0;
    transform: translate(-65%, -50%) rotate(90deg);
  }

  wui-icon[data-placement='left'] {
    top: 50%;
    right: 0%;
    transform: translate(65%, -50%) rotate(270deg);
  }
`,
                wui_tooltip_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rj = class extends E.oi {
                constructor() {
                    super(...arguments), this.placement = "top", this.message = ""
                }
                render() {
                    return E.dy `<wui-icon
        data-placement=${this.placement}
        color="fg-100"
        size="inherit"
        name="cursor"
      ></wui-icon>
      <wui-text color="inherit" variant="small-500">${this.message}</wui-text>`
                }
            };
            rj.styles = [T, F, rN], wui_tooltip_decorate([(0, Q.Cb)()], rj.prototype, "placement", void 0), wui_tooltip_decorate([(0, Q.Cb)()], rj.prototype, "message", void 0), rj = wui_tooltip_decorate([customElement("wui-tooltip")], rj);
            var rM = E.iv `
  :host {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 64px;
    height: 64px;
    outline: 8px solid var(--wui-thumbnail-border);
    border-radius: var(--local-border-radius);
    overflow: hidden;
  }

  wui-icon {
    width: 32px;
    height: 32px;
  }
`,
                wui_visual_thumbnail_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rD = class extends E.oi {
                render() {
                    return this.style.cssText = `--local-border-radius: ${this.borderRadiusFull?"1000px":"20px"};`, E.dy `${this.templateVisual()}`
                }
                templateVisual() {
                    return this.imageSrc ? E.dy `<wui-image src=${this.imageSrc} alt=${this.alt??""}></wui-image>` : E.dy `<wui-icon
      data-parent-size="md"
      size="inherit"
      color="inherit"
      name="walletPlaceholder"
    ></wui-icon>`
                }
            };
            rD.styles = [T, rM], wui_visual_thumbnail_decorate([(0, Q.Cb)()], rD.prototype, "imageSrc", void 0), wui_visual_thumbnail_decorate([(0, Q.Cb)()], rD.prototype, "alt", void 0), wui_visual_thumbnail_decorate([(0, Q.Cb)({
                type: Boolean
            })], rD.prototype, "borderRadiusFull", void 0), rD = wui_visual_thumbnail_decorate([customElement("wui-visual-thumbnail")], rD);
            var rB = E.iv `
  :host {
    display: grid;
    width: inherit;
    height: inherit;
  }
`,
                wui_grid_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rU = class extends E.oi {
                render() {
                    return this.style.cssText = `
      grid-template-rows: ${this.gridTemplateRows};
      grid-template-columns: ${this.gridTemplateColumns};
      justify-items: ${this.justifyItems};
      align-items: ${this.alignItems};
      justify-content: ${this.justifyContent};
      align-content: ${this.alignContent};
      column-gap: ${this.columnGap&&`var(--wui-spacing-${this.columnGap})`};
      row-gap: ${this.rowGap&&`var(--wui-spacing-${this.rowGap})`};
      gap: ${this.gap&&`var(--wui-spacing-${this.gap})`};
      padding-top: ${this.padding&&t_.getSpacingStyles(this.padding,0)};
      padding-right: ${this.padding&&t_.getSpacingStyles(this.padding,1)};
      padding-bottom: ${this.padding&&t_.getSpacingStyles(this.padding,2)};
      padding-left: ${this.padding&&t_.getSpacingStyles(this.padding,3)};
      margin-top: ${this.margin&&t_.getSpacingStyles(this.margin,0)};
      margin-right: ${this.margin&&t_.getSpacingStyles(this.margin,1)};
      margin-bottom: ${this.margin&&t_.getSpacingStyles(this.margin,2)};
      margin-left: ${this.margin&&t_.getSpacingStyles(this.margin,3)};
    `, E.dy `<slot></slot>`
                }
            };
            rU.styles = [T, rB], wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "gridTemplateRows", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "gridTemplateColumns", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "justifyItems", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "alignItems", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "justifyContent", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "alignContent", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "columnGap", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "rowGap", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "gap", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "padding", void 0), wui_grid_decorate([(0, Q.Cb)()], rU.prototype, "margin", void 0), rU = wui_grid_decorate([customElement("wui-grid")], rU);
            var rF = E.iv `
  :host {
    position: relative;
    display: flex;
    width: 100%;
    height: 1px;
    background-color: var(--wui-gray-glass-005);
    justify-content: center;
    align-items: center;
  }

  :host > wui-text {
    position: absolute;
    padding: 0px 10px;
    background-color: var(--wui-color-bg-125);
  }
`,
                wui_separator_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let rL = class extends E.oi {
                constructor() {
                    super(...arguments), this.text = ""
                }
                render() {
                    return E.dy `${this.template()}`
                }
                template() {
                    return this.text ? E.dy `<wui-text variant="small-500" color="fg-200">${this.text}</wui-text>` : null
                }
            };
            rL.styles = [T, rF], wui_separator_decorate([(0, Q.Cb)()], rL.prototype, "text", void 0), rL = wui_separator_decorate([customElement("wui-separator")], rL);
            var rW = p(44519);
            let rz = ["receive", "deposit", "borrow", "claim"],
                rq = ["withdraw", "repay", "burn"],
                rH = {
                    getTransactionGroupTitle(a) {
                        let s = rW.E.getYear();
                        return a === s ? "This Year" : a
                    },
                    getTransactionImages(a) {
                        let [s, p] = a, g = !!s && a ? .every(a => !!a.nft_info), m = a ? .length > 1, v = a ? .length === 2;
                        return v && !g ? [this.getTransactionImage(s), this.getTransactionImage(p)] : m ? a.map(a => this.getTransactionImage(a)) : [this.getTransactionImage(s)]
                    },
                    getTransactionImage: a => ({
                        type: rH.getTransactionTransferTokenType(a),
                        url: rH.getTransactionImageURL(a)
                    }),
                    getTransactionImageURL(a) {
                        let s = null,
                            p = !!a ? .nft_info,
                            g = !!a ? .fungible_info;
                        return a && p ? s = a ? .nft_info ? .content ? .preview ? .url : a && g && (s = a ? .fungible_info ? .icon ? .url), s
                    },
                    getTransactionTransferTokenType: a => a ? .fungible_info ? "FUNGIBLE" : a ? .nft_info ? "NFT" : null,
                    getTransactionDescriptions(a) {
                        let s = a.metadata ? .operationType,
                            p = a.transfers,
                            g = a.transfers ? .length > 0,
                            m = a.transfers ? .length > 1,
                            v = g && p ? .every(a => !!a.fungible_info),
                            [x, _] = p,
                            E = this.getTransferDescription(x);
                        if (this.getTransferDescription(_), !g) {
                            let p = "send" === s || "receive" === s;
                            return p && v ? [E = t_.getTruncateString({
                                string: a.metadata.sentFrom,
                                charsStart: 4,
                                charsEnd: 6,
                                truncate: "middle"
                            }), t_.getTruncateString({
                                string: a.metadata.sentTo,
                                charsStart: 4,
                                charsEnd: 6,
                                truncate: "middle"
                            })] : [a.metadata.status]
                        }
                        if (m) return p.map(a => this.getTransferDescription(a));
                        let T = "";
                        return rz.includes(s) ? T = "+" : rq.includes(s) && (T = "-"), [E = T.concat(E)]
                    },
                    getTransferDescription(a) {
                        let s = "";
                        return a && (a ? .nft_info ? s = a ? .nft_info ? .name || "-" : a ? .fungible_info && (s = this.getFungibleTransferDescription(a) || "-")), s
                    },
                    getFungibleTransferDescription(a) {
                        if (!a) return null;
                        let s = this.getQuantityFixedValue(a ? .quantity.numeric),
                            p = [s, a ? .fungible_info ? .symbol].join(" ").trim();
                        return p
                    },
                    getQuantityFixedValue(a) {
                        if (!a) return null;
                        let s = parseFloat(a);
                        return s.toFixed(3)
                    }
                }
        },
        97011: function(a, s, p) {
            "use strict";
            let g, m;

            function useWeb3Modal() {
                if (!g) throw Error('Please call "createWeb3Modal" before using "useWeb3Modal" hook');
                return {
                    open: async function(a) {
                        await g ? .open(a)
                    },
                    close: async function() {
                        await g ? .close()
                    }
                }
            }
            p.d(s, {
                OY: function() {
                    return createWeb3Modal
                },
                o1: function() {
                    return defaultWagmiConfig
                },
                k_: function() {
                    return useWeb3Modal
                }
            }), p(2265);
            var v, x, _, E, T, F, W, z, Z, Q, Y, X, J, ei, en, eo, ea, es, el, ec, eu, ed, eh, ep, ef = p(10953),
                eg = p(75404),
                ew = p(51250),
                em = p(742),
                eb = p(22555),
                ev = p(6591),
                ey = p(80824),
                __decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let eC = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.networkImages = ew.WM.state.networkImages, this.disabled = !1, this.balance = "show", this.address = ew.AccountController.state.address, this.balanceVal = ew.AccountController.state.balance, this.balanceSymbol = ew.AccountController.state.balanceSymbol, this.profileName = ew.AccountController.state.profileName, this.profileImage = ew.AccountController.state.profileImage, this.network = ew.NetworkController.state.caipNetwork, this.unsubscribe.push(...[ew.AccountController.subscribe(a => {
                        a.isConnected ? (this.address = a.address, this.balanceVal = a.balance, this.profileName = a.profileName, this.profileImage = a.profileImage, this.balanceSymbol = a.balanceSymbol) : (this.address = "", this.balanceVal = "", this.profileName = "", this.profileImage = "", this.balanceSymbol = "")
                    }), ew.NetworkController.subscribeKey("caipNetwork", a => this.network = a)])
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    let a = this.networkImages[this.network ? .imageId ? ? ""],
                        s = "show" === this.balance;
                    return eb.dy `
      <wui-account-button
        .disabled=${!!this.disabled}
        address=${(0,ey.o)(this.profileName??this.address)}
        ?isProfileName=${!!this.profileName}
        networkSrc=${(0,ey.o)(a)}
        avatarSrc=${(0,ey.o)(this.profileImage)}
        balance=${s?ew.j1.formatBalance(this.balanceVal,this.balanceSymbol):""}
        @click=${this.onClick.bind(this)}
      >
      </wui-account-button>
    `
                }
                onClick() {
                    ew.IN.open()
                }
            };
            __decorate([(0, ev.Cb)({
                type: Boolean
            })], eC.prototype, "disabled", void 0), __decorate([(0, ev.Cb)()], eC.prototype, "balance", void 0), __decorate([(0, ev.SB)()], eC.prototype, "address", void 0), __decorate([(0, ev.SB)()], eC.prototype, "balanceVal", void 0), __decorate([(0, ev.SB)()], eC.prototype, "balanceSymbol", void 0), __decorate([(0, ev.SB)()], eC.prototype, "profileName", void 0), __decorate([(0, ev.SB)()], eC.prototype, "profileImage", void 0), __decorate([(0, ev.SB)()], eC.prototype, "network", void 0), eC = __decorate([(0, em.customElement)("w3m-account-button")], eC);
            var w3m_button_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let ex = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.disabled = !1, this.balance = void 0, this.size = void 0, this.label = void 0, this.loadingLabel = void 0, this.isAccount = ew.AccountController.state.isConnected, this.unsubscribe.push(ew.AccountController.subscribeKey("isConnected", a => {
                        this.isAccount = a
                    }))
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    return this.isAccount ? eb.dy `
          <w3m-account-button
            .disabled=${!!this.disabled}
            balance=${(0,ey.o)(this.balance)}
          >
          </w3m-account-button>
        ` : eb.dy `
          <w3m-connect-button
            size=${(0,ey.o)(this.size)}
            label=${(0,ey.o)(this.label)}
            loadingLabel=${(0,ey.o)(this.loadingLabel)}
          ></w3m-connect-button>
        `
                }
            };
            w3m_button_decorate([(0, ev.Cb)({
                type: Boolean
            })], ex.prototype, "disabled", void 0), w3m_button_decorate([(0, ev.Cb)()], ex.prototype, "balance", void 0), w3m_button_decorate([(0, ev.Cb)()], ex.prototype, "size", void 0), w3m_button_decorate([(0, ev.Cb)()], ex.prototype, "label", void 0), w3m_button_decorate([(0, ev.Cb)()], ex.prototype, "loadingLabel", void 0), w3m_button_decorate([(0, ev.SB)()], ex.prototype, "isAccount", void 0), ex = w3m_button_decorate([(0, em.customElement)("w3m-button")], ex);
            var w3m_connect_button_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let e_ = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.size = "md", this.label = "Connect Wallet", this.loadingLabel = "Connecting...", this.open = ew.IN.state.open, this.unsubscribe.push(ew.IN.subscribeKey("open", a => this.open = a))
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    return eb.dy `
      <wui-connect-button
        size=${(0,ey.o)(this.size)}
        .loading=${this.open}
        @click=${this.onClick.bind(this)}
      >
        ${this.open?this.loadingLabel:this.label}
      </wui-connect-button>
    `
                }
                onClick() {
                    this.open ? ew.IN.close() : ew.IN.open()
                }
            };
            w3m_connect_button_decorate([(0, ev.Cb)()], e_.prototype, "size", void 0), w3m_connect_button_decorate([(0, ev.Cb)()], e_.prototype, "label", void 0), w3m_connect_button_decorate([(0, ev.Cb)()], e_.prototype, "loadingLabel", void 0), w3m_connect_button_decorate([(0, ev.SB)()], e_.prototype, "open", void 0), e_ = w3m_connect_button_decorate([(0, em.customElement)("w3m-connect-button")], e_), p(9448);
            var w3m_network_button_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let eE = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.disabled = !1, this.network = ew.NetworkController.state.caipNetwork, this.connected = ew.AccountController.state.isConnected, this.unsubscribe.push(...[ew.NetworkController.subscribeKey("caipNetwork", a => this.network = a), ew.AccountController.subscribeKey("isConnected", a => this.connected = a)])
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    return eb.dy `
      <wui-network-button
        .disabled=${!!this.disabled}
        imageSrc=${(0,ey.o)(ew.fz.getNetworkImage(this.network))}
        @click=${this.onClick.bind(this)}
      >
        ${this.network?.name??(this.connected?"Unknown Network":"Select Network")}
      </wui-network-button>
    `
                }
                onClick() {
                    ew.IN.open({
                        view: "Networks"
                    })
                }
            };
            w3m_network_button_decorate([(0, ev.Cb)({
                type: Boolean
            })], eE.prototype, "disabled", void 0), w3m_network_button_decorate([(0, ev.SB)()], eE.prototype, "network", void 0), w3m_network_button_decorate([(0, ev.SB)()], eE.prototype, "connected", void 0), eE = w3m_network_button_decorate([(0, em.customElement)("w3m-network-button")], eE);
            var ek = eb.iv `
  :host {
    display: block;
    will-change: transform, opacity;
  }
`,
                w3m_router_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let e$ = class extends eb.oi {
                constructor() {
                    super(), this.resizeObserver = void 0, this.prevHeight = "0px", this.prevHistoryLength = 1, this.unsubscribe = [], this.view = ew.RouterController.state.view, this.unsubscribe.push(ew.RouterController.subscribeKey("view", a => this.onViewChange(a)))
                }
                firstUpdated() {
                    this.resizeObserver = new ResizeObserver(async ([a]) => {
                        let s = `${a?.contentRect.height}px`;
                        "0px" !== this.prevHeight && (await this.animate([{
                            height: this.prevHeight
                        }, {
                            height: s
                        }], {
                            duration: 150,
                            easing: "ease",
                            fill: "forwards"
                        }).finished, this.style.height = "auto"), this.prevHeight = s
                    }), this.resizeObserver.observe(this.getWrapper())
                }
                disconnectedCallback() {
                    this.resizeObserver ? .unobserve(this.getWrapper()), this.unsubscribe.forEach(a => a())
                }
                render() {
                    return eb.dy `<div>${this.viewTemplate()}</div>`
                }
                viewTemplate() {
                    switch (this.view) {
                        case "Connect":
                        default:
                            return eb.dy `<w3m-connect-view></w3m-connect-view>`;
                        case "ConnectingWalletConnect":
                            return eb.dy `<w3m-connecting-wc-view></w3m-connecting-wc-view>`;
                        case "ConnectingExternal":
                            return eb.dy `<w3m-connecting-external-view></w3m-connecting-external-view>`;
                        case "ConnectingSiwe":
                            return eb.dy `<w3m-connecting-siwe-view></w3m-connecting-siwe-view>`;
                        case "AllWallets":
                            return eb.dy `<w3m-all-wallets-view></w3m-all-wallets-view>`;
                        case "Networks":
                            return eb.dy `<w3m-networks-view></w3m-networks-view>`;
                        case "SwitchNetwork":
                            return eb.dy `<w3m-network-switch-view></w3m-network-switch-view>`;
                        case "Account":
                            return eb.dy `<w3m-account-view></w3m-account-view>`;
                        case "WhatIsAWallet":
                            return eb.dy `<w3m-what-is-a-wallet-view></w3m-what-is-a-wallet-view>`;
                        case "WhatIsANetwork":
                            return eb.dy `<w3m-what-is-a-network-view></w3m-what-is-a-network-view>`;
                        case "GetWallet":
                            return eb.dy `<w3m-get-wallet-view></w3m-get-wallet-view>`;
                        case "Downloads":
                            return eb.dy `<w3m-downloads-view></w3m-downloads-view>`;
                        case "Transactions":
                            return eb.dy `<w3m-transactions-view></w3m-transactions-view>`
                    }
                }
                async onViewChange(a) {
                    let {
                        history: s
                    } = ew.RouterController.state, p = -10, g = 10;
                    s.length < this.prevHistoryLength && (p = 10, g = -10), this.prevHistoryLength = s.length, await this.animate([{
                        opacity: 1,
                        transform: "translateX(0px)"
                    }, {
                        opacity: 0,
                        transform: `translateX(${p}px)`
                    }], {
                        duration: 150,
                        easing: "ease",
                        fill: "forwards"
                    }).finished, this.view = a, await this.animate([{
                        opacity: 0,
                        transform: `translateX(${g}px)`
                    }, {
                        opacity: 1,
                        transform: "translateX(0px)"
                    }], {
                        duration: 150,
                        easing: "ease",
                        fill: "forwards",
                        delay: 50
                    }).finished
                }
                getWrapper() {
                    return this.shadowRoot ? .querySelector("div")
                }
            };
            e$.styles = ek, w3m_router_decorate([(0, ev.SB)()], e$.prototype, "view", void 0), e$ = w3m_router_decorate([(0, em.customElement)("w3m-router")], e$);
            var eP = eb.iv `
  wui-flex {
    width: 100%;
  }

  :host > wui-flex:first-child {
    transform: translateY(calc(var(--wui-spacing-xxs) * -1));
  }

  wui-icon-link {
    margin-right: calc(var(--wui-icon-box-size-md) * -1);
  }
`,
                w3m_account_view_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let eS = class extends eb.oi {
                constructor() {
                    super(), this.usubscribe = [], this.networkImages = ew.WM.state.networkImages, this.address = ew.AccountController.state.address, this.profileImage = ew.AccountController.state.profileImage, this.profileName = ew.AccountController.state.profileName, this.balance = ew.AccountController.state.balance, this.balanceSymbol = ew.AccountController.state.balanceSymbol, this.network = ew.NetworkController.state.caipNetwork, this.disconecting = !1, this.usubscribe.push(...[ew.AccountController.subscribe(a => {
                        a.address ? (this.address = a.address, this.profileImage = a.profileImage, this.profileName = a.profileName, this.balance = a.balance, this.balanceSymbol = a.balanceSymbol) : ew.IN.close()
                    })], ew.NetworkController.subscribeKey("caipNetwork", a => {
                        a ? .id && (this.network = a)
                    }))
                }
                disconnectedCallback() {
                    this.usubscribe.forEach(a => a())
                }
                render() {
                    if (!this.address) throw Error("w3m-account-view: No account provided");
                    let a = this.networkImages[this.network ? .imageId ? ? ""];
                    return eb.dy `
      <wui-flex
        flexDirection="column"
        .padding=${["0","s","m","s"]}
        alignItems="center"
        gap="l"
      >
        <wui-avatar
          alt=${this.address}
          address=${this.address}
          imageSrc=${(0,ey.o)(this.profileImage)}
        ></wui-avatar>

        <wui-flex flexDirection="column" alignItems="center">
          <wui-flex gap="3xs" alignItems="center" justifyContent="center">
            <wui-text variant="large-600" color="fg-100">
              ${this.profileName?em.UiHelperUtil.getTruncateString({string:this.profileName,charsStart:20,charsEnd:0,truncate:"end"}):em.UiHelperUtil.getTruncateString({string:this.address,charsStart:4,charsEnd:6,truncate:"middle"})}
            </wui-text>
            <wui-icon-link
              size="md"
              icon="copy"
              iconColor="fg-200"
              @click=${this.onCopyAddress}
            ></wui-icon-link>
          </wui-flex>
          <wui-flex gap="s" flexDirection="column" alignItems="center">
            <wui-text variant="paragraph-500" color="fg-200">
              ${ew.j1.formatBalance(this.balance,this.balanceSymbol)}
            </wui-text>

            ${this.explorerBtnTemplate()}
          </wui-flex>
        </wui-flex>
      </wui-flex>

      <wui-flex flexDirection="column" gap="xs" .padding=${["0","s","s","s"]}>
        <wui-list-item
          .variant=${a?"image":"icon"}
          iconVariant="overlay"
          icon="networkPlaceholder"
          imageSrc=${(0,ey.o)(a)}
          ?chevron=${this.isAllowedNetworkSwitch()}
          @click=${this.onNetworks.bind(this)}
        >
          <wui-text variant="paragraph-500" color="fg-100">
            ${this.network?.name??"Unknown"}
          </wui-text>
        </wui-list-item>
        <wui-list-item
          iconVariant="blue"
          icon="swapHorizontalBold"
          iconSize="sm"
          ?chevron=${!0}
          @click=${this.onTransactions.bind(this)}
        >
          <wui-text variant="paragraph-500" color="fg-100">Activity</wui-text>
        </wui-list-item>
        <wui-list-item
          variant="icon"
          iconVariant="overlay"
          icon="disconnect"
          ?chevron=${!1}
          .loading=${this.disconecting}
          @click=${this.onDisconnect.bind(this)}
        >
          <wui-text variant="paragraph-500" color="fg-200">Disconnect</wui-text>
        </wui-list-item>
      </wui-flex>
    `
                }
                explorerBtnTemplate() {
                    let {
                        addressExplorerUrl: a
                    } = ew.AccountController.state;
                    return a ? eb.dy `
      <wui-button size="sm" variant="shade" @click=${this.onExplorer.bind(this)}>
        <wui-icon size="sm" color="inherit" slot="iconLeft" name="compass"></wui-icon>
        Block Explorer
        <wui-icon size="sm" color="inherit" slot="iconRight" name="externalLink"></wui-icon>
      </wui-button>
    ` : null
                }
                isAllowedNetworkSwitch() {
                    let {
                        requestedCaipNetworks: a
                    } = ew.NetworkController.state, s = !!a && a.length > 1, p = a ? .find(({
                        id: a
                    }) => a === this.network ? .id);
                    return s || !p
                }
                onCopyAddress() {
                    try {
                        this.address && (ew.j1.copyToClopboard(this.address), ew.SnackController.showSuccess("Address copied"))
                    } catch {
                        ew.SnackController.showError("Failed to copy")
                    }
                }
                onNetworks() {
                    this.isAllowedNetworkSwitch() && ew.RouterController.push("Networks")
                }
                onTransactions() {
                    ew.Xs.sendEvent({
                        type: "track",
                        event: "CLICK_TRANSACTIONS"
                    }), ew.RouterController.push("Transactions")
                }
                async onDisconnect() {
                    try {
                        this.disconecting = !0, await ew.ConnectionController.disconnect(), ew.Xs.sendEvent({
                            type: "track",
                            event: "DISCONNECT_SUCCESS"
                        }), ew.IN.close()
                    } catch {
                        ew.Xs.sendEvent({
                            type: "track",
                            event: "DISCONNECT_ERROR"
                        }), ew.SnackController.showError("Failed to disconnect")
                    } finally {
                        this.disconecting = !1
                    }
                }
                onExplorer() {
                    let {
                        addressExplorerUrl: a
                    } = ew.AccountController.state;
                    a && ew.j1.openHref(a, "_blank")
                }
            };
            eS.styles = eP, w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "address", void 0), w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "profileImage", void 0), w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "profileName", void 0), w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "balance", void 0), w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "balanceSymbol", void 0), w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "network", void 0), w3m_account_view_decorate([(0, ev.SB)()], eS.prototype, "disconecting", void 0), eS = w3m_account_view_decorate([(0, em.customElement)("w3m-account-view")], eS);
            var w3m_all_wallets_view_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let eA = class extends eb.oi {
                constructor() {
                    super(...arguments), this.search = "", this.onDebouncedSearch = ew.j1.debounce(a => {
                        this.search = a
                    })
                }
                render() {
                    let a = this.search.length >= 2;
                    return eb.dy `
      <wui-flex padding="s" gap="s">
        <wui-search-bar @inputChange=${this.onInputChange.bind(this)}></wui-search-bar>
        ${this.qrButtonTemplate()}
      </wui-flex>
      ${a?eb.dy`<w3m-all-wallets-search query=${this.search}></w3m-all-wallets-search>`:eb.dy`<w3m-all-wallets-list></w3m-all-wallets-list>`}
    `
                }
                onInputChange(a) {
                    this.onDebouncedSearch(a.detail)
                }
                qrButtonTemplate() {
                    return ew.j1.isMobile() ? eb.dy `
        <wui-icon-box
          size="lg"
          iconSize="xl"
          iconColor="accent-100"
          backgroundColor="accent-100"
          icon="qrCode"
          background="transparent"
          border
          borderColor="wui-accent-glass-010"
          @click=${this.onWalletConnectQr.bind(this)}
        ></wui-icon-box>
      ` : null
                }
                onWalletConnectQr() {
                    ew.RouterController.push("ConnectingWalletConnect")
                }
            };
            w3m_all_wallets_view_decorate([(0, ev.SB)()], eA.prototype, "search", void 0), eA = w3m_all_wallets_view_decorate([(0, em.customElement)("w3m-all-wallets-view")], eA);
            var eO = eb.iv `
  wui-flex {
    max-height: clamp(360px, 540px, 80vh);
    overflow: scroll;
    scrollbar-width: none;
  }

  wui-flex::-webkit-scrollbar {
    display: none;
  }
`,
                w3m_connect_view_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let eR = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.connectors = ew.ConnectorController.state.connectors, this.unsubscribe.push(ew.ConnectorController.subscribeKey("connectors", a => this.connectors = a))
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    return eb.dy `
      <wui-flex flexDirection="column" padding="s" gap="xs">
        ${this.walletConnectConnectorTemplate()} ${this.recentTemplate()}
        ${this.announcedTemplate()} ${this.injectedTemplate()} ${this.featuredTemplate()}
        ${this.customTemplate()} ${this.recommendedTemplate()} ${this.connectorsTemplate()}
        ${this.allWalletsTemplate()}
      </wui-flex>
      <w3m-legal-footer></w3m-legal-footer>
    `
                }
                walletConnectConnectorTemplate() {
                    if (ew.j1.isMobile()) return null;
                    let a = this.connectors.find(a => "WALLET_CONNECT" === a.type);
                    return a ? eb.dy `
      <wui-list-wallet
        imageSrc=${(0,ey.o)(ew.fz.getConnectorImage(a))}
        name=${a.name??"Unknown"}
        @click=${()=>this.onConnector(a)}
        tagLabel="qr code"
        tagVariant="main"
      >
      </wui-list-wallet>
    ` : null
                }
                customTemplate() {
                    let {
                        customWallets: a
                    } = ew.OptionsController.state;
                    if (!a ? .length) return null;
                    let s = this.filterOutDuplicateWallets(a);
                    return s.map(a => eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
          name=${a.name??"Unknown"}
          @click=${()=>this.onConnectWallet(a)}
        >
        </wui-list-wallet>
      `)
                }
                featuredTemplate() {
                    let {
                        featured: a
                    } = ew.ApiController.state;
                    if (!a.length) return null;
                    let s = this.filterOutDuplicateWallets(a);
                    return s.map(a => eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
          name=${a.name??"Unknown"}
          @click=${()=>this.onConnectWallet(a)}
        >
        </wui-list-wallet>
      `)
                }
                recentTemplate() {
                    let a = ew.MO.getRecentWallets();
                    return a.map(a => eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
          name=${a.name??"Unknown"}
          @click=${()=>this.onConnectWallet(a)}
          tagLabel="recent"
          tagVariant="shade"
        >
        </wui-list-wallet>
      `)
                }
                announcedTemplate() {
                    return this.connectors.map(a => "ANNOUNCED" !== a.type ? null : eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getConnectorImage(a))}
          name=${a.name??"Unknown"}
          @click=${()=>this.onConnector(a)}
          tagLabel="installed"
          tagVariant="success"
        >
        </wui-list-wallet>
      `)
                }
                injectedTemplate() {
                    let a = this.connectors.find(a => "ANNOUNCED" === a.type);
                    return this.connectors.map(s => "INJECTED" === s.type && ew.ConnectionController.checkInstalled() ? eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getConnectorImage(s))}
          name=${s.name??"Unknown"}
          @click=${()=>this.onConnector(s)}
          tagLabel=${(0,ey.o)(a?void 0:"installed")}
          tagVariant=${(0,ey.o)(a?void 0:"success")}
        >
        </wui-list-wallet>
      ` : null)
                }
                connectorsTemplate() {
                    return this.connectors.map(a => ["WALLET_CONNECT", "INJECTED", "ANNOUNCED"].includes(a.type) ? null : eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getConnectorImage(a))}
          name=${a.name??"Unknown"}
          @click=${()=>this.onConnector(a)}
        >
        </wui-list-wallet>
      `)
                }
                allWalletsTemplate() {
                    let a = 10 * Math.floor(ew.ApiController.state.count / 10);
                    return eb.dy `
      <wui-list-wallet
        name="All Wallets"
        walletIcon="allWallets"
        showAllWallets
        @click=${this.onAllWallets.bind(this)}
        tagLabel=${`${a}+`}
        tagVariant="shade"
      ></wui-list-wallet>
    `
                }
                recommendedTemplate() {
                    let {
                        recommended: a
                    } = ew.ApiController.state, {
                        customWallets: s,
                        featuredWalletIds: p
                    } = ew.OptionsController.state, {
                        connectors: g
                    } = ew.ConnectorController.state, m = ew.MO.getRecentWallets(), v = g.filter(a => "ANNOUNCED" === a.type);
                    if (p || s || !a.length) return null;
                    let x = v.length + m.length,
                        _ = this.filterOutDuplicateWallets(a).slice(0, Math.max(0, 2 - x));
                    return _.map(a => eb.dy `
        <wui-list-wallet
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
          name=${a?.name??"Unknown"}
          @click=${()=>this.onConnectWallet(a)}
        >
        </wui-list-wallet>
      `)
                }
                onConnector(a) {
                    "WALLET_CONNECT" === a.type ? ew.j1.isMobile() ? ew.RouterController.push("AllWallets") : ew.RouterController.push("ConnectingWalletConnect") : ew.RouterController.push("ConnectingExternal", {
                        connector: a
                    })
                }
                filterOutDuplicateWallets(a) {
                    let {
                        connectors: s
                    } = ew.ConnectorController.state, p = ew.MO.getRecentWallets(), g = p.map(a => a.id), m = s.map(a => a.info ? .rdns).filter(Boolean), v = a.filter(a => !g.includes(a.id) && !m.includes(a.rdns ? ? void 0));
                    return v
                }
                onAllWallets() {
                    ew.Xs.sendEvent({
                        type: "track",
                        event: "CLICK_ALL_WALLETS"
                    }), ew.RouterController.push("AllWallets")
                }
                onConnectWallet(a) {
                    ew.RouterController.push("ConnectingWalletConnect", {
                        wallet: a
                    })
                }
            };
            eR.styles = eO, w3m_connect_view_decorate([(0, ev.SB)()], eR.prototype, "connectors", void 0), eR = w3m_connect_view_decorate([(0, em.customElement)("w3m-connect-view")], eR);
            var eT = eb.iv `
  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(3px);
    }
    50% {
      transform: translateX(-3px);
    }
    75% {
      transform: translateX(3px);
    }
    100% {
      transform: translateX(0);
    }
  }

  wui-flex:first-child:not(:only-child) {
    position: relative;
  }

  wui-loading-thumbnail {
    position: absolute;
  }

  wui-icon-box {
    position: absolute;
    right: calc(var(--wui-spacing-3xs) * -1);
    bottom: calc(var(--wui-spacing-3xs) * -1);
    opacity: 0;
    transform: scale(0.5);
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-lg);
  }

  wui-text[align='center'] {
    width: 100%;
    padding: 0px var(--wui-spacing-l);
  }

  [data-error='true'] wui-icon-box {
    opacity: 1;
    transform: scale(1);
  }

  [data-error='true'] > wui-flex:first-child {
    animation: shake 250ms cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  }

  [data-retry='false'] wui-link {
    display: none;
  }

  [data-retry='true'] wui-link {
    display: block;
    opacity: 1;
  }
`,
                w3m_connecting_widget_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let W3mConnectingWidget = class W3mConnectingWidget extends eb.oi {
                constructor() {
                    super(), this.wallet = ew.RouterController.state.data ? .wallet, this.connector = ew.RouterController.state.data ? .connector, this.timeout = void 0, this.secondaryBtnLabel = "Try again", this.secondaryBtnIcon = "refresh", this.secondaryLabel = "Accept connection request in the wallet", this.onConnect = void 0, this.onRender = void 0, this.onAutoConnect = void 0, this.isWalletConnect = !0, this.unsubscribe = [], this.imageSrc = ew.fz.getWalletImage(this.wallet) ? ? ew.fz.getConnectorImage(this.connector), this.name = this.wallet ? .name ? ? this.connector ? .name ? ? "Wallet", this.isRetrying = !1, this.uri = ew.ConnectionController.state.wcUri, this.error = ew.ConnectionController.state.wcError, this.ready = !1, this.showRetry = !1, this.buffering = !1, this.isMobile = !1, this.onRetry = void 0, this.unsubscribe.push(...[ew.ConnectionController.subscribeKey("wcUri", a => {
                        this.uri = a, this.isRetrying && this.onRetry && (this.isRetrying = !1, this.onConnect ? .())
                    }), ew.ConnectionController.subscribeKey("wcError", a => this.error = a), ew.ConnectionController.subscribeKey("buffering", a => this.buffering = a)])
                }
                firstUpdated() {
                    this.onAutoConnect ? .(), this.showRetry = !this.onAutoConnect
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a()), clearTimeout(this.timeout)
                }
                render() {
                    this.onRender ? .(), this.onShowRetry();
                    let a = this.error ? "Connection can be declined if a previous request is still active" : this.secondaryLabel,
                        s = `Continue in ${this.name}`;
                    return this.buffering && (s = "Connecting..."), this.error && (s = "Connection declined"), eb.dy `
      <wui-flex
        data-error=${(0,ey.o)(this.error)}
        data-retry=${this.showRetry}
        flexDirection="column"
        alignItems="center"
        .padding=${["3xl","xl","xl","xl"]}
        gap="xl"
      >
        <wui-flex justifyContent="center" alignItems="center">
          <wui-wallet-image size="lg" imageSrc=${(0,ey.o)(this.imageSrc)}></wui-wallet-image>

          ${this.error?null:this.loaderTemplate()}

          <wui-icon-box
            backgroundColor="error-100"
            background="opaque"
            iconColor="error-100"
            icon="close"
            size="sm"
            border
            borderColor="wui-color-bg-125"
          ></wui-icon-box>
        </wui-flex>

        <wui-flex flexDirection="column" alignItems="center" gap="xs">
          <wui-text variant="paragraph-500" color=${this.error?"error-100":"fg-100"}>
            ${s}
          </wui-text>
          <wui-text align="center" variant="small-500" color="fg-200">${a}</wui-text>
        </wui-flex>

        <wui-button
          variant="accent"
          ?disabled=${!this.error&&this.buffering}
          @click=${this.onTryAgain.bind(this)}
        >
          <wui-icon color="inherit" slot="iconLeft" name=${this.secondaryBtnIcon}></wui-icon>
          ${this.secondaryBtnLabel}
        </wui-button>
      </wui-flex>

      ${this.isWalletConnect?eb.dy`
            <wui-flex .padding=${["0","xl","xl","xl"]} justifyContent="center">
              <wui-link @click=${this.onCopyUri} color="fg-200">
                <wui-icon size="sm" color="fg-200" slot="iconLeft" name="copy"></wui-icon>
                Copy Link
              </wui-link>
            </wui-flex>
          `:null}

      <w3m-mobile-download-links .wallet=${this.wallet}></w3m-mobile-download-links>
    `
                }
                onShowRetry() {
                    if (this.error && !this.showRetry) {
                        this.showRetry = !0;
                        let a = this.shadowRoot ? .querySelector("wui-button");
                        a.animate([{
                            opacity: 0
                        }, {
                            opacity: 1
                        }], {
                            fill: "forwards",
                            easing: "ease"
                        })
                    }
                }
                onTryAgain() {
                    this.buffering || (ew.ConnectionController.setWcError(!1), this.onRetry ? (this.isRetrying = !0, this.onRetry ? .()) : this.onConnect ? .())
                }
                loaderTemplate() {
                    let a = ew.ThemeController.state.themeVariables["--w3m-border-radius-master"],
                        s = a ? parseInt(a.replace("px", ""), 10) : 4;
                    return eb.dy `<wui-loading-thumbnail radius=${9*s}></wui-loading-thumbnail>`
                }
                onCopyUri() {
                    try {
                        this.uri && (ew.j1.copyToClopboard(this.uri), ew.SnackController.showSuccess("Link copied"))
                    } catch {
                        ew.SnackController.showError("Failed to copy")
                    }
                }
            };
            W3mConnectingWidget.styles = eT, w3m_connecting_widget_decorate([(0, ev.SB)()], W3mConnectingWidget.prototype, "uri", void 0), w3m_connecting_widget_decorate([(0, ev.SB)()], W3mConnectingWidget.prototype, "error", void 0), w3m_connecting_widget_decorate([(0, ev.SB)()], W3mConnectingWidget.prototype, "ready", void 0), w3m_connecting_widget_decorate([(0, ev.SB)()], W3mConnectingWidget.prototype, "showRetry", void 0), w3m_connecting_widget_decorate([(0, ev.SB)()], W3mConnectingWidget.prototype, "buffering", void 0), w3m_connecting_widget_decorate([(0, ev.Cb)({
                type: Boolean
            })], W3mConnectingWidget.prototype, "isMobile", void 0), w3m_connecting_widget_decorate([(0, ev.Cb)()], W3mConnectingWidget.prototype, "onRetry", void 0);
            let eI = {
                    INJECTED: "browser",
                    ANNOUNCED: "browser"
                },
                eN = class extends W3mConnectingWidget {
                    constructor() {
                        if (super(), !this.connector) throw Error("w3m-connecting-view: No connector provided");
                        ew.Xs.sendEvent({
                            type: "track",
                            event: "SELECT_WALLET",
                            properties: {
                                name: this.connector.name ? ? "Unknown",
                                platform: eI[this.connector.type] ? ? "external"
                            }
                        }), this.onConnect = this.onConnectProxy.bind(this), this.onAutoConnect = this.onConnectProxy.bind(this), this.isWalletConnect = !1
                    }
                    async onConnectProxy() {
                        try {
                            this.error = !1, this.connector && (this.connector.imageUrl && ew.MO.setConnectedWalletImageUrl(this.connector.imageUrl), await ew.ConnectionController.connectExternal(this.connector), ew.IN.close(), ew.Xs.sendEvent({
                                type: "track",
                                event: "CONNECT_SUCCESS",
                                properties: {
                                    method: "external"
                                }
                            }))
                        } catch (a) {
                            ew.Xs.sendEvent({
                                type: "track",
                                event: "CONNECT_ERROR",
                                properties: {
                                    message: a ? .message ? ? "Unknown"
                                }
                            }), this.error = !0
                        }
                    }
                };
            eN = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-external-view")], eN);
            let ej = class extends eb.oi {
                constructor() {
                    super(...arguments), this.dappUrl = ew.OptionsController.state.metadata ? .url, this.dappName = ew.OptionsController.state.metadata ? .name
                }
                render() {
                    return eb.dy `
      <wui-flex justifyContent="center" .padding=${["2xl","0","xxl","0"]}>
        <w3m-connecting-siwe></w3m-connecting-siwe>
      </wui-flex>
      <wui-flex
        .padding=${["0","4xl","l","4xl"]}
        gap="s"
        justifyContent="space-between"
      >
        <wui-text variant="paragraph-500" align="center" color="fg-100"
          >${this.dappName??"Dapp"} wants to connect to your wallet</wui-text
        >
      </wui-flex>
      ${this.urlTemplate()}
      <wui-flex
        .padding=${["0","3xl","l","3xl"]}
        gap="s"
        justifyContent="space-between"
      >
        <wui-text variant="small-400" align="center" color="fg-200"
          >Sign this message to prove you own this wallet and to continue</wui-text
        >
      </wui-flex>
      <wui-flex .padding=${["l","xl","xl","xl"]} gap="s" justifyContent="space-between">
        <wui-button size="md" ?fullwidth=${!0} variant="shade" @click=${this.onCancel.bind(this)}>
          Cancel
        </wui-button>
        <wui-button size="md" ?fullwidth=${!0} variant="fill" @click=${this.onSign.bind(this)}>
          Sign
        </wui-button>
      </wui-flex>
    `
                }
                urlTemplate() {
                    return this.dappUrl ? eb.dy `<wui-flex .padding=${["0","0","l","0"]} justifyContent="center">
        <wui-button size="sm" variant="accentBg" @click=${this.onDappLink.bind(this)}>
          ${this.dappUrl}
          <wui-icon size="sm" color="inherit" slot="iconRight" name="externalLink"></wui-icon>
        </wui-button>
      </wui-flex>` : null
                }
                onDappLink() {
                    this.dappUrl && ew.j1.openHref(this.dappUrl, "_blank")
                }
                onSign() {}
                onCancel() {
                    ew.RouterController.goBack()
                }
            };
            ej = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-siwe-view")], ej);
            var w3m_connecting_wc_view_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let eM = class extends eb.oi {
                constructor() {
                    super(), this.interval = void 0, this.lastRetry = Date.now(), this.wallet = ew.RouterController.state.data ? .wallet, this.platform = void 0, this.platforms = [], this.initializeConnection(), this.interval = setInterval(this.initializeConnection.bind(this), ew.bq.TEN_SEC_MS)
                }
                disconnectedCallback() {
                    clearTimeout(this.interval)
                }
                render() {
                    return this.wallet ? (this.determinePlatforms(), eb.dy `
      ${this.headerTemplate()}
      <div>${this.platformTemplate()}</div>
    `) : eb.dy `<w3m-connecting-wc-qrcode></w3m-connecting-wc-qrcode>`
                }
                async initializeConnection(a = !1) {
                    try {
                        let {
                            wcPairingExpiry: s
                        } = ew.ConnectionController.state;
                        if (a || ew.j1.isPairingExpired(s)) {
                            if (ew.ConnectionController.connectWalletConnect(), this.wallet) {
                                let a = ew.fz.getWalletImage(this.wallet);
                                a && ew.MO.setConnectedWalletImageUrl(a)
                            } else {
                                let a = ew.ConnectorController.state.connectors,
                                    s = a.find(a => "WALLET_CONNECT" === a.type),
                                    p = ew.fz.getConnectorImage(s);
                                p && ew.MO.setConnectedWalletImageUrl(p)
                            }
                            await ew.ConnectionController.state.wcPromise, this.finalizeConnection(), ew.IN.close()
                        }
                    } catch (a) {
                        ew.Xs.sendEvent({
                            type: "track",
                            event: "CONNECT_ERROR",
                            properties: {
                                message: a ? .message ? ? "Unknown"
                            }
                        }), ew.ConnectionController.setWcError(!0), ew.j1.isAllowedRetry(this.lastRetry) && (ew.SnackController.showError("Declined"), this.lastRetry = Date.now(), this.initializeConnection(!0))
                    }
                }
                finalizeConnection() {
                    let {
                        wcLinking: a,
                        recentWallet: s
                    } = ew.ConnectionController.state;
                    a && ew.MO.setWalletConnectDeepLink(a), s && ew.MO.setWeb3ModalRecent(s), ew.Xs.sendEvent({
                        type: "track",
                        event: "CONNECT_SUCCESS",
                        properties: {
                            method: a ? "mobile" : "qrcode"
                        }
                    })
                }
                determinePlatforms() {
                    if (!this.wallet) throw Error("w3m-connecting-wc-view:determinePlatforms No wallet");
                    if (this.platform) return;
                    let {
                        mobile_link: a,
                        desktop_link: s,
                        webapp_link: p,
                        injected: g,
                        rdns: m
                    } = this.wallet, v = g ? .map(({
                        injected_id: a
                    }) => a).filter(Boolean), x = m ? [m] : v ? ? [], _ = x.length, E = ew.ConnectionController.checkInstalled(x), T = _ && E, F = s && !ew.j1.isMobile();
                    T && this.platforms.push("browser"), a && this.platforms.push(ew.j1.isMobile() ? "mobile" : "qrcode"), p && this.platforms.push("web"), F && this.platforms.push("desktop"), !T && _ && this.platforms.push("unsupported"), this.platform = this.platforms[0]
                }
                platformTemplate() {
                    switch (this.platform) {
                        case "browser":
                            return eb.dy `<w3m-connecting-wc-browser></w3m-connecting-wc-browser>`;
                        case "desktop":
                            return eb.dy `
          <w3m-connecting-wc-desktop .onRetry=${()=>this.initializeConnection(!0)}>
          </w3m-connecting-wc-desktop>
        `;
                        case "web":
                            return eb.dy `
          <w3m-connecting-wc-web .onRetry=${()=>this.initializeConnection(!0)}>
          </w3m-connecting-wc-web>
        `;
                        case "mobile":
                            return eb.dy `
          <w3m-connecting-wc-mobile isMobile .onRetry=${()=>this.initializeConnection(!0)}>
          </w3m-connecting-wc-mobile>
        `;
                        case "qrcode":
                            return eb.dy `<w3m-connecting-wc-qrcode></w3m-connecting-wc-qrcode>`;
                        default:
                            return eb.dy `<w3m-connecting-wc-unsupported></w3m-connecting-wc-unsupported>`
                    }
                }
                headerTemplate() {
                    let a = this.platforms.length > 1;
                    return a ? eb.dy `
      <w3m-connecting-header
        .platforms=${this.platforms}
        .onSelectPlatfrom=${this.onSelectPlatform.bind(this)}
      >
      </w3m-connecting-header>
    ` : null
                }
                async onSelectPlatform(a) {
                    let s = this.shadowRoot ? .querySelector("div");
                    s && (await s.animate([{
                        opacity: 1
                    }, {
                        opacity: 0
                    }], {
                        duration: 200,
                        fill: "forwards",
                        easing: "ease"
                    }).finished, this.platform = a, s.animate([{
                        opacity: 0
                    }, {
                        opacity: 1
                    }], {
                        duration: 200,
                        fill: "forwards",
                        easing: "ease"
                    }))
                }
            };
            w3m_connecting_wc_view_decorate([(0, ev.SB)()], eM.prototype, "platform", void 0), w3m_connecting_wc_view_decorate([(0, ev.SB)()], eM.prototype, "platforms", void 0), eM = w3m_connecting_wc_view_decorate([(0, em.customElement)("w3m-connecting-wc-view")], eM);
            let eD = class extends eb.oi {
                constructor() {
                    super(...arguments), this.wallet = ew.RouterController.state.data ? .wallet
                }
                render() {
                    if (!this.wallet) throw Error("w3m-downloads-view");
                    return eb.dy `
      <wui-flex gap="xs" flexDirection="column" .padding=${["s","s","l","s"]}>
        ${this.chromeTemplate()} ${this.iosTemplate()} ${this.androidTemplate()}
        ${this.homepageTemplate()}
      </wui-flex>
    `
                }
                chromeTemplate() {
                    return this.wallet ? .chrome_store ? eb.dy `<wui-list-item
      variant="icon"
      icon="chromeStore"
      iconVariant="square"
      @click=${this.onChromeStore.bind(this)}
      chevron
    >
      <wui-text variant="paragraph-500" color="fg-100">Chrome Extension</wui-text>
    </wui-list-item>` : null
                }
                iosTemplate() {
                    return this.wallet ? .app_store ? eb.dy `<wui-list-item
      variant="icon"
      icon="appStore"
      iconVariant="square"
      @click=${this.onAppStore.bind(this)}
      chevron
    >
      <wui-text variant="paragraph-500" color="fg-100">iOS App</wui-text>
    </wui-list-item>` : null
                }
                androidTemplate() {
                    return this.wallet ? .play_store ? eb.dy `<wui-list-item
      variant="icon"
      icon="playStore"
      iconVariant="square"
      @click=${this.onPlayStore.bind(this)}
      chevron
    >
      <wui-text variant="paragraph-500" color="fg-100">Android App</wui-text>
    </wui-list-item>` : null
                }
                homepageTemplate() {
                    return this.wallet ? .homepage ? eb.dy `
      <wui-list-item
        variant="icon"
        icon="browser"
        iconVariant="square-blue"
        @click=${this.onHomePage.bind(this)}
        chevron
      >
        <wui-text variant="paragraph-500" color="fg-100">Website</wui-text>
      </wui-list-item>
    ` : null
                }
                onChromeStore() {
                    this.wallet ? .chrome_store && ew.j1.openHref(this.wallet.chrome_store, "_blank")
                }
                onAppStore() {
                    this.wallet ? .app_store && ew.j1.openHref(this.wallet.app_store, "_blank")
                }
                onPlayStore() {
                    this.wallet ? .play_store && ew.j1.openHref(this.wallet.play_store, "_blank")
                }
                onHomePage() {
                    this.wallet ? .homepage && ew.j1.openHref(this.wallet.homepage, "_blank")
                }
            };
            eD = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-downloads-view")], eD);
            let eB = class extends eb.oi {
                render() {
                    return eb.dy `
      <wui-flex flexDirection="column" padding="s" gap="xs">
        ${this.recommendedWalletsTemplate()}
        <wui-list-wallet
          name="Explore all"
          showAllWallets
          walletIcon="allWallets"
          icon="externalLink"
          @click=${()=>{ew.j1.openHref("https://walletconnect.com/explorer?type=wallet","_blank")}}
        ></wui-list-wallet>
      </wui-flex>
    `
                }
                recommendedWalletsTemplate() {
                    let {
                        recommended: a,
                        featured: s
                    } = ew.ApiController.state, {
                        customWallets: p
                    } = ew.OptionsController.state, g = [...s, ...p ? ? [], ...a].slice(0, 4);
                    return g.map(a => eb.dy `
        <wui-list-wallet
          name=${a.name??"Unknown"}
          tagVariant="main"
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
          @click=${()=>{ew.j1.openHref(a.homepage??"https://walletconnect.com/explorer","_blank")}}
        ></wui-list-wallet>
      `)
                }
            };
            eB = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-get-wallet-view")], eB);
            var eU = eb.iv `
  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(3px);
    }
    50% {
      transform: translateX(-3px);
    }
    75% {
      transform: translateX(3px);
    }
    100% {
      transform: translateX(0);
    }
  }

  wui-flex:first-child:not(:only-child) {
    position: relative;
  }

  wui-loading-hexagon {
    position: absolute;
  }

  wui-icon-box {
    position: absolute;
    right: 4px;
    bottom: 0;
    opacity: 0;
    transform: scale(0.5);
    z-index: 1;
    transition: all var(--wui-ease-out-power-2) var(--wui-duration-lg);
  }

  wui-button {
    display: none;
  }

  [data-error='true'] wui-icon-box {
    opacity: 1;
    transform: scale(1);
  }

  [data-error='true'] > wui-flex:first-child {
    animation: shake 250ms cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  }

  wui-button[data-retry='true'] {
    display: block;
    opacity: 1;
  }
`,
                w3m_network_switch_view_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let eF = class extends eb.oi {
                constructor() {
                    super(), this.network = ew.RouterController.state.data ? .network, this.unsubscribe = [], this.showRetry = !1, this.error = !1, this.currentNetwork = ew.NetworkController.state.caipNetwork, this.unsubscribe.push(ew.NetworkController.subscribeKey("caipNetwork", a => {
                        a ? .id !== this.currentNetwork ? .id && ew.RouterController.goBack()
                    }))
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                firstUpdated() {
                    this.onSwitchNetwork()
                }
                render() {
                    if (!this.network) throw Error("w3m-network-switch-view: No network provided");
                    this.onShowRetry();
                    let a = this.error ? "Switch declined" : "Approve in wallet",
                        s = this.error ? "Switch can be declined if chain is not supported by a wallet or previous request is still active" : "Accept connection request in your wallet";
                    return eb.dy `
      <wui-flex
        data-error=${this.error}
        flexDirection="column"
        alignItems="center"
        .padding=${["3xl","xl","3xl","xl"]}
        gap="xl"
      >
        <wui-flex justifyContent="center" alignItems="center">
          <wui-network-image
            size="lg"
            imageSrc=${(0,ey.o)(ew.fz.getNetworkImage(this.network))}
          ></wui-network-image>

          ${this.error?null:eb.dy`<wui-loading-hexagon></wui-loading-hexagon>`}

          <wui-icon-box
            backgroundColor="error-100"
            background="opaque"
            iconColor="error-100"
            icon="close"
            size="sm"
            ?border=${!0}
            borderColor="wui-color-bg-125"
          ></wui-icon-box>
        </wui-flex>

        <wui-flex flexDirection="column" alignItems="center" gap="xs">
          <wui-text align="center" variant="paragraph-500" color="fg-100">${a}</wui-text>
          <wui-text align="center" variant="small-500" color="fg-200">${s}</wui-text>
        </wui-flex>

        <wui-button
          data-retry=${this.showRetry}
          variant="fill"
          .disabled=${!this.error}
          @click=${this.onSwitchNetwork.bind(this)}
        >
          <wui-icon color="inherit" slot="iconLeft" name="refresh"></wui-icon>
          Try again
        </wui-button>
      </wui-flex>
    `
                }
                onShowRetry() {
                    if (this.error && !this.showRetry) {
                        this.showRetry = !0;
                        let a = this.shadowRoot ? .querySelector("wui-button");
                        a.animate([{
                            opacity: 0
                        }, {
                            opacity: 1
                        }], {
                            fill: "forwards",
                            easing: "ease"
                        })
                    }
                }
                async onSwitchNetwork() {
                    try {
                        this.error = !1, this.network && (await ew.NetworkController.switchActiveNetwork(this.network), ew.RouterController.goBack())
                    } catch {
                        this.error = !0
                    }
                }
            };
            eF.styles = eU, w3m_network_switch_view_decorate([(0, ev.SB)()], eF.prototype, "showRetry", void 0), w3m_network_switch_view_decorate([(0, ev.SB)()], eF.prototype, "error", void 0), w3m_network_switch_view_decorate([(0, ev.SB)()], eF.prototype, "currentNetwork", void 0), eF = w3m_network_switch_view_decorate([(0, em.customElement)("w3m-network-switch-view")], eF);
            var w3m_networks_view_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let eL = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.caipNetwork = ew.NetworkController.state.caipNetwork, this.unsubscribe.push(ew.NetworkController.subscribeKey("caipNetwork", a => this.caipNetwork = a))
                }
                disconnectedCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    return eb.dy `
      <wui-grid padding="s" gridTemplateColumns="repeat(4, 1fr)" rowGap="l" columnGap="xs">
        ${this.networksTemplate()}
      </wui-grid>

      <wui-separator></wui-separator>

      <wui-flex padding="s" flexDirection="column" gap="m" alignItems="center">
        <wui-text variant="small-500" color="fg-300" align="center">
          Your connected wallet may not support some of the networks available for this dApp
        </wui-text>
        <wui-link @click=${this.onNetworkHelp.bind(this)}>
          <wui-icon size="xs" color="accent-100" slot="iconLeft" name="helpCircle"></wui-icon>
          What is a network
        </wui-link>
      </wui-flex>
    `
                }
                onNetworkHelp() {
                    ew.Xs.sendEvent({
                        type: "track",
                        event: "CLICK_NETWORK_HELP"
                    }), ew.RouterController.push("WhatIsANetwork")
                }
                networksTemplate() {
                    let {
                        approvedCaipNetworkIds: a,
                        requestedCaipNetworks: s,
                        supportsAllNetworks: p
                    } = ew.NetworkController.state;
                    return a ? .length && s ? .sort((s, p) => a.indexOf(p.id) - a.indexOf(s.id)), s ? .map(s => eb.dy `
        <wui-card-select
          .selected=${this.caipNetwork?.id===s.id}
          imageSrc=${ey.o(ew.fz.getNetworkImage(s))}
          type="network"
          name=${s.name??s.id}
          @click=${()=>this.onSwitchNetwork(s)}
          .disabled=${!p&&!a?.includes(s.id)}
        ></wui-card-select>
      `)
                }
                async onSwitchNetwork(a) {
                    let {
                        isConnected: s
                    } = ew.AccountController.state, {
                        approvedCaipNetworkIds: p,
                        supportsAllNetworks: g,
                        caipNetwork: m
                    } = ew.NetworkController.state;
                    s && m ? .id !== a.id ? p ? .includes(a.id) ? await ew.NetworkController.switchActiveNetwork(a) : g && ew.RouterController.push("SwitchNetwork", {
                        network: a
                    }) : s || (ew.NetworkController.setCaipNetwork(a), ew.RouterController.push("Connect"))
                }
            };
            w3m_networks_view_decorate([(0, ev.SB)()], eL.prototype, "caipNetwork", void 0), eL = w3m_networks_view_decorate([(0, em.customElement)("w3m-networks-view")], eL);
            var eW = p(44519),
                ez = eb.iv `
  :host > wui-flex:first-child {
    height: 500px;
    overflow-y: auto;
    overflow-x: hidden;
    scrollbar-width: none;
  }
`,
                w3m_transactions_view_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let eq = "last-transaction",
                eH = class extends eb.oi {
                    constructor() {
                        super(), this.unsubscribe = [], this.paginationObserver = void 0, this.address = ew.AccountController.state.address, this.transactions = ew.sl.state.transactions, this.transactionsByYear = ew.sl.state.transactionsByYear, this.loading = ew.sl.state.loading, this.empty = ew.sl.state.empty, this.next = ew.sl.state.next, this.unsubscribe.push(...[ew.AccountController.subscribe(a => {
                            a.isConnected && this.address !== a.address && (this.address = a.address, ew.sl.resetTransactions(), ew.sl.fetchTransactions(a.address))
                        }), ew.sl.subscribe(a => {
                            this.transactions = a.transactions, this.transactionsByYear = a.transactionsByYear, this.loading = a.loading, this.empty = a.empty, this.next = a.next
                        })])
                    }
                    firstUpdated() {
                        0 === this.transactions.length && ew.sl.fetchTransactions(this.address), this.createPaginationObserver()
                    }
                    updated() {
                        this.setPaginationObserver()
                    }
                    disconnectedCallback() {
                        this.unsubscribe.forEach(a => a())
                    }
                    render() {
                        return eb.dy `
      <wui-flex flexDirection="column" padding="s" gap="s">
        ${this.empty?null:this.templateTransactionsByYear()}
        ${this.loading?this.templateLoading():null}
        ${!this.loading&&this.empty?this.templateEmpty():null}
      </wui-flex>
    `
                    }
                    templateTransactionsByYear() {
                        let a = Object.keys(this.transactionsByYear).sort().reverse();
                        return a.map((s, p) => {
                            let g = p === a.length - 1,
                                m = parseInt(s, 10),
                                v = em.TransactionUtil.getTransactionGroupTitle(m),
                                x = this.transactionsByYear[m];
                            return x ? eb.dy `
        <wui-flex flexDirection="column" gap="sm">
          <wui-flex
            alignItems="center"
            flexDirection="row"
            .padding=${["xs","s","s","s"]}
          >
            <wui-text variant="paragraph-500" color="fg-200">${v}</wui-text>
          </wui-flex>
          <wui-flex flexDirection="column" gap="xs">
            ${this.templateTransactions(x,g)}
          </wui-flex>
        </wui-flex>
      ` : null
                        })
                    }
                    templateRenderTransaction(a, s) {
                        let {
                            date: p,
                            descriptions: g,
                            direction: m,
                            isAllNFT: v,
                            images: x,
                            status: _,
                            transfers: E,
                            type: T
                        } = this.getTransactionListItemProps(a), F = E ? .length > 1, W = E ? .length === 2;
                        return W && !v ? eb.dy `
        <wui-transaction-list-item
          date=${p}
          direction=${m}
          id=${s&&this.next?eq:""}
          status=${_}
          type=${T}
          .images=${x}
          .descriptions=${g}
        ></wui-transaction-list-item>
      ` : F ? E.map((a, g) => {
                            let m = em.TransactionUtil.getTransferDescription(a),
                                v = s && g === E.length - 1;
                            return eb.dy ` <wui-transaction-list-item
          date=${p}
          direction=${a.direction}
          id=${v&&this.next?eq:""}
          status=${_}
          type=${T}
          onlyDirectionIcon=${!0}
          .images=${[x?.[g]]}
          .descriptions=${[m]}
        ></wui-transaction-list-item>`
                        }) : eb.dy `
      <wui-transaction-list-item
        date=${p}
        direction=${m}
        id=${s&&this.next?eq:""}
        status=${_}
        type=${T}
        .images=${x}
        .descriptions=${g}
      ></wui-transaction-list-item>
    `
                    }
                    templateTransactions(a, s) {
                        return a.map((p, g) => {
                            let m = s && g === a.length - 1;
                            return eb.dy `${this.templateRenderTransaction(p,m)}`
                        })
                    }
                    templateEmpty() {
                        return eb.dy `
      <wui-flex
        flexGrow="1"
        flexDirection="column"
        justifyContent="center"
        alignItems="center"
        .padding=${["3xl","xl","3xl","xl"]}
        gap="xl"
      >
        <wui-icon-box
          backgroundColor="glass-005"
          background="gray"
          iconColor="fg-200"
          icon="wallet"
          size="lg"
          ?border=${!0}
          borderColor="wui-color-bg-125"
        ></wui-icon-box>
        <wui-flex flexDirection="column" alignItems="center" gap="xs">
          <wui-text align="center" variant="paragraph-500" color="fg-100"
            >No Transactions yet</wui-text
          >
          <wui-text align="center" variant="small-500" color="fg-200"
            >Start trading on dApps <br />
            to grow your wallet!</wui-text
          >
        </wui-flex>
      </wui-flex>
    `
                    }
                    templateLoading() {
                        return Array(7).fill(eb.dy ` <wui-transaction-list-item-loader></wui-transaction-list-item-loader> `).map(a => a)
                    }
                    createPaginationObserver() {
                        let {
                            projectId: a
                        } = ew.OptionsController.state;
                        this.paginationObserver = new IntersectionObserver(([s]) => {
                            s ? .isIntersecting && !this.loading && (ew.sl.fetchTransactions(this.address), ew.Xs.sendEvent({
                                type: "track",
                                event: "LOAD_MORE_TRANSACTIONS",
                                properties: {
                                    address: this.address,
                                    projectId: a,
                                    cursor: this.next
                                }
                            }))
                        }, {}), this.setPaginationObserver()
                    }
                    setPaginationObserver() {
                        this.paginationObserver ? .disconnect();
                        let a = this.shadowRoot ? .querySelector(`#${eq}`);
                        a && this.paginationObserver ? .observe(a)
                    }
                    getTransactionListItemProps(a) {
                        let s = eW.E.getRelativeDateFromNow(a ? .metadata ? .minedAt),
                            p = em.TransactionUtil.getTransactionDescriptions(a),
                            g = a ? .transfers,
                            m = a ? .transfers ? .[0],
                            v = !!m && a ? .transfers ? .every(a => !!a.nft_info),
                            x = em.TransactionUtil.getTransactionImages(g);
                        return {
                            date: s,
                            direction: m ? .direction,
                            descriptions: p,
                            isAllNFT: v,
                            images: x,
                            status: a.metadata ? .status,
                            transfers: g,
                            type: a.metadata ? .operationType
                        }
                    }
                };
            eH.styles = ez, w3m_transactions_view_decorate([(0, ev.SB)()], eH.prototype, "address", void 0), w3m_transactions_view_decorate([(0, ev.SB)()], eH.prototype, "transactions", void 0), w3m_transactions_view_decorate([(0, ev.SB)()], eH.prototype, "transactionsByYear", void 0), w3m_transactions_view_decorate([(0, ev.SB)()], eH.prototype, "loading", void 0), w3m_transactions_view_decorate([(0, ev.SB)()], eH.prototype, "empty", void 0), w3m_transactions_view_decorate([(0, ev.SB)()], eH.prototype, "next", void 0), eH = w3m_transactions_view_decorate([(0, em.customElement)("w3m-transactions-view")], eH);
            let eG = [{
                    images: ["network", "layers", "system"],
                    title: "The system’s nuts and bolts",
                    text: "A network is what brings the blockchain to life, as this technical infrastructure allows apps to access the ledger and smart contract services."
                }, {
                    images: ["noun", "defiAlt", "dao"],
                    title: "Designed for different uses",
                    text: "Each network is designed differently, and may therefore suit certain apps and experiences."
                }],
                eZ = class extends eb.oi {
                    render() {
                        return eb.dy `
      <wui-flex
        flexDirection="column"
        .padding=${["xxl","xl","xl","xl"]}
        alignItems="center"
        gap="xl"
      >
        <w3m-help-widget .data=${eG}></w3m-help-widget>
        <wui-button
          variant="fill"
          size="sm"
          @click=${()=>{ew.j1.openHref("https://ethereum.org/en/developers/docs/networks/","_blank")}}
        >
          Learn more
          <wui-icon color="inherit" slot="iconRight" name="externalLink"></wui-icon>
        </wui-button>
      </wui-flex>
    `
                    }
                };
            eZ = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-what-is-a-network-view")], eZ);
            let eK = [{
                    images: ["login", "profile", "lock"],
                    title: "One login for all of web3",
                    text: "Log in to any app by connecting your wallet. Say goodbye to countless passwords!"
                }, {
                    images: ["defi", "nft", "eth"],
                    title: "A home for your digital assets",
                    text: "A wallet lets you store, send and receive digital assets like cryptocurrencies and NFTs."
                }, {
                    images: ["browser", "noun", "dao"],
                    title: "Your gateway to a new web",
                    text: "With your wallet, you can explore and interact with DeFi, NFTs, DAOs, and much more."
                }],
                eV = class extends eb.oi {
                    render() {
                        return eb.dy `
      <wui-flex
        flexDirection="column"
        .padding=${["xxl","xl","xl","xl"]}
        alignItems="center"
        gap="xl"
      >
        <w3m-help-widget .data=${eK}></w3m-help-widget>
        <wui-button variant="fill" size="sm" @click=${this.onGetWallet.bind(this)}>
          <wui-icon color="inherit" slot="iconLeft" name="wallet"></wui-icon>
          Get a Wallet
        </wui-button>
      </wui-flex>
    `
                    }
                    onGetWallet() {
                        ew.Xs.sendEvent({
                            type: "track",
                            event: "CLICK_GET_WALLET"
                        }), ew.RouterController.push("GetWallet")
                    }
                };
            eV = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-what-is-a-wallet-view")], eV);
            var eQ = eb.iv `
  wui-grid {
    max-height: clamp(360px, 400px, 80vh);
    overflow: scroll;
    scrollbar-width: none;
    grid-auto-rows: min-content;
    grid-template-columns: repeat(auto-fill, 76px);
  }

  @media (max-width: 435px) {
    wui-grid {
      grid-template-columns: repeat(auto-fill, 77px);
    }
  }

  wui-grid[data-scroll='false'] {
    overflow: hidden;
  }

  wui-grid::-webkit-scrollbar {
    display: none;
  }

  wui-loading-spinner {
    padding-top: var(--wui-spacing-l);
    padding-bottom: var(--wui-spacing-l);
    justify-content: center;
    grid-column: 1 / span 4;
  }
`,
                w3m_all_wallets_list_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let eY = "local-paginator",
                eX = class extends eb.oi {
                    constructor() {
                        super(), this.unsubscribe = [], this.paginationObserver = void 0, this.initial = !ew.ApiController.state.wallets.length, this.wallets = ew.ApiController.state.wallets, this.recommended = ew.ApiController.state.recommended, this.featured = ew.ApiController.state.featured, this.unsubscribe.push(...[ew.ApiController.subscribeKey("wallets", a => this.wallets = a), ew.ApiController.subscribeKey("recommended", a => this.recommended = a), ew.ApiController.subscribeKey("featured", a => this.featured = a)])
                    }
                    firstUpdated() {
                        this.initialFetch(), this.createPaginationObserver()
                    }
                    disconnectedCallback() {
                        this.unsubscribe.forEach(a => a()), this.paginationObserver ? .disconnect()
                    }
                    render() {
                        return eb.dy `
      <wui-grid
        data-scroll=${!this.initial}
        .padding=${["0","s","s","s"]}
        columnGap="xxs"
        rowGap="l"
        justifyContent="space-between"
      >
        ${this.initial?this.shimmerTemplate(16):this.walletsTemplate()}
        ${this.paginationLoaderTemplate()}
      </wui-grid>
    `
                    }
                    async initialFetch() {
                        let a = this.shadowRoot ? .querySelector("wui-grid");
                        this.initial && a && (await ew.ApiController.fetchWallets({
                            page: 1
                        }), await a.animate([{
                            opacity: 1
                        }, {
                            opacity: 0
                        }], {
                            duration: 200,
                            fill: "forwards",
                            easing: "ease"
                        }).finished, this.initial = !1, a.animate([{
                            opacity: 0
                        }, {
                            opacity: 1
                        }], {
                            duration: 200,
                            fill: "forwards",
                            easing: "ease"
                        }))
                    }
                    shimmerTemplate(a, s) {
                        return [...Array(a)].map(() => eb.dy `
        <wui-card-select-loader type="wallet" id=${(0,ey.o)(s)}></wui-card-select-loader>
      `)
                    }
                    walletsTemplate() {
                        let a = [...this.featured, ...this.recommended, ...this.wallets];
                        return a.map(a => eb.dy `
        <wui-card-select
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
          type="wallet"
          name=${a.name}
          @click=${()=>this.onConnectWallet(a)}
        ></wui-card-select>
      `)
                    }
                    paginationLoaderTemplate() {
                        let {
                            wallets: a,
                            recommended: s,
                            featured: p,
                            count: g
                        } = ew.ApiController.state, m = window.innerWidth < 352 ? 3 : 4, v = a.length + s.length, x = Math.ceil(v / m) * m - v + m;
                        return (x -= a.length ? p.length % m : 0, 0 === g || [...p, ...a, ...s].length < g) ? this.shimmerTemplate(x, eY) : null
                    }
                    createPaginationObserver() {
                        let a = this.shadowRoot ? .querySelector(`#${eY}`);
                        a && (this.paginationObserver = new IntersectionObserver(([a]) => {
                            if (a ? .isIntersecting && !this.initial) {
                                let {
                                    page: a,
                                    count: s,
                                    wallets: p
                                } = ew.ApiController.state;
                                p.length < s && ew.ApiController.fetchWallets({
                                    page: a + 1
                                })
                            }
                        }), this.paginationObserver.observe(a))
                    }
                    onConnectWallet(a) {
                        let {
                            connectors: s
                        } = ew.ConnectorController.state, p = s.find(({
                            explorerId: s
                        }) => s === a.id);
                        p ? ew.RouterController.push("ConnectingExternal", {
                            connector: p
                        }) : ew.RouterController.push("ConnectingWalletConnect", {
                            wallet: a
                        })
                    }
                };
            eX.styles = eQ, w3m_all_wallets_list_decorate([(0, ev.SB)()], eX.prototype, "initial", void 0), w3m_all_wallets_list_decorate([(0, ev.SB)()], eX.prototype, "wallets", void 0), w3m_all_wallets_list_decorate([(0, ev.SB)()], eX.prototype, "recommended", void 0), w3m_all_wallets_list_decorate([(0, ev.SB)()], eX.prototype, "featured", void 0), eX = w3m_all_wallets_list_decorate([(0, em.customElement)("w3m-all-wallets-list")], eX);
            var eJ = eb.iv `
  wui-grid,
  wui-loading-spinner,
  wui-flex {
    height: 360px;
  }

  wui-grid {
    overflow: scroll;
    scrollbar-width: none;
    grid-auto-rows: min-content;
  }

  wui-grid[data-scroll='false'] {
    overflow: hidden;
  }

  wui-grid::-webkit-scrollbar {
    display: none;
  }

  wui-loading-spinner {
    justify-content: center;
    align-items: center;
  }
`,
                w3m_all_wallets_search_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let e0 = class extends eb.oi {
                constructor() {
                    super(...arguments), this.prevQuery = "", this.loading = !0, this.query = ""
                }
                render() {
                    return this.onSearch(), this.loading ? eb.dy `<wui-loading-spinner color="accent-100"></wui-loading-spinner>` : this.walletsTemplate()
                }
                async onSearch() {
                    this.query !== this.prevQuery && (this.prevQuery = this.query, this.loading = !0, await ew.ApiController.searchWallet({
                        search: this.query
                    }), this.loading = !1)
                }
                walletsTemplate() {
                    let {
                        search: a
                    } = ew.ApiController.state;
                    return a.length ? eb.dy `
      <wui-grid
        .padding=${["0","s","s","s"]}
        gridTemplateColumns="repeat(4, 1fr)"
        rowGap="l"
        columnGap="xs"
      >
        ${a.map(a=>eb.dy`
            <wui-card-select
              imageSrc=${(0,ey.o)(ew.fz.getWalletImage(a))}
              type="wallet"
              name=${a.name}
              @click=${()=>this.onConnectWallet(a)}
            ></wui-card-select>
          `)}
      </wui-grid>
    ` : eb.dy `
        <wui-flex justifyContent="center" alignItems="center" gap="s" flexDirection="column">
          <wui-icon-box
            size="lg"
            iconColor="fg-200"
            backgroundColor="fg-300"
            icon="wallet"
            background="transparent"
          ></wui-icon-box>
          <wui-text color="fg-200" variant="paragraph-500">No Wallet found</wui-text>
        </wui-flex>
      `
                }
                onConnectWallet(a) {
                    let {
                        connectors: s
                    } = ew.ConnectorController.state, p = s.find(({
                        explorerId: s
                    }) => s === a.id);
                    p ? ew.RouterController.push("ConnectingExternal", {
                        connector: p
                    }) : ew.RouterController.push("ConnectingWalletConnect", {
                        wallet: a
                    })
                }
            };
            e0.styles = eJ, w3m_all_wallets_search_decorate([(0, ev.SB)()], e0.prototype, "loading", void 0), w3m_all_wallets_search_decorate([(0, ev.Cb)()], e0.prototype, "query", void 0), e0 = w3m_all_wallets_search_decorate([(0, em.customElement)("w3m-all-wallets-search")], e0);
            var w3m_connecting_header_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let e1 = class extends eb.oi {
                constructor() {
                    super(), this.platformTabs = [], this.unsubscribe = [], this.platforms = [], this.onSelectPlatfrom = void 0, this.buffering = !1, this.unsubscribe.push(ew.ConnectionController.subscribeKey("buffering", a => this.buffering = a))
                }
                disconnectCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    let a = this.generateTabs();
                    return eb.dy `
      <wui-flex justifyContent="center" .padding=${["l","0","0","0"]}>
        <wui-tabs
          ?disabled=${this.buffering}
          .tabs=${a}
          .onTabChange=${this.onTabChange.bind(this)}
        ></wui-tabs>
      </wui-flex>
    `
                }
                generateTabs() {
                    let a = this.platforms.map(a => "browser" === a ? {
                        label: "Browser",
                        icon: "extension",
                        platform: "browser"
                    } : "mobile" === a ? {
                        label: "Mobile",
                        icon: "mobile",
                        platform: "mobile"
                    } : "qrcode" === a ? {
                        label: "Mobile",
                        icon: "mobile",
                        platform: "qrcode"
                    } : "web" === a ? {
                        label: "Webapp",
                        icon: "browser",
                        platform: "web"
                    } : "desktop" === a ? {
                        label: "Desktop",
                        icon: "desktop",
                        platform: "desktop"
                    } : {
                        label: "Browser",
                        icon: "extension",
                        platform: "unsupported"
                    });
                    return this.platformTabs = a.map(({
                        platform: a
                    }) => a), a
                }
                onTabChange(a) {
                    let s = this.platformTabs[a];
                    s && this.onSelectPlatfrom ? .(s)
                }
            };
            w3m_connecting_header_decorate([(0, ev.Cb)({
                type: Array
            })], e1.prototype, "platforms", void 0), w3m_connecting_header_decorate([(0, ev.Cb)()], e1.prototype, "onSelectPlatfrom", void 0), w3m_connecting_header_decorate([(0, ev.SB)()], e1.prototype, "buffering", void 0), e1 = w3m_connecting_header_decorate([(0, em.customElement)("w3m-connecting-header")], e1);
            let e2 = class extends W3mConnectingWidget {
                constructor() {
                    if (super(), !this.wallet) throw Error("w3m-connecting-wc-browser: No wallet provided");
                    this.onConnect = this.onConnectProxy.bind(this), this.onAutoConnect = this.onConnectProxy.bind(this), ew.Xs.sendEvent({
                        type: "track",
                        event: "SELECT_WALLET",
                        properties: {
                            name: this.wallet.name,
                            platform: "browser"
                        }
                    })
                }
                async onConnectProxy() {
                    try {
                        this.error = !1;
                        let {
                            connectors: a
                        } = ew.ConnectorController.state, s = a.find(a => "ANNOUNCED" === a.type && a.info ? .rdns === this.wallet ? .rdns), p = a.find(a => "INJECTED" === a.type);
                        s ? await ew.ConnectionController.connectExternal(s) : p && await ew.ConnectionController.connectExternal(p), ew.IN.close(), ew.Xs.sendEvent({
                            type: "track",
                            event: "CONNECT_SUCCESS",
                            properties: {
                                method: "browser"
                            }
                        })
                    } catch (a) {
                        ew.Xs.sendEvent({
                            type: "track",
                            event: "CONNECT_ERROR",
                            properties: {
                                message: a ? .message ? ? "Unknown"
                            }
                        }), this.error = !0
                    }
                }
            };
            e2 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-wc-browser")], e2);
            let e5 = class extends W3mConnectingWidget {
                constructor() {
                    if (super(), !this.wallet) throw Error("w3m-connecting-wc-desktop: No wallet provided");
                    this.onConnect = this.onConnectProxy.bind(this), this.onRender = this.onRenderProxy.bind(this), ew.Xs.sendEvent({
                        type: "track",
                        event: "SELECT_WALLET",
                        properties: {
                            name: this.wallet.name,
                            platform: "desktop"
                        }
                    })
                }
                onRenderProxy() {
                    !this.ready && this.uri && (this.ready = !0, this.timeout = setTimeout(() => {
                        this.onConnect ? .()
                    }, 200))
                }
                onConnectProxy() {
                    if (this.wallet ? .desktop_link && this.uri) try {
                        this.error = !1;
                        let {
                            desktop_link: a,
                            name: s
                        } = this.wallet, {
                            redirect: p,
                            href: g
                        } = ew.j1.formatNativeUrl(a, this.uri);
                        ew.ConnectionController.setWcLinking({
                            name: s,
                            href: g
                        }), ew.ConnectionController.setRecentWallet(this.wallet), ew.j1.openHref(p, "_self")
                    } catch {
                        this.error = !0
                    }
                }
            };
            e5 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-wc-desktop")], e5);
            let e3 = class extends W3mConnectingWidget {
                constructor() {
                    if (super(), !this.wallet) throw Error("w3m-connecting-wc-mobile: No wallet provided");
                    this.onConnect = this.onConnectProxy.bind(this), this.onRender = this.onRenderProxy.bind(this), document.addEventListener("visibilitychange", this.onBuffering.bind(this)), ew.Xs.sendEvent({
                        type: "track",
                        event: "SELECT_WALLET",
                        properties: {
                            name: this.wallet.name,
                            platform: "mobile"
                        }
                    })
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), document.removeEventListener("visibilitychange", this.onBuffering.bind(this))
                }
                onRenderProxy() {
                    !this.ready && this.uri && (this.ready = !0, this.onConnect ? .())
                }
                onConnectProxy() {
                    if (this.wallet ? .mobile_link && this.uri) try {
                        this.error = !1;
                        let {
                            mobile_link: a,
                            name: s
                        } = this.wallet, {
                            redirect: p,
                            href: g
                        } = ew.j1.formatNativeUrl(a, this.uri);
                        ew.ConnectionController.setWcLinking({
                            name: s,
                            href: g
                        }), ew.ConnectionController.setRecentWallet(this.wallet), ew.j1.openHref(p, "_self")
                    } catch {
                        this.error = !0
                    }
                }
                onBuffering() {
                    let a = ew.j1.isIos();
                    document ? .visibilityState === "visible" && !this.error && a && (ew.ConnectionController.setBuffering(!0), setTimeout(() => {
                        ew.ConnectionController.setBuffering(!1)
                    }, 5e3))
                }
            };
            e3 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-wc-mobile")], e3);
            var e4 = eb.iv `
  @keyframes fadein {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  wui-shimmer {
    width: 100%;
    aspect-ratio: 1 / 1;
    border-radius: clamp(0px, var(--wui-border-radius-l), 40px) !important;
  }

  wui-qr-code {
    opacity: 0;
    animation-duration: 200ms;
    animation-timing-function: ease;
    animation-name: fadein;
    animation-fill-mode: forwards;
  }
`;
            let e6 = class extends W3mConnectingWidget {
                constructor() {
                    super(), this.forceUpdate = () => {
                        this.requestUpdate()
                    }, window.addEventListener("resize", this.forceUpdate), ew.Xs.sendEvent({
                        type: "track",
                        event: "SELECT_WALLET",
                        properties: {
                            name: this.wallet ? .name ? ? "WalletConnect",
                            platform: "qrcode"
                        }
                    })
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), window.removeEventListener("resize", this.forceUpdate)
                }
                render() {
                    return this.onRenderProxy(), eb.dy `
      <wui-flex padding="xl" flexDirection="column" gap="xl" alignItems="center">
        <wui-shimmer borderRadius="l" width="100%"> ${this.qrCodeTemplate()} </wui-shimmer>

        <wui-text variant="paragraph-500" color="fg-100">
          Scan this QR Code with your phone
        </wui-text>

        <wui-link @click=${this.onCopyUri} color="fg-200">
          <wui-icon size="sm" color="fg-200" slot="iconLeft" name="copy"></wui-icon>
          Copy Link
        </wui-link>
      </wui-flex>

      <w3m-mobile-download-links .wallet=${this.wallet}></w3m-mobile-download-links>
    `
                }
                onRenderProxy() {
                    !this.ready && this.uri && (this.timeout = setTimeout(() => {
                        this.ready = !0
                    }, 200))
                }
                qrCodeTemplate() {
                    if (!this.uri || !this.ready) return null;
                    let a = this.getBoundingClientRect().width - 40,
                        s = this.wallet ? this.wallet.name : void 0;
                    return ew.ConnectionController.setWcLinking(void 0), ew.ConnectionController.setRecentWallet(this.wallet), eb.dy `<wui-qr-code
      size=${a}
      theme=${ew.ThemeController.state.themeMode}
      uri=${this.uri}
      imageSrc=${(0,ey.o)(ew.fz.getWalletImage(this.wallet))}
      alt=${(0,ey.o)(s)}
    ></wui-qr-code>`
                }
            };
            e6.styles = e4, e6 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-wc-qrcode")], e6);
            var e8 = eb.iv `
  :host {
    display: flex;
    justify-content: center;
    gap: var(--wui-spacing-2xl);
  }

  wui-visual-thumbnail:nth-child(1) {
    z-index: 1;
  }
`;
            let e9 = class extends eb.oi {
                constructor() {
                    super(...arguments), this.dappImageUrl = ew.OptionsController.state.metadata ? .icons, this.walletImageUrl = ew.MO.getConnectedWalletImageUrl()
                }
                firstUpdated() {
                    let a = this.shadowRoot ? .querySelectorAll("wui-visual-thumbnail");
                    a ? .[0] && this.createAnimation(a[0], "translate(18px)"), a ? .[1] && this.createAnimation(a[1], "translate(-18px)")
                }
                render() {
                    return eb.dy `
      <wui-visual-thumbnail
        ?borderRadiusFull=${!0}
        .imageSrc=${this.dappImageUrl?.[0]}
      ></wui-visual-thumbnail>
      <wui-visual-thumbnail .imageSrc=${this.walletImageUrl}></wui-visual-thumbnail>
    `
                }
                createAnimation(a, s) {
                    a.animate([{
                        transform: "translateX(0px)"
                    }, {
                        transform: s
                    }], {
                        duration: 1600,
                        easing: "cubic-bezier(0.56, 0, 0.48, 1)",
                        direction: "alternate",
                        iterations: 1 / 0
                    })
                }
            };
            e9.styles = e8, e9 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-siwe")], e9);
            let e7 = class extends eb.oi {
                constructor() {
                    if (super(), this.wallet = ew.RouterController.state.data ? .wallet, !this.wallet) throw Error("w3m-connecting-wc-unsupported: No wallet provided");
                    ew.Xs.sendEvent({
                        type: "track",
                        event: "SELECT_WALLET",
                        properties: {
                            name: this.wallet.name,
                            platform: "browser"
                        }
                    })
                }
                render() {
                    return eb.dy `
      <wui-flex
        flexDirection="column"
        alignItems="center"
        .padding=${["3xl","xl","xl","xl"]}
        gap="xl"
      >
        <wui-wallet-image
          size="lg"
          imageSrc=${(0,ey.o)(ew.fz.getWalletImage(this.wallet))}
        ></wui-wallet-image>

        <wui-text variant="paragraph-500" color="fg-100">Not Detected</wui-text>
      </wui-flex>

      <w3m-mobile-download-links .wallet=${this.wallet}></w3m-mobile-download-links>
    `
                }
            };
            e7 = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-wc-unsupported")], e7);
            let tt = class extends W3mConnectingWidget {
                constructor() {
                    if (super(), !this.wallet) throw Error("w3m-connecting-wc-web: No wallet provided");
                    this.onConnect = this.onConnectProxy.bind(this), this.secondaryBtnLabel = "Open", this.secondaryLabel = "Open and continue in a new browser tab", this.secondaryBtnIcon = "externalLink", ew.Xs.sendEvent({
                        type: "track",
                        event: "SELECT_WALLET",
                        properties: {
                            name: this.wallet.name,
                            platform: "web"
                        }
                    })
                }
                onConnectProxy() {
                    if (this.wallet ? .webapp_link && this.uri) try {
                        this.error = !1;
                        let {
                            webapp_link: a,
                            name: s
                        } = this.wallet, {
                            redirect: p,
                            href: g
                        } = ew.j1.formatUniversalUrl(a, this.uri);
                        ew.ConnectionController.setWcLinking({
                            name: s,
                            href: g
                        }), ew.ConnectionController.setRecentWallet(this.wallet), ew.j1.openHref(p, "_blank")
                    } catch {
                        this.error = !0
                    }
                }
            };
            tt = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-connecting-wc-web")], tt);
            var tr = eb.iv `
  wui-icon-link[data-hidden='true'] {
    opacity: 0 !important;
    pointer-events: none;
  }
`,
                w3m_header_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };

            function headings() {
                let a = ew.RouterController.state.data ? .connector ? .name,
                    s = ew.RouterController.state.data ? .wallet ? .name,
                    p = ew.RouterController.state.data ? .network ? .name,
                    g = s ? ? a;
                return {
                    Connect: "Connect Wallet",
                    Account: void 0,
                    ConnectingExternal: g ? ? "Connect Wallet",
                    ConnectingWalletConnect: g ? ? "WalletConnect",
                    ConnectingSiwe: "Sign In",
                    Networks: "Choose Network",
                    SwitchNetwork: p ? ? "Switch Network",
                    AllWallets: "All Wallets",
                    WhatIsANetwork: "What is a network?",
                    WhatIsAWallet: "What is a wallet?",
                    GetWallet: "Get a Wallet",
                    Downloads: g ? `Get ${g}` : "Downloads",
                    Transactions: "Activity"
                }
            }
            let ti = class extends eb.oi {
                constructor() {
                    super(), this.unsubscribe = [], this.heading = headings()[ew.RouterController.state.view], this.buffering = !1, this.showBack = !1, this.unsubscribe.push(ew.RouterController.subscribeKey("view", a => {
                        this.onViewChange(a), this.onHistoryChange()
                    }), ew.ConnectionController.subscribeKey("buffering", a => this.buffering = a))
                }
                disconnectCallback() {
                    this.unsubscribe.forEach(a => a())
                }
                render() {
                    return eb.dy `
      <wui-flex .padding=${this.getPadding()} justifyContent="space-between" alignItems="center">
        ${this.dynamicButtonTemplate()} ${this.titleTemplate()}
        <wui-icon-link
          ?disabled=${this.buffering}
          icon="close"
          @click=${ew.IN.close}
        ></wui-icon-link>
      </wui-flex>
      ${this.separatorTemplate()}
    `
                }
                onWalletHelp() {
                    ew.Xs.sendEvent({
                        type: "track",
                        event: "CLICK_WALLET_HELP"
                    }), ew.RouterController.push("WhatIsAWallet")
                }
                titleTemplate() {
                    return eb.dy `<wui-text variant="paragraph-700" color="fg-100">${this.heading}</wui-text>`
                }
                dynamicButtonTemplate() {
                    let {
                        view: a
                    } = ew.RouterController.state;
                    return this.showBack ? eb.dy `<wui-icon-link
        id="dynamic"
        icon="chevronLeft"
        ?disabled=${this.buffering}
        @click=${ew.RouterController.goBack}
      ></wui-icon-link>` : eb.dy `<wui-icon-link
      data-hidden=${"Connect"!==a}
      id="dynamic"
      icon="helpCircle"
      @click=${this.onWalletHelp.bind(this)}
    ></wui-icon-link>`
                }
                separatorTemplate() {
                    return this.heading ? eb.dy `<wui-separator></wui-separator>` : null
                }
                getPadding() {
                    return this.heading ? ["l", "2l", "l", "2l"] : ["l", "2l", "0", "2l"]
                }
                async onViewChange(a) {
                    let s = this.shadowRoot ? .querySelector("wui-text");
                    if (s) {
                        let p = headings()[a];
                        await s.animate([{
                            opacity: 1
                        }, {
                            opacity: 0
                        }], {
                            duration: 200,
                            fill: "forwards",
                            easing: "ease"
                        }).finished, this.heading = p, s.animate([{
                            opacity: 0
                        }, {
                            opacity: 1
                        }], {
                            duration: 200,
                            fill: "forwards",
                            easing: "ease"
                        })
                    }
                }
                async onHistoryChange() {
                    let {
                        history: a
                    } = ew.RouterController.state, s = this.shadowRoot ? .querySelector("#dynamic");
                    a.length > 1 && !this.showBack && s ? (await s.animate([{
                        opacity: 1
                    }, {
                        opacity: 0
                    }], {
                        duration: 200,
                        fill: "forwards",
                        easing: "ease"
                    }).finished, this.showBack = !0, s.animate([{
                        opacity: 0
                    }, {
                        opacity: 1
                    }], {
                        duration: 200,
                        fill: "forwards",
                        easing: "ease"
                    })) : a.length <= 1 && this.showBack && s && (await s.animate([{
                        opacity: 1
                    }, {
                        opacity: 0
                    }], {
                        duration: 200,
                        fill: "forwards",
                        easing: "ease"
                    }).finished, this.showBack = !1, s.animate([{
                        opacity: 0
                    }, {
                        opacity: 1
                    }], {
                        duration: 200,
                        fill: "forwards",
                        easing: "ease"
                    }))
                }
            };
            ti.styles = [tr], w3m_header_decorate([(0, ev.SB)()], ti.prototype, "heading", void 0), w3m_header_decorate([(0, ev.SB)()], ti.prototype, "buffering", void 0), w3m_header_decorate([(0, ev.SB)()], ti.prototype, "showBack", void 0), ti = w3m_header_decorate([(0, em.customElement)("w3m-header")], ti);
            var w3m_help_widget_decorate = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            };
            let tn = class extends eb.oi {
                constructor() {
                    super(...arguments), this.data = []
                }
                render() {
                    return eb.dy `
      <wui-flex flexDirection="column" alignItems="center" gap="l">
        ${this.data.map(a=>eb.dy`
            <wui-flex flexDirection="column" alignItems="center" gap="xl">
              <wui-flex flexDirection="row" justifyContent="center" gap="1xs">
                ${a.images.map(a=>eb.dy`<wui-visual name=${a}></wui-visual>`)}
              </wui-flex>
            </wui-flex>
            <wui-flex flexDirection="column" alignItems="center" gap="xxs">
              <wui-text variant="paragraph-500" color="fg-100" align="center">
                ${a.title}
              </wui-text>
              <wui-text variant="small-500" color="fg-200" align="center">${a.text}</wui-text>
            </wui-flex>
          `)}
      </wui-flex>
    `
                }
            };
            w3m_help_widget_decorate([(0, ev.Cb)({
                type: Array
            })], tn.prototype, "data", void 0), tn = w3m_help_widget_decorate([(0, em.customElement)("w3m-help-widget")], tn);
            var to = eb.iv `
  wui-flex {
    background-color: var(--wui-gray-glass-005);
  }

  a {
    text-decoration: none;
    color: var(--wui-color-fg-175);
    font-weight: 600;
  }
`;
            let ta = class extends eb.oi {
                render() {
                    let {
                        termsConditionsUrl: a,
                        privacyPolicyUrl: s
                    } = ew.OptionsController.state;
                    return a || s ? eb.dy `
      <wui-flex .padding=${["m","s","s","s"]} justifyContent="center">
        <wui-text color="fg-250" variant="small-500" align="center">
          By connecting your wallet, you agree to our <br />
          ${this.termsTemplate()} ${this.andTemplate()} ${this.privacyTemplate()}
        </wui-text>
      </wui-flex>
    ` : null
                }
                andTemplate() {
                    let {
                        termsConditionsUrl: a,
                        privacyPolicyUrl: s
                    } = ew.OptionsController.state;
                    return a && s ? "and" : ""
                }
                termsTemplate() {
                    let {
                        termsConditionsUrl: a
                    } = ew.OptionsController.state;
                    return a ? eb.dy `<a href=${a}>Terms of Service</a>` : null
                }
                privacyTemplate() {
                    let {
                        privacyPolicyUrl: a
                    } = ew.OptionsController.state;
                    return a ? eb.dy `<a href=${a}>Privacy Policy</a>` : null
                }
            };
            ta.styles = [to], ta = function(a, s, p, g) {
                var m, v = arguments.length,
                    x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                else
                    for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                return v > 3 && x && Object.defineProperty(s, p, x), x
            }([(0, em.customElement)("w3m-legal-footer")], ta);
            var ts = eb.iv `
  :host {
    display: block;
    padding: 0 var(--wui-spacing-xl) var(--wui-spacing-xl);
  }
`,
                w3m_mobile_download_links_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tl = class extends eb.oi {
                constructor() {
                    super(...arguments), this.wallet = void 0
                }
                render() {
                    if (!this.wallet) return this.style.display = "none", null;
                    let {
                        name: a,
                        app_store: s,
                        play_store: p,
                        chrome_store: g,
                        homepage: m
                    } = this.wallet, v = ew.j1.isMobile(), x = ew.j1.isIos(), _ = ew.j1.isAndroid(), E = [s, p, m, g].filter(Boolean).length > 1, T = em.UiHelperUtil.getTruncateString({
                        string: a,
                        charsStart: 12,
                        charsEnd: 0,
                        truncate: "end"
                    });
                    return E && !v ? eb.dy `
        <wui-cta-button
          label=${`Don't have ${T}?`}
          buttonLabel="Get"
          @click=${()=>ew.RouterController.push("Downloads",{wallet:this.wallet})}
        ></wui-cta-button>
      ` : !E && m ? eb.dy `
        <wui-cta-button
          label=${`Don't have ${T}?`}
          buttonLabel="Get"
          @click=${this.onHomePage.bind(this)}
        ></wui-cta-button>
      ` : s && x ? eb.dy `
        <wui-cta-button
          label=${`Don't have ${T}?`}
          buttonLabel="Get"
          @click=${this.onAppStore.bind(this)}
        ></wui-cta-button>
      ` : p && _ ? eb.dy `
        <wui-cta-button
          label=${`Don't have ${T}?`}
          buttonLabel="Get"
          @click=${this.onPlayStore.bind(this)}
        ></wui-cta-button>
      ` : (this.style.display = "none", null)
                }
                onAppStore() {
                    this.wallet ? .app_store && ew.j1.openHref(this.wallet.app_store, "_blank")
                }
                onPlayStore() {
                    this.wallet ? .play_store && ew.j1.openHref(this.wallet.play_store, "_blank")
                }
                onHomePage() {
                    this.wallet ? .homepage && ew.j1.openHref(this.wallet.homepage, "_blank")
                }
            };
            tl.styles = [ts], w3m_mobile_download_links_decorate([(0, ev.Cb)({
                type: Object
            })], tl.prototype, "wallet", void 0), tl = w3m_mobile_download_links_decorate([(0, em.customElement)("w3m-mobile-download-links")], tl);
            var tc = eb.iv `
  :host {
    display: block;
    position: absolute;
    opacity: 0;
    pointer-events: none;
    top: 11px;
    left: 50%;
  }
`,
                w3m_snackbar_decorate = function(a, s, p, g) {
                    var m, v = arguments.length,
                        x = v < 3 ? s : null === g ? g = Object.getOwnPropertyDescriptor(s, p) : g;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) x = Reflect.decorate(a, s, p, g);
                    else
                        for (var _ = a.length - 1; _ >= 0; _--)(m = a[_]) && (x = (v < 3 ? m(x) : v > 3 ? m(s, p, x) : m(s, p)) || x);
                    return v > 3 && x && Object.defineProperty(s, p, x), x
                };
            let tu = {
                    success: {
                        backgroundColor: "success-100",
                        iconColor: "success-100",
                        icon: "checkmark"
                    },
                    error: {
                        backgroundColor: "error-100",
                        iconColor: "error-100",
                        icon: "close"
                    }
                },
                td = class extends eb.oi {
                    constructor() {
                        super(), this.unsubscribe = [], this.timeout = void 0, this.open = ew.SnackController.state.open, this.unsubscribe.push(ew.SnackController.subscribeKey("open", a => {
                            this.open = a, this.onOpen()
                        }))
                    }
                    disconnectedCallback() {
                        clearTimeout(this.timeout), this.unsubscribe.forEach(a => a())
                    }
                    render() {
                        let {
                            message: a,
                            variant: s
                        } = ew.SnackController.state, p = tu[s];
                        return eb.dy `
      <wui-snackbar
        message=${a}
        backgroundColor=${p.backgroundColor}
        iconColor=${p.iconColor}
        icon=${p.icon}
      ></wui-snackbar>
    `
                    }
                    onOpen() {
                        clearTimeout(this.timeout), this.open ? (this.animate([{
                            opacity: 0,
                            transform: "translateX(-50%) scale(0.85)"
                        }, {
                            opacity: 1,
                            transform: "translateX(-50%) scale(1)"
                        }], {
                            duration: 150,
                            fill: "forwards",
                            easing: "ease"
                        }), this.timeout = setTimeout(() => ew.SnackController.hide(), 2500)) : this.animate([{
                            opacity: 1,
                            transform: "translateX(-50%) scale(1)"
                        }, {
                            opacity: 0,
                            transform: "translateX(-50%) scale(0.85)"
                        }], {
                            duration: 150,
                            fill: "forwards",
                            easing: "ease"
                        })
                    }
                };
            td.styles = tc, w3m_snackbar_decorate([(0, ev.SB)()], td.prototype, "open", void 0), td = w3m_snackbar_decorate([(0, em.customElement)("w3m-snackbar")], td);
            let th = !1;
            let Web3ModalScaffold = class Web3ModalScaffold {
                constructor(a) {
                    this.initPromise = void 0, this.setIsConnected = a => {
                        ew.AccountController.setIsConnected(a)
                    }, this.setCaipAddress = a => {
                        ew.AccountController.setCaipAddress(a)
                    }, this.setBalance = (a, s) => {
                        ew.AccountController.setBalance(a, s)
                    }, this.setProfileName = a => {
                        ew.AccountController.setProfileName(a)
                    }, this.setProfileImage = a => {
                        ew.AccountController.setProfileImage(a)
                    }, this.resetAccount = () => {
                        ew.AccountController.resetAccount()
                    }, this.setCaipNetwork = a => {
                        ew.NetworkController.setCaipNetwork(a)
                    }, this.getCaipNetwork = () => ew.NetworkController.state.caipNetwork, this.setRequestedCaipNetworks = a => {
                        ew.NetworkController.setRequestedCaipNetworks(a)
                    }, this.getApprovedCaipNetworksData = () => ew.NetworkController.getApprovedCaipNetworksData(), this.resetNetwork = () => {
                        ew.NetworkController.resetNetwork()
                    }, this.setConnectors = a => {
                        ew.ConnectorController.setConnectors(a)
                    }, this.addConnector = a => {
                        ew.ConnectorController.addConnector(a)
                    }, this.getConnectors = () => ew.ConnectorController.getConnectors(), this.resetWcConnection = () => {
                        ew.ConnectionController.resetWcConnection()
                    }, this.fetchIdentity = a => ew.Lr.fetchIdentity(a), this.setAddressExplorerUrl = a => {
                        ew.AccountController.setAddressExplorerUrl(a)
                    }, this.setSIWENonce = a => {
                        ew.yD.setNonce(a)
                    }, this.setSIWESession = a => {
                        ew.yD.setSession(a)
                    }, this.setSIWEStatus = a => {
                        ew.yD.setStatus(a)
                    }, this.setSIWEMessage = a => {
                        ew.yD.setMessage(a)
                    }, this.getSIWENonce = () => ew.yD.state.nonce, this.getSIWESession = () => ew.yD.state.session, this.getSIWEStatus = () => ew.yD.state.status, this.getSIWEMessage = () => ew.yD.state.message, this.initControllers(a), this.initOrContinue()
                }
                async open(a) {
                    await this.initOrContinue(), ew.IN.open(a)
                }
                async close() {
                    await this.initOrContinue(), ew.IN.close()
                }
                getThemeMode() {
                    return ew.ThemeController.state.themeMode
                }
                getThemeVariables() {
                    return ew.ThemeController.state.themeVariables
                }
                setThemeMode(a) {
                    ew.ThemeController.setThemeMode(a), (0, em.setColorTheme)(ew.ThemeController.state.themeMode)
                }
                setThemeVariables(a) {
                    ew.ThemeController.setThemeVariables(a), (0, em.setThemeVariables)(ew.ThemeController.state.themeVariables)
                }
                subscribeTheme(a) {
                    return ew.ThemeController.subscribe(a)
                }
                getState() {
                    return { ...ew.Ie.state
                    }
                }
                subscribeState(a) {
                    return ew.Ie.subscribe(a)
                }
                getEvent() {
                    return { ...ew.Xs.state
                    }
                }
                subscribeEvents(a) {
                    return ew.Xs.subscribe(a)
                }
                subscribeSIWEState(a) {
                    return ew.yD.subscribe(a)
                }
                initControllers(a) {
                    ew.NetworkController.setClient(a.networkControllerClient), ew.NetworkController.setDefaultCaipNetwork(a.defaultChain), ew.OptionsController.setProjectId(a.projectId), ew.OptionsController.setIncludeWalletIds(a.includeWalletIds), ew.OptionsController.setExcludeWalletIds(a.excludeWalletIds), ew.OptionsController.setFeaturedWalletIds(a.featuredWalletIds), ew.OptionsController.setTokens(a.tokens), ew.OptionsController.setTermsConditionsUrl(a.termsConditionsUrl), ew.OptionsController.setPrivacyPolicyUrl(a.privacyPolicyUrl), ew.OptionsController.setCustomWallets(a.customWallets), ew.OptionsController.setEnableAnalytics(a.enableAnalytics), ew.OptionsController.setSdkVersion(a._sdkVersion), ew.ConnectionController.setClient(a.connectionControllerClient), a.siweControllerClient && ew.yD.setSIWEClient(a.siweControllerClient), a.metadata && ew.OptionsController.setMetadata(a.metadata), a.themeMode && ew.ThemeController.setThemeMode(a.themeMode), a.themeVariables && ew.ThemeController.setThemeVariables(a.themeVariables)
                }
                async initOrContinue() {
                    return !this.initPromise && !th && ew.j1.isClient() && (th = !0, this.initPromise = new Promise(async a => {
                        await Promise.all([Promise.resolve().then(p.bind(p, 742)), Promise.resolve().then(p.bind(p, 9448))]);
                        let s = document.createElement("w3m-modal");
                        document.body.insertAdjacentElement("beforeend", s), a()
                    })), this.initPromise
                }
            };
            let tp = {
                    WALLET_CONNECT_CONNECTOR_ID: "walletConnect",
                    INJECTED_CONNECTOR_ID: "injected",
                    COINBASE_CONNECTOR_ID: "coinbaseWallet",
                    SAFE_CONNECTOR_ID: "safe",
                    LEDGER_CONNECTOR_ID: "ledger",
                    EIP6963_CONNECTOR_ID: "eip6963",
                    EIP155: "eip155",
                    ADD_CHAIN_METHOD: "wallet_addEthereumChain",
                    EIP6963_ANNOUNCE_EVENT: "eip6963:announceProvider",
                    EIP6963_REQUEST_EVENT: "eip6963:requestProvider",
                    VERSION: "3.3.2"
                },
                tf = {
                    ConnectorExplorerIds: {
                        [tp.COINBASE_CONNECTOR_ID]: "fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",
                        [tp.SAFE_CONNECTOR_ID]: "225affb176778569276e484e1b92637ad061b01e13a048b35a9d280c3b58970f",
                        [tp.LEDGER_CONNECTOR_ID]: "19177a98252e07ddfc9af2083ba8e07ef627cb6103467ffebb3f8f4205fd7927"
                    },
                    EIP155NetworkImageIds: {
                        1: "692ed6ba-e569-459a-556a-776476829e00",
                        42161: "600a9a04-c1b9-42ca-6785-9b4b6ff85200",
                        43114: "30c46e53-e989-45fb-4549-be3bd4eb3b00",
                        56: "93564157-2e8e-4ce7-81df-b264dbee9b00",
                        250: "06b26297-fe0c-4733-5d6b-ffa5498aac00",
                        10: "ab9c186a-c52f-464b-2906-ca59d760a400",
                        137: "41d04d42-da3b-4453-8506-668cc0727900",
                        100: "02b53f6a-e3d4-479e-1cb4-21178987d100",
                        9001: "f926ff41-260d-4028-635e-91913fc28e00",
                        324: "b310f07f-4ef7-49f3-7073-2a0a39685800",
                        314: "5a73b3dd-af74-424e-cae0-0de859ee9400",
                        4689: "34e68754-e536-40da-c153-6ef2e7188a00",
                        1088: "3897a66d-40b9-4833-162f-a2c90531c900",
                        1284: "161038da-44ae-4ec7-1208-0ea569454b00",
                        1285: "f1d73bb6-5450-4e18-38f7-fb6484264a00",
                        7777777: "845c60df-d429-4991-e687-91ae45791600",
                        42220: "ab781bbc-ccc6-418d-d32d-789b15da1f00",
                        8453: "7289c336-3981-4081-c5f4-efc26ac64a00",
                        1313161554: "3ff73439-a619-4894-9262-4470c773a100"
                    },
                    ConnectorImageIds: {
                        [tp.COINBASE_CONNECTOR_ID]: "0c2840c3-5b04-4c44-9661-fbd4b49e1800",
                        [tp.SAFE_CONNECTOR_ID]: "461db637-8616-43ce-035a-d89b8a1d5800",
                        [tp.LEDGER_CONNECTOR_ID]: "54a1aa77-d202-4f8d-0fb2-5d2bb6db0300",
                        [tp.WALLET_CONNECT_CONNECTOR_ID]: "ef1a1fcf-7fe8-4d69-bd6d-fda1345b4400",
                        [tp.INJECTED_CONNECTOR_ID]: "07ba87ed-43aa-4adf-4540-9e6a2b9cae00"
                    },
                    ConnectorNamesMap: {
                        [tp.INJECTED_CONNECTOR_ID]: "Browser Wallet",
                        [tp.WALLET_CONNECT_CONNECTOR_ID]: "WalletConnect",
                        [tp.COINBASE_CONNECTOR_ID]: "Coinbase",
                        [tp.LEDGER_CONNECTOR_ID]: "Ledger",
                        [tp.SAFE_CONNECTOR_ID]: "Safe"
                    },
                    ConnectorTypesMap: {
                        [tp.INJECTED_CONNECTOR_ID]: "INJECTED",
                        [tp.WALLET_CONNECT_CONNECTOR_ID]: "WALLET_CONNECT",
                        [tp.EIP6963_CONNECTOR_ID]: "ANNOUNCED"
                    }
                },
                tg = {
                    caipNetworkIdToNumber: a => a ? Number(a.split(":")[1]) : void 0,
                    getCaipTokens(a) {
                        if (!a) return;
                        let s = {};
                        return Object.entries(a).forEach(([a, p]) => {
                            s[`${tp.EIP155}:${a}`] = p
                        }), s
                    }
                };
            let Web3Modal = class Web3Modal extends Web3ModalScaffold {
                constructor(a) {
                    let {
                        wagmiConfig: s,
                        siweConfig: p,
                        chains: g,
                        defaultChain: m,
                        tokens: v,
                        _sdkVersion: x,
                        ..._
                    } = a;
                    if (!s) throw Error("web3modal:constructor - wagmiConfig is undefined");
                    if (!_.projectId) throw Error("web3modal:constructor - projectId is undefined");
                    if (!s.connectors.find(a => a.id === tp.WALLET_CONNECT_CONNECTOR_ID)) throw Error("web3modal:constructor - WalletConnectConnector is required");
                    let E = {
                        connectWalletConnect: async a => {
                            let p = s.connectors.find(a => a.id === tp.WALLET_CONNECT_CONNECTOR_ID);
                            if (!p) throw Error("connectionControllerClient:getWalletConnectUri - connector is undefined");
                            p.on("message", s => {
                                "display_uri" === s.type && (a(s.data), p.removeAllListeners())
                            });
                            let g = tg.caipNetworkIdToNumber(this.getCaipNetwork() ? .id);
                            await (0, ef.$j)({
                                connector: p,
                                chainId: g
                            })
                        },
                        connectExternal: async ({
                            id: a,
                            provider: p,
                            info: g
                        }) => {
                            let m = s.connectors.find(s => s.id === a);
                            if (!m) throw Error("connectionControllerClient:connectExternal - connector is undefined");
                            p && g && m.id === tp.EIP6963_CONNECTOR_ID && m.setEip6963Wallet ? .({
                                provider: p,
                                info: g
                            });
                            let v = tg.caipNetworkIdToNumber(this.getCaipNetwork() ? .id);
                            await (0, ef.$j)({
                                connector: m,
                                chainId: v
                            })
                        },
                        checkInstalled: a => {
                            let s = this.getConnectors().filter(a => "ANNOUNCED" === a.type),
                                p = this.getConnectors().find(a => "INJECTED" === a.type);
                            if (!a) return !!window.ethereum;
                            if (s.length) {
                                let p = a.some(a => s.some(s => s.info ? .rdns === a));
                                if (p) return !0
                            }
                            return !!p && !!window ? .ethereum && a.some(a => !!window.ethereum ? .[String(a)])
                        },
                        disconnect: ef.zP
                    };
                    super({
                        networkControllerClient: {
                            switchCaipNetwork: async a => {
                                let s = tg.caipNetworkIdToNumber(a ? .id);
                                s && await (0, ef.If)({
                                    chainId: s
                                })
                            },
                            async getApprovedCaipNetworksData() {
                                let a = localStorage.getItem("wagmi.wallet");
                                if (a ? .includes(tp.WALLET_CONNECT_CONNECTOR_ID)) {
                                    let a = s.connectors.find(a => a.id === tp.WALLET_CONNECT_CONNECTOR_ID);
                                    if (!a) throw Error("networkControllerClient:getApprovedCaipNetworks - connector is undefined");
                                    let p = await a.getProvider(),
                                        g = p.signer ? .session ? .namespaces,
                                        m = g ? .[tp.EIP155] ? .methods,
                                        v = g ? .[tp.EIP155] ? .chains;
                                    return {
                                        supportsAllNetworks: m ? .includes(tp.ADD_CHAIN_METHOD),
                                        approvedCaipNetworkIds: v
                                    }
                                }
                                return {
                                    approvedCaipNetworkIds: void 0,
                                    supportsAllNetworks: !0
                                }
                            }
                        },
                        connectionControllerClient: E,
                        siweControllerClient: p,
                        defaultChain: function(a) {
                            if (a) return {
                                id: `${tp.EIP155}:${a.id}`,
                                name: a.name,
                                imageId: tf.EIP155NetworkImageIds[a.id]
                            }
                        }(m),
                        tokens: tg.getCaipTokens(v),
                        _sdkVersion: x ? ? `html-wagmi-${tp.VERSION}`,
                        ..._
                    }), this.hasSyncedConnectedAccount = !1, this.options = void 0, this.options = a, this.syncRequestedNetworks(g), this.syncConnectors(s), this.listenConnectors(s), (0, ef.uH)(() => this.syncAccount()), (0, ef.QC)(() => this.syncNetwork())
                }
                getState() {
                    let a = super.getState();
                    return { ...a,
                        selectedNetworkId: tg.caipNetworkIdToNumber(a.selectedNetworkId)
                    }
                }
                subscribeState(a) {
                    return super.subscribeState(s => a({ ...s,
                        selectedNetworkId: tg.caipNetworkIdToNumber(s.selectedNetworkId)
                    }))
                }
                syncRequestedNetworks(a) {
                    let s = a ? .map(a => ({
                        id: `${tp.EIP155}:${a.id}`,
                        name: a.name,
                        imageId: tf.EIP155NetworkImageIds[a.id],
                        imageUrl: this.options ? .chainImages ? .[a.id]
                    }));
                    this.setRequestedCaipNetworks(s ? ? [])
                }
                async syncAccount() {
                    let {
                        address: a,
                        isConnected: s
                    } = (0, ef.D0)(), {
                        chain: p
                    } = (0, ef.Hy)();
                    if (this.resetAccount(), s && a && p) {
                        let g = `${tp.EIP155}:${p.id}:${a}`;
                        this.setIsConnected(s), this.setCaipAddress(g), await Promise.all([this.syncProfile(a), this.syncBalance(a, p), this.getApprovedCaipNetworksData()]), this.hasSyncedConnectedAccount = !0
                    } else !s && this.hasSyncedConnectedAccount && (this.resetWcConnection(), this.resetNetwork())
                }
                async syncNetwork() {
                    let {
                        address: a,
                        isConnected: s
                    } = (0, ef.D0)(), {
                        chain: p
                    } = (0, ef.Hy)();
                    if (p) {
                        let g = String(p.id),
                            m = `${tp.EIP155}:${g}`;
                        if (this.setCaipNetwork({
                                id: m,
                                name: p.name,
                                imageId: tf.EIP155NetworkImageIds[p.id],
                                imageUrl: this.options ? .chainImages ? .[p.id]
                            }), s && a) {
                            let s = `${tp.EIP155}:${p.id}:${a}`;
                            if (this.setCaipAddress(s), p.blockExplorers ? .default ? .url) {
                                let s = `${p.blockExplorers.default.url}/address/${a}`;
                                this.setAddressExplorerUrl(s)
                            } else this.setAddressExplorerUrl(void 0);
                            this.hasSyncedConnectedAccount && await this.syncBalance(a, p)
                        }
                    }
                }
                async syncProfile(a) {
                    try {
                        let {
                            name: s,
                            avatar: p
                        } = await this.fetchIdentity({
                            caipChainId: `${tp.EIP155}:${eg.R.id}`,
                            address: a
                        });
                        this.setProfileName(s), this.setProfileImage(p)
                    } catch {
                        let s = await (0, ef.Lk)({
                            address: a,
                            chainId: eg.R.id
                        });
                        if (s) {
                            this.setProfileName(s);
                            let a = await (0, ef.w6)({
                                name: s,
                                chainId: eg.R.id
                            });
                            a && this.setProfileImage(a)
                        }
                    }
                }
                async syncBalance(a, s) {
                    let p = await (0, ef.EG)({
                        address: a,
                        chainId: s.id,
                        token: this.options ? .tokens ? .[s.id] ? .address
                    });
                    this.setBalance(p.formatted, p.symbol)
                }
                syncConnectors(a) {
                    let s = [];
                    a.connectors.forEach(({
                        id: a,
                        name: p
                    }) => {
                        a !== tp.EIP6963_CONNECTOR_ID && s.push({
                            id: a,
                            explorerId: tf.ConnectorExplorerIds[a],
                            imageId: tf.ConnectorImageIds[a],
                            imageUrl: this.options ? .connectorImages ? .[a],
                            name: tf.ConnectorNamesMap[a] ? ? p,
                            type: tf.ConnectorTypesMap[a] ? ? "EXTERNAL"
                        })
                    }), this.setConnectors(s)
                }
                eip6963EventHandler(a, s) {
                    if (s.detail) {
                        let {
                            info: p,
                            provider: g
                        } = s.detail, m = this.getConnectors(), v = m.find(a => a.name === p.name);
                        v || (this.addConnector({
                            id: tp.EIP6963_CONNECTOR_ID,
                            type: "ANNOUNCED",
                            imageUrl: p.icon ? ? this.options ? .connectorImages ? .[tp.EIP6963_CONNECTOR_ID],
                            name: p.name,
                            provider: g,
                            info: p
                        }), a.isAuthorized({
                            info: p,
                            provider: g
                        }))
                    }
                }
                listenConnectors(a) {
                    let s = a.connectors.find(a => a.id === tp.EIP6963_CONNECTOR_ID);
                    if ("undefined" != typeof window && s) {
                        let a = this.eip6963EventHandler.bind(this, s);
                        window.addEventListener(tp.EIP6963_ANNOUNCE_EVENT, a), window.dispatchEvent(new Event(tp.EIP6963_REQUEST_EVENT))
                    }
                }
            };
            var tw = p(17289),
                __classPrivateFieldSet = function(a, s, p, g, m) {
                    if ("m" === g) throw TypeError("Private method is not writable");
                    if ("a" === g && !m) throw TypeError("Private accessor was defined without a setter");
                    if ("function" == typeof s ? a !== s || !m : !s.has(a)) throw TypeError("Cannot write private member to an object whose class did not declare it");
                    return "a" === g ? m.call(a, p) : m ? m.value = p : s.set(a, p), p
                },
                __classPrivateFieldGet = function(a, s, p, g) {
                    if ("a" === p && !g) throw TypeError("Private accessor was defined without a getter");
                    if ("function" == typeof s ? a !== s || !g : !s.has(a)) throw TypeError("Cannot read private member from an object whose class did not declare it");
                    return "m" === p ? g : "a" === p ? g.call(a) : g ? g.value : s.get(a)
                };
            let tm = "connectedRdns";
            let EIP6963Connector = class EIP6963Connector extends tw._ {
                constructor(a) {
                    super({
                        chains: a.chains,
                        options: {
                            shimDisconnect: !0
                        }
                    }), this.id = "eip6963", this.name = "EIP6963", v.set(this, void 0), x.set(this, void 0), __classPrivateFieldSet(this, v, this.options.getProvider(), "f")
                }
                async connect(a) {
                    let s = await super.connect(a);
                    return __classPrivateFieldGet(this, x, "f") && this.storage ? .setItem(tm, __classPrivateFieldGet(this, x, "f").info.rdns), s
                }
                async disconnect() {
                    await super.disconnect(), this.storage ? .removeItem(tm), __classPrivateFieldSet(this, x, void 0, "f")
                }
                async isAuthorized(a) {
                    let s = this.storage ? .getItem(tm);
                    if (s) {
                        if (!a || s !== a.info.rdns) return !0;
                        __classPrivateFieldSet(this, x, a, "f")
                    }
                    return super.isAuthorized()
                }
                async getProvider() {
                    return Promise.resolve(__classPrivateFieldGet(this, x, "f") ? .provider ? ? __classPrivateFieldGet(this, v, "f"))
                }
                setEip6963Wallet(a) {
                    __classPrivateFieldSet(this, x, a, "f")
                }
            };
            v = new WeakMap, x = new WeakMap;
            var tb = p(67133);
            "undefined" == typeof window || (window.Buffer || (window.Buffer = tb.Buffer), window.global || (window.global = window), window.process || (window.process = {}), window.process ? .env || (window.process = {
                env: {}
            }));
            var tv = p(15900),
                ty = p(38026),
                tC = p(40106),
                tx = p(53404),
                t_ = p(39803),
                tE = p(48519),
                tk = p(71061),
                t$ = p(39730),
                tP = p(21693),
                tS = class extends tx.wR {
                    constructor({
                        chains: a,
                        options: s
                    }) {
                        super({
                            chains: a,
                            options: {
                                reloadOnDisconnect: !1,
                                ...s
                            }
                        }), this.id = "coinbaseWallet", this.name = "Coinbase Wallet", this.ready = !0, (0, tx.Ko)(this, _, void 0), (0, tx.Ko)(this, E, void 0), this.onAccountsChanged = a => {
                            0 === a.length ? this.emit("disconnect") : this.emit("change", {
                                account: (0, t_.K)(a[0])
                            })
                        }, this.onChainChanged = a => {
                            let s = (0, tC.J)(a),
                                p = this.isChainUnsupported(s);
                            this.emit("change", {
                                chain: {
                                    id: s,
                                    unsupported: p
                                }
                            })
                        }, this.onDisconnect = () => {
                            this.emit("disconnect")
                        }
                    }
                    async connect({
                        chainId: a
                    } = {}) {
                        try {
                            let s = await this.getProvider();
                            s.on("accountsChanged", this.onAccountsChanged), s.on("chainChanged", this.onChainChanged), s.on("disconnect", this.onDisconnect), this.emit("message", {
                                type: "connecting"
                            });
                            let p = await s.enable(),
                                g = (0, t_.K)(p[0]),
                                m = await this.getChainId(),
                                v = this.isChainUnsupported(m);
                            if (a && m !== a) {
                                let s = await this.switchChain(a);
                                m = s.id, v = this.isChainUnsupported(m)
                            }
                            return {
                                account: g,
                                chain: {
                                    id: m,
                                    unsupported: v
                                }
                            }
                        } catch (a) {
                            if (/(user closed modal|accounts received is empty)/i.test(a.message)) throw new tE.ab(a);
                            throw a
                        }
                    }
                    async disconnect() {
                        if (!(0, tx.ac)(this, E)) return;
                        let a = await this.getProvider();
                        a.removeListener("accountsChanged", this.onAccountsChanged), a.removeListener("chainChanged", this.onChainChanged), a.removeListener("disconnect", this.onDisconnect), a.disconnect(), a.close()
                    }
                    async getAccount() {
                        let a = await this.getProvider(),
                            s = await a.request({
                                method: "eth_accounts"
                            });
                        return (0, t_.K)(s[0])
                    }
                    async getChainId() {
                        let a = await this.getProvider(),
                            s = (0, tC.J)(a.chainId);
                        return s
                    }
                    async getProvider() {
                        if (!(0, tx.ac)(this, E)) {
                            let a = (await Promise.all([p.e(5542), p.e(4775), p.e(5439)]).then(p.t.bind(p, 64775, 19))).default;
                            "function" != typeof a && "function" == typeof a.default && (a = a.default), (0, tx.qx)(this, _, new a(this.options));
                            let s = tx.ac(this, _).walletExtension ? .getChainId(),
                                g = this.chains.find(a => this.options.chainId ? a.id === this.options.chainId : a.id === s) || this.chains[0],
                                m = this.options.chainId || g ? .id,
                                v = this.options.jsonRpcUrl || g ? .rpcUrls.default.http[0];
                            (0, tx.qx)(this, E, (0, tx.ac)(this, _).makeWeb3Provider(v, m))
                        }
                        return (0, tx.ac)(this, E)
                    }
                    async getWalletClient({
                        chainId: a
                    } = {}) {
                        let [s, p] = await Promise.all([this.getProvider(), this.getAccount()]), g = this.chains.find(s => s.id === a);
                        if (!s) throw Error("provider is required.");
                        return (0, tk.K)({
                            account: p,
                            chain: g,
                            transport: (0, t$.P)(s)
                        })
                    }
                    async isAuthorized() {
                        try {
                            let a = await this.getAccount();
                            return !!a
                        } catch {
                            return !1
                        }
                    }
                    async switchChain(a) {
                        let s = await this.getProvider(),
                            p = (0, tP.eC)(a);
                        try {
                            return await s.request({
                                method: "wallet_switchEthereumChain",
                                params: [{
                                    chainId: p
                                }]
                            }), this.chains.find(s => s.id === a) ? ? {
                                id: a,
                                name: `Chain ${p}`,
                                network: `${p}`,
                                nativeCurrency: {
                                    name: "Ether",
                                    decimals: 18,
                                    symbol: "ETH"
                                },
                                rpcUrls: {
                                    default: {
                                        http: [""]
                                    },
                                    public: {
                                        http: [""]
                                    }
                                }
                            }
                        } catch (m) {
                            let g = this.chains.find(s => s.id === a);
                            if (!g) throw new ty.B({
                                chainId: a,
                                connectorId: this.id
                            });
                            if (4902 === m.code) try {
                                return await s.request({
                                    method: "wallet_addEthereumChain",
                                    params: [{
                                        chainId: p,
                                        chainName: g.name,
                                        nativeCurrency: g.nativeCurrency,
                                        rpcUrls: [g.rpcUrls.public ? .http[0] ? ? ""],
                                        blockExplorerUrls: this.getBlockExplorerUrls(g)
                                    }]
                                }), g
                            } catch (a) {
                                throw new tE.ab(a)
                            }
                            throw new tE.x3(m)
                        }
                    }
                    async watchAsset({
                        address: a,
                        decimals: s = 18,
                        image: p,
                        symbol: g
                    }) {
                        let m = await this.getProvider();
                        return m.request({
                            method: "wallet_watchAsset",
                            params: {
                                type: "ERC20",
                                options: {
                                    address: a,
                                    decimals: s,
                                    image: p,
                                    symbol: g
                                }
                            }
                        })
                    }
                };
            _ = new WeakMap, E = new WeakMap;
            var tA = p(70723),
                tO = "eip155",
                tR = "requestedChains",
                tT = "wallet_addEthereumChain",
                tI = class extends tx.wR {
                    constructor(a) {
                        super({ ...a,
                            options: {
                                isNewChainsStale: !0,
                                ...a.options
                            }
                        }), (0, tx.Ko)(this, W), (0, tx.Ko)(this, Z), (0, tx.Ko)(this, Y), (0, tx.Ko)(this, J), (0, tx.Ko)(this, en), (0, tx.Ko)(this, ea), (0, tx.Ko)(this, el), (0, tx.Ko)(this, eu), (0, tx.Ko)(this, eh), this.id = "walletConnect", this.name = "WalletConnect", this.ready = !0, (0, tx.Ko)(this, T, void 0), (0, tx.Ko)(this, F, void 0), this.onAccountsChanged = a => {
                            0 === a.length ? this.emit("disconnect") : this.emit("change", {
                                account: (0, t_.K)(a[0])
                            })
                        }, this.onChainChanged = a => {
                            let s = Number(a),
                                p = this.isChainUnsupported(s);
                            this.emit("change", {
                                chain: {
                                    id: s,
                                    unsupported: p
                                }
                            })
                        }, this.onDisconnect = () => {
                            (0, tx.U9)(this, ea, es).call(this, []), this.emit("disconnect")
                        }, this.onDisplayUri = a => {
                            this.emit("message", {
                                type: "display_uri",
                                data: a
                            })
                        }, this.onConnect = () => {
                            this.emit("connect", {})
                        }, (0, tx.U9)(this, W, z).call(this)
                    }
                    async connect({
                        chainId: a,
                        pairingTopic: s
                    } = {}) {
                        try {
                            let p = a;
                            if (!p) {
                                let a = this.storage ? .getItem("store"),
                                    s = a ? .state ? .data ? .chain ? .id;
                                p = s && !this.isChainUnsupported(s) ? s : this.chains[0] ? .id
                            }
                            if (!p) throw Error("No chains found on connector.");
                            let g = await this.getProvider();
                            (0, tx.U9)(this, J, ei).call(this);
                            let m = (0, tx.U9)(this, Y, X).call(this);
                            if (g.session && m && await g.disconnect(), !g.session || m) {
                                let a = this.chains.filter(a => a.id !== p).map(a => a.id);
                                this.emit("message", {
                                    type: "connecting"
                                }), await g.connect({
                                    pairingTopic: s,
                                    chains: [p],
                                    optionalChains: a.length ? a : void 0
                                }), (0, tx.U9)(this, ea, es).call(this, this.chains.map(({
                                    id: a
                                }) => a))
                            }
                            let v = await g.enable(),
                                x = (0, t_.K)(v[0]),
                                _ = await this.getChainId(),
                                E = this.isChainUnsupported(_);
                            return {
                                account: x,
                                chain: {
                                    id: _,
                                    unsupported: E
                                }
                            }
                        } catch (a) {
                            if (/user rejected/i.test(a ? .message)) throw new tE.ab(a);
                            throw a
                        }
                    }
                    async disconnect() {
                        let a = await this.getProvider();
                        try {
                            await a.disconnect()
                        } catch (a) {
                            if (!/No matching key/i.test(a.message)) throw a
                        } finally {
                            (0, tx.U9)(this, en, eo).call(this), (0, tx.U9)(this, ea, es).call(this, [])
                        }
                    }
                    async getAccount() {
                        let {
                            accounts: a
                        } = await this.getProvider();
                        return (0, t_.K)(a[0])
                    }
                    async getChainId() {
                        let {
                            chainId: a
                        } = await this.getProvider();
                        return a
                    }
                    async getProvider({
                        chainId: a
                    } = {}) {
                        return (0, tx.ac)(this, T) || await (0, tx.U9)(this, W, z).call(this), a && await this.switchChain(a), (0, tx.ac)(this, T)
                    }
                    async getWalletClient({
                        chainId: a
                    } = {}) {
                        let [s, p] = await Promise.all([this.getProvider({
                            chainId: a
                        }), this.getAccount()]), g = this.chains.find(s => s.id === a);
                        if (!s) throw Error("provider is required.");
                        return (0, tk.K)({
                            account: p,
                            chain: g,
                            transport: (0, t$.P)(s)
                        })
                    }
                    async isAuthorized() {
                        try {
                            let [a, s] = await Promise.all([this.getAccount(), this.getProvider()]), p = (0, tx.U9)(this, Y, X).call(this);
                            if (!a) return !1;
                            if (p && s.session) {
                                try {
                                    await s.disconnect()
                                } catch {}
                                return !1
                            }
                            return !0
                        } catch {
                            return !1
                        }
                    }
                    async switchChain(a) {
                        let s = this.chains.find(s => s.id === a);
                        if (!s) throw new tE.x3(Error("chain not found on connector."));
                        try {
                            let p = await this.getProvider(),
                                g = (0, tx.U9)(this, eu, ed).call(this),
                                m = (0, tx.U9)(this, eh, ep).call(this),
                                v = g.includes(a);
                            if (!v && m.includes(tT)) {
                                await p.request({
                                    method: tT,
                                    params: [{
                                        chainId: (0, tP.eC)(s.id),
                                        blockExplorerUrls: [s.blockExplorers ? .default ? .url],
                                        chainName: s.name,
                                        nativeCurrency: s.nativeCurrency,
                                        rpcUrls: [...s.rpcUrls.default.http]
                                    }]
                                });
                                let g = (0, tx.U9)(this, el, ec).call(this);
                                g.push(a), (0, tx.U9)(this, ea, es).call(this, g)
                            }
                            return await p.request({
                                method: "wallet_switchEthereumChain",
                                params: [{
                                    chainId: (0, tP.eC)(a)
                                }]
                            }), s
                        } catch (s) {
                            let a = "string" == typeof s ? s : s ? .message;
                            if (/user rejected request/i.test(a)) throw new tE.ab(s);
                            throw new tE.x3(s)
                        }
                    }
                };
            T = new WeakMap, F = new WeakMap, W = new WeakSet, z = async function() {
                return (0, tx.ac)(this, F) || "undefined" == typeof window || (0, tx.qx)(this, F, (0, tx.U9)(this, Z, Q).call(this)), (0, tx.ac)(this, F)
            }, Z = new WeakSet, Q = async function() {
                let {
                    EthereumProvider: a,
                    OPTIONAL_EVENTS: s,
                    OPTIONAL_METHODS: g
                } = await Promise.all([p.e(6636), p.e(3565)]).then(p.bind(p, 63565)), [m, ...v] = this.chains.map(({
                    id: a
                }) => a);
                if (m) {
                    let {
                        projectId: p,
                        showQrModal: x = !0,
                        qrModalOptions: _,
                        metadata: E,
                        relayUrl: F
                    } = this.options;
                    (0, tx.qx)(this, T, await a.init({
                        showQrModal: x,
                        qrModalOptions: _,
                        projectId: p,
                        optionalMethods: g,
                        optionalEvents: s,
                        chains: [m],
                        optionalChains: v.length ? v : void 0,
                        rpcMap: Object.fromEntries(this.chains.map(a => [a.id, a.rpcUrls.default.http[0]])),
                        metadata: E,
                        relayUrl: F
                    }))
                }
            }, Y = new WeakSet, X = function() {
                let a = (0, tx.U9)(this, eh, ep).call(this);
                if (a.includes(tT) || !this.options.isNewChainsStale) return !1;
                let s = (0, tx.U9)(this, el, ec).call(this),
                    p = this.chains.map(({
                        id: a
                    }) => a),
                    g = (0, tx.U9)(this, eu, ed).call(this);
                return (!g.length || !!g.some(a => p.includes(a))) && !p.every(a => s.includes(a))
            }, J = new WeakSet, ei = function() {
                (0, tx.ac)(this, T) && ((0, tx.U9)(this, en, eo).call(this), (0, tx.ac)(this, T).on("accountsChanged", this.onAccountsChanged), (0, tx.ac)(this, T).on("chainChanged", this.onChainChanged), (0, tx.ac)(this, T).on("disconnect", this.onDisconnect), (0, tx.ac)(this, T).on("session_delete", this.onDisconnect), (0, tx.ac)(this, T).on("display_uri", this.onDisplayUri), (0, tx.ac)(this, T).on("connect", this.onConnect))
            }, en = new WeakSet, eo = function() {
                (0, tx.ac)(this, T) && ((0, tx.ac)(this, T).removeListener("accountsChanged", this.onAccountsChanged), (0, tx.ac)(this, T).removeListener("chainChanged", this.onChainChanged), (0, tx.ac)(this, T).removeListener("disconnect", this.onDisconnect), (0, tx.ac)(this, T).removeListener("session_delete", this.onDisconnect), (0, tx.ac)(this, T).removeListener("display_uri", this.onDisplayUri), (0, tx.ac)(this, T).removeListener("connect", this.onConnect))
            }, ea = new WeakSet, es = function(a) {
                this.storage ? .setItem(tR, a)
            }, el = new WeakSet, ec = function() {
                return this.storage ? .getItem(tR) ? ? []
            }, eu = new WeakSet, ed = function() {
                if (!(0, tx.ac)(this, T)) return [];
                let a = tx.ac(this, T).session ? .namespaces;
                if (!a) return [];
                let s = (0, tA.fK)(a),
                    p = s[tO] ? .chains ? .map(a => parseInt(a.split(":")[1] || ""));
                return p ? ? []
            }, eh = new WeakSet, ep = function() {
                if (!(0, tx.ac)(this, T)) return [];
                let a = tx.ac(this, T).session ? .namespaces;
                if (!a) return [];
                let s = (0, tA.fK)(a),
                    p = s[tO] ? .methods;
                return p ? ? []
            };
            let tN = ew.j1.getBlockchainApiUrl();

            function defaultWagmiConfig({
                projectId: a,
                chains: s,
                metadata: p
            }) {
                let {
                    publicClient: g
                } = (0, ef.QB)(s, [function({
                    projectId: a
                }) {
                    return function(s) {
                        if (![1, 5, 11155111, 10, 420, 42161, 421613, 137, 80001, 42220, 1313161554, 1313161555, 56, 97, 43114, 43113, 100, 8453, 84531, 7777777, 999, 324, 280].includes(s.id)) return null;
                        let p = `${tN}/v1/?chainId=${tp.EIP155}:${s.id}&projectId=${a}`;
                        return {
                            chain: { ...s,
                                rpcUrls: { ...s.rpcUrls,
                                    default: {
                                        http: [p]
                                    }
                                }
                            },
                            rpcUrls: {
                                http: [p]
                            }
                        }
                    }
                }({
                    projectId: a
                }), function(a) {
                    return a.rpcUrls.public.http[0] ? {
                        chain: a,
                        rpcUrls: a.rpcUrls.public
                    } : null
                }]);
                return (0, tv._g)({
                    autoConnect: !0,
                    connectors: [new tI({
                        chains: s,
                        options: {
                            projectId: a,
                            showQrModal: !1,
                            metadata: p
                        }
                    }), new EIP6963Connector({
                        chains: s
                    }), new tw._({
                        chains: s,
                        options: {
                            shimDisconnect: !0
                        }
                    }), new tS({
                        chains: s,
                        options: {
                            appName: p ? .name ? ? "Unknown"
                        }
                    })],
                    publicClient: g
                })
            }

            function createWeb3Modal(a) {
                return !m && (g = m = new Web3Modal({ ...a,
                    _sdkVersion: `react-wagmi-${tp.VERSION}`
                })), m
            }
        },
        6591: function(a, s, p) {
            "use strict";
            p.d(s, {
                Cb: function() {
                    return n
                },
                SB: function() {
                    return state_r
                }
            });
            var g = p(31527);
            /**
             * @license
             * Copyright 2017 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let m = {
                    attribute: !0,
                    type: String,
                    converter: g.Ts,
                    reflect: !1,
                    hasChanged: g.Qu
                },
                r = (a = m, s, p) => {
                    let {
                        kind: g,
                        metadata: v
                    } = p, x = globalThis.litPropertyMetadata.get(v);
                    if (void 0 === x && globalThis.litPropertyMetadata.set(v, x = new Map), x.set(p.name, a), "accessor" === g) {
                        let {
                            name: g
                        } = p;
                        return {
                            set(p) {
                                let m = s.get.call(this);
                                s.set.call(this, p), this.requestUpdate(g, m, a)
                            },
                            init(s) {
                                return void 0 !== s && this.C(g, void 0, a), s
                            }
                        }
                    }
                    if ("setter" === g) {
                        let {
                            name: g
                        } = p;
                        return function(p) {
                            let m = this[g];
                            s.call(this, p), this.requestUpdate(g, m, a)
                        }
                    }
                    throw Error("Unsupported decorator location: " + g)
                };

            function n(a) {
                return (s, p) => "object" == typeof p ? r(a, s, p) : ((a, s, p) => {
                    let g = s.hasOwnProperty(p);
                    return s.constructor.createProperty(p, g ? { ...a,
                        wrapped: !0
                    } : a), g ? Object.getOwnPropertyDescriptor(s, p) : void 0
                })(a, s, p)
            }
            /**
             * @license
             * Copyright 2017 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            function state_r(a) {
                return n({ ...a,
                    state: !0,
                    attribute: !1
                })
            }
        },
        80824: function(a, s, p) {
            "use strict";
            p.d(s, {
                o: function() {
                    return o
                }
            });
            var g = p(35377);
            /**
             * @license
             * Copyright 2018 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let o = a => a ? ? g.Ld
        },
        22555: function(a, s, p) {
            "use strict";
            p.d(s, {
                oi: function() {
                    return lit_element_s
                },
                iv: function() {
                    return i
                },
                dy: function() {
                    return ex
                },
                YP: function() {
                    return e_
                },
                $m: function() {
                    return r
                }
            }), p(31527), p(35377);
            /**
             * @license
             * Copyright 2019 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let g = globalThis,
                m = g.ShadowRoot && (void 0 === g.ShadyCSS || g.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype,
                v = Symbol(),
                x = new WeakMap;
            let n = class n {
                constructor(a, s, p) {
                    if (this._$cssResult$ = !0, p !== v) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
                    this.cssText = a, this.t = s
                }
                get styleSheet() {
                    let a = this.o,
                        s = this.t;
                    if (m && void 0 === a) {
                        let p = void 0 !== s && 1 === s.length;
                        p && (a = x.get(s)), void 0 === a && ((this.o = a = new CSSStyleSheet).replaceSync(this.cssText), p && x.set(s, a))
                    }
                    return a
                }
                toString() {
                    return this.cssText
                }
            };
            let r = a => new n("string" == typeof a ? a : a + "", void 0, v),
                i = (a, ...s) => {
                    let p = 1 === a.length ? a[0] : s.reduce((s, p, g) => s + (a => {
                        if (!0 === a._$cssResult$) return a.cssText;
                        if ("number" == typeof a) return a;
                        throw Error("Value passed to 'css' function must be a 'css' function result: " + a + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")
                    })(p) + a[g + 1], a[0]);
                    return new n(p, a, v)
                },
                S = (a, s) => {
                    if (m) a.adoptedStyleSheets = s.map(a => a instanceof CSSStyleSheet ? a : a.styleSheet);
                    else
                        for (let p of s) {
                            let s = document.createElement("style"),
                                m = g.litNonce;
                            void 0 !== m && s.setAttribute("nonce", m), s.textContent = p.cssText, a.appendChild(s)
                        }
                },
                _ = m ? a => a : a => a instanceof CSSStyleSheet ? (a => {
                    let s = "";
                    for (let p of a.cssRules) s += p.cssText;
                    return r(s)
                })(a) : a,
                {
                    is: E,
                    defineProperty: T,
                    getOwnPropertyDescriptor: F,
                    getOwnPropertyNames: W,
                    getOwnPropertySymbols: z,
                    getPrototypeOf: Z
                } = Object,
                Q = globalThis,
                Y = Q.trustedTypes,
                X = Y ? Y.emptyScript : "",
                J = Q.reactiveElementPolyfillSupport,
                d = (a, s) => a,
                ei = {
                    toAttribute(a, s) {
                        switch (s) {
                            case Boolean:
                                a = a ? X : null;
                                break;
                            case Object:
                            case Array:
                                a = null == a ? a : JSON.stringify(a)
                        }
                        return a
                    },
                    fromAttribute(a, s) {
                        let p = a;
                        switch (s) {
                            case Boolean:
                                p = null !== a;
                                break;
                            case Number:
                                p = null === a ? null : Number(a);
                                break;
                            case Object:
                            case Array:
                                try {
                                    p = JSON.parse(a)
                                } catch (a) {
                                    p = null
                                }
                        }
                        return p
                    }
                },
                f = (a, s) => !E(a, s),
                en = {
                    attribute: !0,
                    type: String,
                    converter: ei,
                    reflect: !1,
                    hasChanged: f
                };
            Symbol.metadata ? ? = Symbol("metadata"), Q.litPropertyMetadata ? ? = new WeakMap;
            let b = class b extends HTMLElement {
                static addInitializer(a) {
                    this._$Ei(), (this.l ? ? = []).push(a)
                }
                static get observedAttributes() {
                    return this.finalize(), this._$Eh && [...this._$Eh.keys()]
                }
                static createProperty(a, s = en) {
                    if (s.state && (s.attribute = !1), this._$Ei(), this.elementProperties.set(a, s), !s.noAccessor) {
                        let p = Symbol(),
                            g = this.getPropertyDescriptor(a, p, s);
                        void 0 !== g && T(this.prototype, a, g)
                    }
                }
                static getPropertyDescriptor(a, s, p) {
                    let {
                        get: g,
                        set: m
                    } = F(this.prototype, a) ? ? {
                        get() {
                            return this[s]
                        },
                        set(a) {
                            this[s] = a
                        }
                    };
                    return {
                        get() {
                            return g ? .call(this)
                        },
                        set(s) {
                            let v = g ? .call(this);
                            m.call(this, s), this.requestUpdate(a, v, p)
                        },
                        configurable: !0,
                        enumerable: !0
                    }
                }
                static getPropertyOptions(a) {
                    return this.elementProperties.get(a) ? ? en
                }
                static _$Ei() {
                    if (this.hasOwnProperty(d("elementProperties"))) return;
                    let a = Z(this);
                    a.finalize(), void 0 !== a.l && (this.l = [...a.l]), this.elementProperties = new Map(a.elementProperties)
                }
                static finalize() {
                    if (this.hasOwnProperty(d("finalized"))) return;
                    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(d("properties"))) {
                        let a = this.properties,
                            s = [...W(a), ...z(a)];
                        for (let p of s) this.createProperty(p, a[p])
                    }
                    let a = this[Symbol.metadata];
                    if (null !== a) {
                        let s = litPropertyMetadata.get(a);
                        if (void 0 !== s)
                            for (let [a, p] of s) this.elementProperties.set(a, p)
                    }
                    for (let [a, s] of (this._$Eh = new Map, this.elementProperties)) {
                        let p = this._$Eu(a, s);
                        void 0 !== p && this._$Eh.set(p, a)
                    }
                    this.elementStyles = this.finalizeStyles(this.styles)
                }
                static finalizeStyles(a) {
                    let s = [];
                    if (Array.isArray(a)) {
                        let p = new Set(a.flat(1 / 0).reverse());
                        for (let a of p) s.unshift(_(a))
                    } else void 0 !== a && s.push(_(a));
                    return s
                }
                static _$Eu(a, s) {
                    let p = s.attribute;
                    return !1 === p ? void 0 : "string" == typeof p ? p : "string" == typeof a ? a.toLowerCase() : void 0
                }
                constructor() {
                    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev()
                }
                _$Ev() {
                    this._$Eg = new Promise(a => this.enableUpdating = a), this._$AL = new Map, this._$ES(), this.requestUpdate(), this.constructor.l ? .forEach(a => a(this))
                }
                addController(a) {
                    (this._$E_ ? ? = new Set).add(a), void 0 !== this.renderRoot && this.isConnected && a.hostConnected ? .()
                }
                removeController(a) {
                    this._$E_ ? .delete(a)
                }
                _$ES() {
                    let a = new Map,
                        s = this.constructor.elementProperties;
                    for (let p of s.keys()) this.hasOwnProperty(p) && (a.set(p, this[p]), delete this[p]);
                    a.size > 0 && (this._$Ep = a)
                }
                createRenderRoot() {
                    let a = this.shadowRoot ? ? this.attachShadow(this.constructor.shadowRootOptions);
                    return S(a, this.constructor.elementStyles), a
                }
                connectedCallback() {
                    this.renderRoot ? ? = this.createRenderRoot(), this.enableUpdating(!0), this._$E_ ? .forEach(a => a.hostConnected ? .())
                }
                enableUpdating(a) {}
                disconnectedCallback() {
                    this._$E_ ? .forEach(a => a.hostDisconnected ? .())
                }
                attributeChangedCallback(a, s, p) {
                    this._$AK(a, p)
                }
                _$EO(a, s) {
                    let p = this.constructor.elementProperties.get(a),
                        g = this.constructor._$Eu(a, p);
                    if (void 0 !== g && !0 === p.reflect) {
                        let m = (void 0 !== p.converter ? .toAttribute ? p.converter : ei).toAttribute(s, p.type);
                        this._$Em = a, null == m ? this.removeAttribute(g) : this.setAttribute(g, m), this._$Em = null
                    }
                }
                _$AK(a, s) {
                    let p = this.constructor,
                        g = p._$Eh.get(a);
                    if (void 0 !== g && this._$Em !== g) {
                        let a = p.getPropertyOptions(g),
                            m = "function" == typeof a.converter ? {
                                fromAttribute: a.converter
                            } : void 0 !== a.converter ? .fromAttribute ? a.converter : ei;
                        this._$Em = g, this[g] = m.fromAttribute(s, a.type), this._$Em = null
                    }
                }
                requestUpdate(a, s, p, g = !1, m) {
                    if (void 0 !== a) {
                        if (!((p ? ? = this.constructor.getPropertyOptions(a)).hasChanged ? ? f)(g ? m : this[a], s)) return;
                        this.C(a, s, p)
                    }!1 === this.isUpdatePending && (this._$Eg = this._$EP())
                }
                C(a, s, p) {
                    this._$AL.has(a) || this._$AL.set(a, s), !0 === p.reflect && this._$Em !== a && (this._$Ej ? ? = new Set).add(a)
                }
                async _$EP() {
                    this.isUpdatePending = !0;
                    try {
                        await this._$Eg
                    } catch (a) {
                        Promise.reject(a)
                    }
                    let a = this.scheduleUpdate();
                    return null != a && await a, !this.isUpdatePending
                }
                scheduleUpdate() {
                    return this.performUpdate()
                }
                performUpdate() {
                    if (!this.isUpdatePending) return;
                    if (!this.hasUpdated) {
                        if (this.renderRoot ? ? = this.createRenderRoot(), this._$Ep) {
                            for (let [a, s] of this._$Ep) this[a] = s;
                            this._$Ep = void 0
                        }
                        let a = this.constructor.elementProperties;
                        if (a.size > 0)
                            for (let [s, p] of a) !0 !== p.wrapped || this._$AL.has(s) || void 0 === this[s] || this.C(s, this[s], p)
                    }
                    let a = !1,
                        s = this._$AL;
                    try {
                        (a = this.shouldUpdate(s)) ? (this.willUpdate(s), this._$E_ ? .forEach(a => a.hostUpdate ? .()), this.update(s)) : this._$ET()
                    } catch (s) {
                        throw a = !1, this._$ET(), s
                    }
                    a && this._$AE(s)
                }
                willUpdate(a) {}
                _$AE(a) {
                    this._$E_ ? .forEach(a => a.hostUpdated ? .()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(a)), this.updated(a)
                }
                _$ET() {
                    this._$AL = new Map, this.isUpdatePending = !1
                }
                get updateComplete() {
                    return this.getUpdateComplete()
                }
                getUpdateComplete() {
                    return this._$Eg
                }
                shouldUpdate(a) {
                    return !0
                }
                update(a) {
                    this._$Ej && = this._$Ej.forEach(a => this._$EO(a, this[a])), this._$ET()
                }
                updated(a) {}
                firstUpdated(a) {}
            };
            b.elementStyles = [], b.shadowRootOptions = {
                mode: "open"
            }, b[d("elementProperties")] = new Map, b[d("finalized")] = new Map, J ? .({
                ReactiveElement: b
            }), (Q.reactiveElementVersions ? ? = []).push("2.0.2");
            /**
             * @license
             * Copyright 2017 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let eo = globalThis,
                ea = eo.trustedTypes,
                es = ea ? ea.createPolicy("lit-html", {
                    createHTML: a => a
                }) : void 0,
                el = "$lit$",
                ec = `lit$${(Math.random()+"").slice(9)}$`,
                eu = "?" + ec,
                ed = `<${eu}>`,
                eh = document,
                lit_html_l = () => eh.createComment(""),
                lit_html_c = a => null === a || "object" != typeof a && "function" != typeof a,
                ep = Array.isArray,
                lit_html_u = a => ep(a) || "function" == typeof a ? .[Symbol.iterator],
                ef = "[ 	\n\f\r]",
                eg = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,
                ew = /-->/g,
                em = />/g,
                eb = RegExp(`>|${ef}(?:([^\\s"'>=/]+)(${ef}*=${ef}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"),
                ev = /'/g,
                ey = /"/g,
                eC = /^(?:script|style|textarea|title)$/i,
                lit_html_y = a => (s, ...p) => ({
                    _$litType$: a,
                    strings: s,
                    values: p
                }),
                ex = lit_html_y(1),
                e_ = lit_html_y(2),
                eE = Symbol.for("lit-noChange"),
                ek = Symbol.for("lit-nothing"),
                e$ = new WeakMap,
                eP = eh.createTreeWalker(eh, 129);

            function C(a, s) {
                if (!Array.isArray(a) || !a.hasOwnProperty("raw")) throw Error("invalid template strings array");
                return void 0 !== es ? es.createHTML(s) : s
            }
            let P = (a, s) => {
                let p = a.length - 1,
                    g = [],
                    m, v = 2 === s ? "<svg>" : "",
                    x = eg;
                for (let s = 0; s < p; s++) {
                    let p = a[s],
                        _, E, T = -1,
                        F = 0;
                    for (; F < p.length && (x.lastIndex = F, null !== (E = x.exec(p)));) F = x.lastIndex, x === eg ? "!--" === E[1] ? x = ew : void 0 !== E[1] ? x = em : void 0 !== E[2] ? (eC.test(E[2]) && (m = RegExp("</" + E[2], "g")), x = eb) : void 0 !== E[3] && (x = eb) : x === eb ? ">" === E[0] ? (x = m ? ? eg, T = -1) : void 0 === E[1] ? T = -2 : (T = x.lastIndex - E[2].length, _ = E[1], x = void 0 === E[3] ? eb : '"' === E[3] ? ey : ev) : x === ey || x === ev ? x = eb : x === ew || x === em ? x = eg : (x = eb, m = void 0);
                    let W = x === eb && a[s + 1].startsWith("/>") ? " " : "";
                    v += x === eg ? p + ed : T >= 0 ? (g.push(_), p.slice(0, T) + el + p.slice(T) + ec + W) : p + ec + (-2 === T ? s : W)
                }
                return [C(a, v + (a[p] || "<?>") + (2 === s ? "</svg>" : "")), g]
            };
            let V = class V {
                constructor({
                    strings: a,
                    _$litType$: s
                }, p) {
                    let g;
                    this.parts = [];
                    let m = 0,
                        v = 0,
                        x = a.length - 1,
                        _ = this.parts,
                        [E, T] = P(a, s);
                    if (this.el = V.createElement(E, p), eP.currentNode = this.el.content, 2 === s) {
                        let a = this.el.content.firstChild;
                        a.replaceWith(...a.childNodes)
                    }
                    for (; null !== (g = eP.nextNode()) && _.length < x;) {
                        if (1 === g.nodeType) {
                            if (g.hasAttributes())
                                for (let a of g.getAttributeNames())
                                    if (a.endsWith(el)) {
                                        let s = T[v++],
                                            p = g.getAttribute(a).split(ec),
                                            x = /([.?@])?(.*)/.exec(s);
                                        _.push({
                                            type: 1,
                                            index: m,
                                            name: x[2],
                                            strings: p,
                                            ctor: "." === x[1] ? k : "?" === x[1] ? H : "@" === x[1] ? I : R
                                        }), g.removeAttribute(a)
                                    } else a.startsWith(ec) && (_.push({
                                        type: 6,
                                        index: m
                                    }), g.removeAttribute(a));
                            if (eC.test(g.tagName)) {
                                let a = g.textContent.split(ec),
                                    s = a.length - 1;
                                if (s > 0) {
                                    g.textContent = ea ? ea.emptyScript : "";
                                    for (let p = 0; p < s; p++) g.append(a[p], lit_html_l()), eP.nextNode(), _.push({
                                        type: 2,
                                        index: ++m
                                    });
                                    g.append(a[s], lit_html_l())
                                }
                            }
                        } else if (8 === g.nodeType) {
                            if (g.data === eu) _.push({
                                type: 2,
                                index: m
                            });
                            else {
                                let a = -1;
                                for (; - 1 !== (a = g.data.indexOf(ec, a + 1));) _.push({
                                    type: 7,
                                    index: m
                                }), a += ec.length - 1
                            }
                        }
                        m++
                    }
                }
                static createElement(a, s) {
                    let p = eh.createElement("template");
                    return p.innerHTML = a, p
                }
            };

            function N(a, s, p = a, g) {
                if (s === eE) return s;
                let m = void 0 !== g ? p._$Co ? .[g] : p._$Cl,
                    v = lit_html_c(s) ? void 0 : s._$litDirective$;
                return m ? .constructor !== v && (m ? ._$AO ? .(!1), void 0 === v ? m = void 0 : (m = new v(a))._$AT(a, p, g), void 0 !== g ? (p._$Co ? ? = [])[g] = m : p._$Cl = m), void 0 !== m && (s = N(a, m._$AS(a, s.values), m, g)), s
            }
            let lit_html_S = class lit_html_S {
                constructor(a, s) {
                    this._$AV = [], this._$AN = void 0, this._$AD = a, this._$AM = s
                }
                get parentNode() {
                    return this._$AM.parentNode
                }
                get _$AU() {
                    return this._$AM._$AU
                }
                u(a) {
                    let {
                        el: {
                            content: s
                        },
                        parts: p
                    } = this._$AD, g = (a ? .creationScope ? ? eh).importNode(s, !0);
                    eP.currentNode = g;
                    let m = eP.nextNode(),
                        v = 0,
                        x = 0,
                        _ = p[0];
                    for (; void 0 !== _;) {
                        if (v === _.index) {
                            let s;
                            2 === _.type ? s = new M(m, m.nextSibling, this, a) : 1 === _.type ? s = new _.ctor(m, _.name, _.strings, this, a) : 6 === _.type && (s = new L(m, this, a)), this._$AV.push(s), _ = p[++x]
                        }
                        v !== _ ? .index && (m = eP.nextNode(), v++)
                    }
                    return eP.currentNode = eh, g
                }
                p(a) {
                    let s = 0;
                    for (let p of this._$AV) void 0 !== p && (void 0 !== p.strings ? (p._$AI(a, p, s), s += p.strings.length - 2) : p._$AI(a[s])), s++
                }
            };
            let M = class M {
                get _$AU() {
                    return this._$AM ? ._$AU ? ? this._$Cv
                }
                constructor(a, s, p, g) {
                    this.type = 2, this._$AH = ek, this._$AN = void 0, this._$AA = a, this._$AB = s, this._$AM = p, this.options = g, this._$Cv = g ? .isConnected ? ? !0
                }
                get parentNode() {
                    let a = this._$AA.parentNode,
                        s = this._$AM;
                    return void 0 !== s && 11 === a ? .nodeType && (a = s.parentNode), a
                }
                get startNode() {
                    return this._$AA
                }
                get endNode() {
                    return this._$AB
                }
                _$AI(a, s = this) {
                    lit_html_c(a = N(this, a, s)) ? a === ek || null == a || "" === a ? (this._$AH !== ek && this._$AR(), this._$AH = ek) : a !== this._$AH && a !== eE && this._(a) : void 0 !== a._$litType$ ? this.g(a) : void 0 !== a.nodeType ? this.$(a) : lit_html_u(a) ? this.T(a) : this._(a)
                }
                k(a) {
                    return this._$AA.parentNode.insertBefore(a, this._$AB)
                }
                $(a) {
                    this._$AH !== a && (this._$AR(), this._$AH = this.k(a))
                }
                _(a) {
                    this._$AH !== ek && lit_html_c(this._$AH) ? this._$AA.nextSibling.data = a : this.$(eh.createTextNode(a)), this._$AH = a
                }
                g(a) {
                    let {
                        values: s,
                        _$litType$: p
                    } = a, g = "number" == typeof p ? this._$AC(a) : (void 0 === p.el && (p.el = V.createElement(C(p.h, p.h[0]), this.options)), p);
                    if (this._$AH ? ._$AD === g) this._$AH.p(s);
                    else {
                        let a = new lit_html_S(g, this),
                            p = a.u(this.options);
                        a.p(s), this.$(p), this._$AH = a
                    }
                }
                _$AC(a) {
                    let s = e$.get(a.strings);
                    return void 0 === s && e$.set(a.strings, s = new V(a)), s
                }
                T(a) {
                    ep(this._$AH) || (this._$AH = [], this._$AR());
                    let s = this._$AH,
                        p, g = 0;
                    for (let m of a) g === s.length ? s.push(p = new M(this.k(lit_html_l()), this.k(lit_html_l()), this, this.options)) : p = s[g], p._$AI(m), g++;
                    g < s.length && (this._$AR(p && p._$AB.nextSibling, g), s.length = g)
                }
                _$AR(a = this._$AA.nextSibling, s) {
                    for (this._$AP ? .(!1, !0, s); a && a !== this._$AB;) {
                        let s = a.nextSibling;
                        a.remove(), a = s
                    }
                }
                setConnected(a) {
                    void 0 === this._$AM && (this._$Cv = a, this._$AP ? .(a))
                }
            };
            let R = class R {
                get tagName() {
                    return this.element.tagName
                }
                get _$AU() {
                    return this._$AM._$AU
                }
                constructor(a, s, p, g, m) {
                    this.type = 1, this._$AH = ek, this._$AN = void 0, this.element = a, this.name = s, this._$AM = g, this.options = m, p.length > 2 || "" !== p[0] || "" !== p[1] ? (this._$AH = Array(p.length - 1).fill(new String), this.strings = p) : this._$AH = ek
                }
                _$AI(a, s = this, p, g) {
                    let m = this.strings,
                        v = !1;
                    if (void 0 === m)(v = !lit_html_c(a = N(this, a, s, 0)) || a !== this._$AH && a !== eE) && (this._$AH = a);
                    else {
                        let g, x;
                        let _ = a;
                        for (a = m[0], g = 0; g < m.length - 1; g++)(x = N(this, _[p + g], s, g)) === eE && (x = this._$AH[g]), v || = !lit_html_c(x) || x !== this._$AH[g], x === ek ? a = ek : a !== ek && (a += (x ? ? "") + m[g + 1]), this._$AH[g] = x
                    }
                    v && !g && this.O(a)
                }
                O(a) {
                    a === ek ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, a ? ? "")
                }
            };
            let k = class k extends R {
                constructor() {
                    super(...arguments), this.type = 3
                }
                O(a) {
                    this.element[this.name] = a === ek ? void 0 : a
                }
            };
            let H = class H extends R {
                constructor() {
                    super(...arguments), this.type = 4
                }
                O(a) {
                    this.element.toggleAttribute(this.name, !!a && a !== ek)
                }
            };
            let I = class I extends R {
                constructor(a, s, p, g, m) {
                    super(a, s, p, g, m), this.type = 5
                }
                _$AI(a, s = this) {
                    if ((a = N(this, a, s, 0) ? ? ek) === eE) return;
                    let p = this._$AH,
                        g = a === ek && p !== ek || a.capture !== p.capture || a.once !== p.once || a.passive !== p.passive,
                        m = a !== ek && (p === ek || g);
                    g && this.element.removeEventListener(this.name, this, p), m && this.element.addEventListener(this.name, this, a), this._$AH = a
                }
                handleEvent(a) {
                    "function" == typeof this._$AH ? this._$AH.call(this.options ? .host ? ? this.element, a) : this._$AH.handleEvent(a)
                }
            };
            let L = class L {
                constructor(a, s, p) {
                    this.element = a, this.type = 6, this._$AN = void 0, this._$AM = s, this.options = p
                }
                get _$AU() {
                    return this._$AM._$AU
                }
                _$AI(a) {
                    N(this, a)
                }
            };
            let eS = eo.litHtmlPolyfillSupport;
            eS ? .(V, M), (eo.litHtmlVersions ? ? = []).push("3.1.0");
            let j = (a, s, p) => {
                let g = p ? .renderBefore ? ? s,
                    m = g._$litPart$;
                if (void 0 === m) {
                    let a = p ? .renderBefore ? ? null;
                    g._$litPart$ = m = new M(s.insertBefore(lit_html_l(), a), a, void 0, p ? ? {})
                }
                return m._$AI(a), m
            };
            /**
             * @license
             * Copyright 2017 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let lit_element_s = class lit_element_s extends b {
                constructor() {
                    super(...arguments), this.renderOptions = {
                        host: this
                    }, this._$Do = void 0
                }
                createRenderRoot() {
                    let a = super.createRenderRoot();
                    return this.renderOptions.renderBefore ? ? = a.firstChild, a
                }
                update(a) {
                    let s = this.render();
                    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(a), this._$Do = j(s, this.renderRoot, this.renderOptions)
                }
                connectedCallback() {
                    super.connectedCallback(), this._$Do ? .setConnected(!0)
                }
                disconnectedCallback() {
                    super.disconnectedCallback(), this._$Do ? .setConnected(!1)
                }
                render() {
                    return eE
                }
            };
            lit_element_s._$litElement$ = !0, lit_element_s.finalized = !0, globalThis.litElementHydrateSupport ? .({
                LitElement: lit_element_s
            });
            let eA = globalThis.litElementPolyfillSupport;
            eA ? .({
                LitElement: lit_element_s
            }), (globalThis.litElementVersions ? ? = []).push("4.0.2")
        },
        31527: function(a, s, p) {
            "use strict";
            p.d(s, {
                Ts: function() {
                    return ei
                },
                Qu: function() {
                    return f
                }
            });
            /**
             * @license
             * Copyright 2019 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let g = globalThis,
                m = g.ShadowRoot && (void 0 === g.ShadyCSS || g.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype,
                v = Symbol(),
                x = new WeakMap;
            let n = class n {
                constructor(a, s, p) {
                    if (this._$cssResult$ = !0, p !== v) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
                    this.cssText = a, this.t = s
                }
                get styleSheet() {
                    let a = this.o,
                        s = this.t;
                    if (m && void 0 === a) {
                        let p = void 0 !== s && 1 === s.length;
                        p && (a = x.get(s)), void 0 === a && ((this.o = a = new CSSStyleSheet).replaceSync(this.cssText), p && x.set(s, a))
                    }
                    return a
                }
                toString() {
                    return this.cssText
                }
            };
            let r = a => new n("string" == typeof a ? a : a + "", void 0, v),
                S = (a, s) => {
                    if (m) a.adoptedStyleSheets = s.map(a => a instanceof CSSStyleSheet ? a : a.styleSheet);
                    else
                        for (let p of s) {
                            let s = document.createElement("style"),
                                m = g.litNonce;
                            void 0 !== m && s.setAttribute("nonce", m), s.textContent = p.cssText, a.appendChild(s)
                        }
                },
                _ = m ? a => a : a => a instanceof CSSStyleSheet ? (a => {
                    let s = "";
                    for (let p of a.cssRules) s += p.cssText;
                    return r(s)
                })(a) : a,
                {
                    is: E,
                    defineProperty: T,
                    getOwnPropertyDescriptor: F,
                    getOwnPropertyNames: W,
                    getOwnPropertySymbols: z,
                    getPrototypeOf: Z
                } = Object,
                Q = globalThis,
                Y = Q.trustedTypes,
                X = Y ? Y.emptyScript : "",
                J = Q.reactiveElementPolyfillSupport,
                d = (a, s) => a,
                ei = {
                    toAttribute(a, s) {
                        switch (s) {
                            case Boolean:
                                a = a ? X : null;
                                break;
                            case Object:
                            case Array:
                                a = null == a ? a : JSON.stringify(a)
                        }
                        return a
                    },
                    fromAttribute(a, s) {
                        let p = a;
                        switch (s) {
                            case Boolean:
                                p = null !== a;
                                break;
                            case Number:
                                p = null === a ? null : Number(a);
                                break;
                            case Object:
                            case Array:
                                try {
                                    p = JSON.parse(a)
                                } catch (a) {
                                    p = null
                                }
                        }
                        return p
                    }
                },
                f = (a, s) => !E(a, s),
                en = {
                    attribute: !0,
                    type: String,
                    converter: ei,
                    reflect: !1,
                    hasChanged: f
                };
            Symbol.metadata ? ? = Symbol("metadata"), Q.litPropertyMetadata ? ? = new WeakMap;
            let b = class b extends HTMLElement {
                static addInitializer(a) {
                    this._$Ei(), (this.l ? ? = []).push(a)
                }
                static get observedAttributes() {
                    return this.finalize(), this._$Eh && [...this._$Eh.keys()]
                }
                static createProperty(a, s = en) {
                    if (s.state && (s.attribute = !1), this._$Ei(), this.elementProperties.set(a, s), !s.noAccessor) {
                        let p = Symbol(),
                            g = this.getPropertyDescriptor(a, p, s);
                        void 0 !== g && T(this.prototype, a, g)
                    }
                }
                static getPropertyDescriptor(a, s, p) {
                    let {
                        get: g,
                        set: m
                    } = F(this.prototype, a) ? ? {
                        get() {
                            return this[s]
                        },
                        set(a) {
                            this[s] = a
                        }
                    };
                    return {
                        get() {
                            return g ? .call(this)
                        },
                        set(s) {
                            let v = g ? .call(this);
                            m.call(this, s), this.requestUpdate(a, v, p)
                        },
                        configurable: !0,
                        enumerable: !0
                    }
                }
                static getPropertyOptions(a) {
                    return this.elementProperties.get(a) ? ? en
                }
                static _$Ei() {
                    if (this.hasOwnProperty(d("elementProperties"))) return;
                    let a = Z(this);
                    a.finalize(), void 0 !== a.l && (this.l = [...a.l]), this.elementProperties = new Map(a.elementProperties)
                }
                static finalize() {
                    if (this.hasOwnProperty(d("finalized"))) return;
                    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(d("properties"))) {
                        let a = this.properties,
                            s = [...W(a), ...z(a)];
                        for (let p of s) this.createProperty(p, a[p])
                    }
                    let a = this[Symbol.metadata];
                    if (null !== a) {
                        let s = litPropertyMetadata.get(a);
                        if (void 0 !== s)
                            for (let [a, p] of s) this.elementProperties.set(a, p)
                    }
                    for (let [a, s] of (this._$Eh = new Map, this.elementProperties)) {
                        let p = this._$Eu(a, s);
                        void 0 !== p && this._$Eh.set(p, a)
                    }
                    this.elementStyles = this.finalizeStyles(this.styles)
                }
                static finalizeStyles(a) {
                    let s = [];
                    if (Array.isArray(a)) {
                        let p = new Set(a.flat(1 / 0).reverse());
                        for (let a of p) s.unshift(_(a))
                    } else void 0 !== a && s.push(_(a));
                    return s
                }
                static _$Eu(a, s) {
                    let p = s.attribute;
                    return !1 === p ? void 0 : "string" == typeof p ? p : "string" == typeof a ? a.toLowerCase() : void 0
                }
                constructor() {
                    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev()
                }
                _$Ev() {
                    this._$Eg = new Promise(a => this.enableUpdating = a), this._$AL = new Map, this._$ES(), this.requestUpdate(), this.constructor.l ? .forEach(a => a(this))
                }
                addController(a) {
                    (this._$E_ ? ? = new Set).add(a), void 0 !== this.renderRoot && this.isConnected && a.hostConnected ? .()
                }
                removeController(a) {
                    this._$E_ ? .delete(a)
                }
                _$ES() {
                    let a = new Map,
                        s = this.constructor.elementProperties;
                    for (let p of s.keys()) this.hasOwnProperty(p) && (a.set(p, this[p]), delete this[p]);
                    a.size > 0 && (this._$Ep = a)
                }
                createRenderRoot() {
                    let a = this.shadowRoot ? ? this.attachShadow(this.constructor.shadowRootOptions);
                    return S(a, this.constructor.elementStyles), a
                }
                connectedCallback() {
                    this.renderRoot ? ? = this.createRenderRoot(), this.enableUpdating(!0), this._$E_ ? .forEach(a => a.hostConnected ? .())
                }
                enableUpdating(a) {}
                disconnectedCallback() {
                    this._$E_ ? .forEach(a => a.hostDisconnected ? .())
                }
                attributeChangedCallback(a, s, p) {
                    this._$AK(a, p)
                }
                _$EO(a, s) {
                    let p = this.constructor.elementProperties.get(a),
                        g = this.constructor._$Eu(a, p);
                    if (void 0 !== g && !0 === p.reflect) {
                        let m = (void 0 !== p.converter ? .toAttribute ? p.converter : ei).toAttribute(s, p.type);
                        this._$Em = a, null == m ? this.removeAttribute(g) : this.setAttribute(g, m), this._$Em = null
                    }
                }
                _$AK(a, s) {
                    let p = this.constructor,
                        g = p._$Eh.get(a);
                    if (void 0 !== g && this._$Em !== g) {
                        let a = p.getPropertyOptions(g),
                            m = "function" == typeof a.converter ? {
                                fromAttribute: a.converter
                            } : void 0 !== a.converter ? .fromAttribute ? a.converter : ei;
                        this._$Em = g, this[g] = m.fromAttribute(s, a.type), this._$Em = null
                    }
                }
                requestUpdate(a, s, p, g = !1, m) {
                    if (void 0 !== a) {
                        if (!((p ? ? = this.constructor.getPropertyOptions(a)).hasChanged ? ? f)(g ? m : this[a], s)) return;
                        this.C(a, s, p)
                    }!1 === this.isUpdatePending && (this._$Eg = this._$EP())
                }
                C(a, s, p) {
                    this._$AL.has(a) || this._$AL.set(a, s), !0 === p.reflect && this._$Em !== a && (this._$Ej ? ? = new Set).add(a)
                }
                async _$EP() {
                    this.isUpdatePending = !0;
                    try {
                        await this._$Eg
                    } catch (a) {
                        Promise.reject(a)
                    }
                    let a = this.scheduleUpdate();
                    return null != a && await a, !this.isUpdatePending
                }
                scheduleUpdate() {
                    return this.performUpdate()
                }
                performUpdate() {
                    if (!this.isUpdatePending) return;
                    if (!this.hasUpdated) {
                        if (this.renderRoot ? ? = this.createRenderRoot(), this._$Ep) {
                            for (let [a, s] of this._$Ep) this[a] = s;
                            this._$Ep = void 0
                        }
                        let a = this.constructor.elementProperties;
                        if (a.size > 0)
                            for (let [s, p] of a) !0 !== p.wrapped || this._$AL.has(s) || void 0 === this[s] || this.C(s, this[s], p)
                    }
                    let a = !1,
                        s = this._$AL;
                    try {
                        (a = this.shouldUpdate(s)) ? (this.willUpdate(s), this._$E_ ? .forEach(a => a.hostUpdate ? .()), this.update(s)) : this._$ET()
                    } catch (s) {
                        throw a = !1, this._$ET(), s
                    }
                    a && this._$AE(s)
                }
                willUpdate(a) {}
                _$AE(a) {
                    this._$E_ ? .forEach(a => a.hostUpdated ? .()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(a)), this.updated(a)
                }
                _$ET() {
                    this._$AL = new Map, this.isUpdatePending = !1
                }
                get updateComplete() {
                    return this.getUpdateComplete()
                }
                getUpdateComplete() {
                    return this._$Eg
                }
                shouldUpdate(a) {
                    return !0
                }
                update(a) {
                    this._$Ej && = this._$Ej.forEach(a => this._$EO(a, this[a])), this._$ET()
                }
                updated(a) {}
                firstUpdated(a) {}
            };
            b.elementStyles = [], b.shadowRootOptions = {
                mode: "open"
            }, b[d("elementProperties")] = new Map, b[d("finalized")] = new Map, J ? .({
                ReactiveElement: b
            }), (Q.reactiveElementVersions ? ? = []).push("2.0.2")
        },
        35377: function(a, s, p) {
            "use strict";
            p.d(s, {
                Jb: function() {
                    return eo
                },
                Ld: function() {
                    return ea
                },
                _$LH: function() {
                    return ec
                }
            });
            /**
             * @license
             * Copyright 2017 Google LLC
             * SPDX-License-Identifier: BSD-3-Clause
             */
            let g = globalThis,
                m = g.trustedTypes,
                v = m ? m.createPolicy("lit-html", {
                    createHTML: a => a
                }) : void 0,
                x = "$lit$",
                _ = `lit$${(Math.random()+"").slice(9)}$`,
                E = "?" + _,
                T = `<${E}>`,
                F = document,
                l = () => F.createComment(""),
                c = a => null === a || "object" != typeof a && "function" != typeof a,
                W = Array.isArray,
                u = a => W(a) || "function" == typeof a ? .[Symbol.iterator],
                z = "[ 	\n\f\r]",
                Z = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,
                Q = /-->/g,
                Y = />/g,
                X = RegExp(`>|${z}(?:([^\\s"'>=/]+)(${z}*=${z}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"),
                J = /'/g,
                ei = /"/g,
                en = /^(?:script|style|textarea|title)$/i,
                y = a => (s, ...p) => ({
                    _$litType$: a,
                    strings: s,
                    values: p
                }),
                eo = (y(1), y(2), Symbol.for("lit-noChange")),
                ea = Symbol.for("lit-nothing"),
                es = new WeakMap,
                el = F.createTreeWalker(F, 129);

            function C(a, s) {
                if (!Array.isArray(a) || !a.hasOwnProperty("raw")) throw Error("invalid template strings array");
                return void 0 !== v ? v.createHTML(s) : s
            }
            let P = (a, s) => {
                let p = a.length - 1,
                    g = [],
                    m, v = 2 === s ? "<svg>" : "",
                    E = Z;
                for (let s = 0; s < p; s++) {
                    let p = a[s],
                        F, W, z = -1,
                        eo = 0;
                    for (; eo < p.length && (E.lastIndex = eo, null !== (W = E.exec(p)));) eo = E.lastIndex, E === Z ? "!--" === W[1] ? E = Q : void 0 !== W[1] ? E = Y : void 0 !== W[2] ? (en.test(W[2]) && (m = RegExp("</" + W[2], "g")), E = X) : void 0 !== W[3] && (E = X) : E === X ? ">" === W[0] ? (E = m ? ? Z, z = -1) : void 0 === W[1] ? z = -2 : (z = E.lastIndex - W[2].length, F = W[1], E = void 0 === W[3] ? X : '"' === W[3] ? ei : J) : E === ei || E === J ? E = X : E === Q || E === Y ? E = Z : (E = X, m = void 0);
                    let ea = E === X && a[s + 1].startsWith("/>") ? " " : "";
                    v += E === Z ? p + T : z >= 0 ? (g.push(F), p.slice(0, z) + x + p.slice(z) + _ + ea) : p + _ + (-2 === z ? s : ea)
                }
                return [C(a, v + (a[p] || "<?>") + (2 === s ? "</svg>" : "")), g]
            };
            let V = class V {
                constructor({
                    strings: a,
                    _$litType$: s
                }, p) {
                    let g;
                    this.parts = [];
                    let v = 0,
                        T = 0,
                        F = a.length - 1,
                        W = this.parts,
                        [z, Z] = P(a, s);
                    if (this.el = V.createElement(z, p), el.currentNode = this.el.content, 2 === s) {
                        let a = this.el.content.firstChild;
                        a.replaceWith(...a.childNodes)
                    }
                    for (; null !== (g = el.nextNode()) && W.length < F;) {
                        if (1 === g.nodeType) {
                            if (g.hasAttributes())
                                for (let a of g.getAttributeNames())
                                    if (a.endsWith(x)) {
                                        let s = Z[T++],
                                            p = g.getAttribute(a).split(_),
                                            m = /([.?@])?(.*)/.exec(s);
                                        W.push({
                                            type: 1,
                                            index: v,
                                            name: m[2],
                                            strings: p,
                                            ctor: "." === m[1] ? k : "?" === m[1] ? H : "@" === m[1] ? I : R
                                        }), g.removeAttribute(a)
                                    } else a.startsWith(_) && (W.push({
                                        type: 6,
                                        index: v
                                    }), g.removeAttribute(a));
                            if (en.test(g.tagName)) {
                                let a = g.textContent.split(_),
                                    s = a.length - 1;
                                if (s > 0) {
                                    g.textContent = m ? m.emptyScript : "";
                                    for (let p = 0; p < s; p++) g.append(a[p], l()), el.nextNode(), W.push({
                                        type: 2,
                                        index: ++v
                                    });
                                    g.append(a[s], l())
                                }
                            }
                        } else if (8 === g.nodeType) {
                            if (g.data === E) W.push({
                                type: 2,
                                index: v
                            });
                            else {
                                let a = -1;
                                for (; - 1 !== (a = g.data.indexOf(_, a + 1));) W.push({
                                    type: 7,
                                    index: v
                                }), a += _.length - 1
                            }
                        }
                        v++
                    }
                }
                static createElement(a, s) {
                    let p = F.createElement("template");
                    return p.innerHTML = a, p
                }
            };

            function N(a, s, p = a, g) {
                if (s === eo) return s;
                let m = void 0 !== g ? p._$Co ? .[g] : p._$Cl,
                    v = c(s) ? void 0 : s._$litDirective$;
                return m ? .constructor !== v && (m ? ._$AO ? .(!1), void 0 === v ? m = void 0 : (m = new v(a))._$AT(a, p, g), void 0 !== g ? (p._$Co ? ? = [])[g] = m : p._$Cl = m), void 0 !== m && (s = N(a, m._$AS(a, s.values), m, g)), s
            }
            let S = class S {
                constructor(a, s) {
                    this._$AV = [], this._$AN = void 0, this._$AD = a, this._$AM = s
                }
                get parentNode() {
                    return this._$AM.parentNode
                }
                get _$AU() {
                    return this._$AM._$AU
                }
                u(a) {
                    let {
                        el: {
                            content: s
                        },
                        parts: p
                    } = this._$AD, g = (a ? .creationScope ? ? F).importNode(s, !0);
                    el.currentNode = g;
                    let m = el.nextNode(),
                        v = 0,
                        x = 0,
                        _ = p[0];
                    for (; void 0 !== _;) {
                        if (v === _.index) {
                            let s;
                            2 === _.type ? s = new M(m, m.nextSibling, this, a) : 1 === _.type ? s = new _.ctor(m, _.name, _.strings, this, a) : 6 === _.type && (s = new L(m, this, a)), this._$AV.push(s), _ = p[++x]
                        }
                        v !== _ ? .index && (m = el.nextNode(), v++)
                    }
                    return el.currentNode = F, g
                }
                p(a) {
                    let s = 0;
                    for (let p of this._$AV) void 0 !== p && (void 0 !== p.strings ? (p._$AI(a, p, s), s += p.strings.length - 2) : p._$AI(a[s])), s++
                }
            };
            let M = class M {
                get _$AU() {
                    return this._$AM ? ._$AU ? ? this._$Cv
                }
                constructor(a, s, p, g) {
                    this.type = 2, this._$AH = ea, this._$AN = void 0, this._$AA = a, this._$AB = s, this._$AM = p, this.options = g, this._$Cv = g ? .isConnected ? ? !0
                }
                get parentNode() {
                    let a = this._$AA.parentNode,
                        s = this._$AM;
                    return void 0 !== s && 11 === a ? .nodeType && (a = s.parentNode), a
                }
                get startNode() {
                    return this._$AA
                }
                get endNode() {
                    return this._$AB
                }
                _$AI(a, s = this) {
                    c(a = N(this, a, s)) ? a === ea || null == a || "" === a ? (this._$AH !== ea && this._$AR(), this._$AH = ea) : a !== this._$AH && a !== eo && this._(a) : void 0 !== a._$litType$ ? this.g(a) : void 0 !== a.nodeType ? this.$(a) : u(a) ? this.T(a) : this._(a)
                }
                k(a) {
                    return this._$AA.parentNode.insertBefore(a, this._$AB)
                }
                $(a) {
                    this._$AH !== a && (this._$AR(), this._$AH = this.k(a))
                }
                _(a) {
                    this._$AH !== ea && c(this._$AH) ? this._$AA.nextSibling.data = a : this.$(F.createTextNode(a)), this._$AH = a
                }
                g(a) {
                    let {
                        values: s,
                        _$litType$: p
                    } = a, g = "number" == typeof p ? this._$AC(a) : (void 0 === p.el && (p.el = V.createElement(C(p.h, p.h[0]), this.options)), p);
                    if (this._$AH ? ._$AD === g) this._$AH.p(s);
                    else {
                        let a = new S(g, this),
                            p = a.u(this.options);
                        a.p(s), this.$(p), this._$AH = a
                    }
                }
                _$AC(a) {
                    let s = es.get(a.strings);
                    return void 0 === s && es.set(a.strings, s = new V(a)), s
                }
                T(a) {
                    W(this._$AH) || (this._$AH = [], this._$AR());
                    let s = this._$AH,
                        p, g = 0;
                    for (let m of a) g === s.length ? s.push(p = new M(this.k(l()), this.k(l()), this, this.options)) : p = s[g], p._$AI(m), g++;
                    g < s.length && (this._$AR(p && p._$AB.nextSibling, g), s.length = g)
                }
                _$AR(a = this._$AA.nextSibling, s) {
                    for (this._$AP ? .(!1, !0, s); a && a !== this._$AB;) {
                        let s = a.nextSibling;
                        a.remove(), a = s
                    }
                }
                setConnected(a) {
                    void 0 === this._$AM && (this._$Cv = a, this._$AP ? .(a))
                }
            };
            let R = class R {
                get tagName() {
                    return this.element.tagName
                }
                get _$AU() {
                    return this._$AM._$AU
                }
                constructor(a, s, p, g, m) {
                    this.type = 1, this._$AH = ea, this._$AN = void 0, this.element = a, this.name = s, this._$AM = g, this.options = m, p.length > 2 || "" !== p[0] || "" !== p[1] ? (this._$AH = Array(p.length - 1).fill(new String), this.strings = p) : this._$AH = ea
                }
                _$AI(a, s = this, p, g) {
                    let m = this.strings,
                        v = !1;
                    if (void 0 === m)(v = !c(a = N(this, a, s, 0)) || a !== this._$AH && a !== eo) && (this._$AH = a);
                    else {
                        let g, x;
                        let _ = a;
                        for (a = m[0], g = 0; g < m.length - 1; g++)(x = N(this, _[p + g], s, g)) === eo && (x = this._$AH[g]), v || = !c(x) || x !== this._$AH[g], x === ea ? a = ea : a !== ea && (a += (x ? ? "") + m[g + 1]), this._$AH[g] = x
                    }
                    v && !g && this.O(a)
                }
                O(a) {
                    a === ea ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, a ? ? "")
                }
            };
            let k = class k extends R {
                constructor() {
                    super(...arguments), this.type = 3
                }
                O(a) {
                    this.element[this.name] = a === ea ? void 0 : a
                }
            };
            let H = class H extends R {
                constructor() {
                    super(...arguments), this.type = 4
                }
                O(a) {
                    this.element.toggleAttribute(this.name, !!a && a !== ea)
                }
            };
            let I = class I extends R {
                constructor(a, s, p, g, m) {
                    super(a, s, p, g, m), this.type = 5
                }
                _$AI(a, s = this) {
                    if ((a = N(this, a, s, 0) ? ? ea) === eo) return;
                    let p = this._$AH,
                        g = a === ea && p !== ea || a.capture !== p.capture || a.once !== p.once || a.passive !== p.passive,
                        m = a !== ea && (p === ea || g);
                    g && this.element.removeEventListener(this.name, this, p), m && this.element.addEventListener(this.name, this, a), this._$AH = a
                }
                handleEvent(a) {
                    "function" == typeof this._$AH ? this._$AH.call(this.options ? .host ? ? this.element, a) : this._$AH.handleEvent(a)
                }
            };
            let L = class L {
                constructor(a, s, p) {
                    this.element = a, this.type = 6, this._$AN = void 0, this._$AM = s, this.options = p
                }
                get _$AU() {
                    return this._$AM._$AU
                }
                _$AI(a) {
                    N(this, a)
                }
            };
            let ec = {
                    j: x,
                    P: _,
                    A: E,
                    C: 1,
                    M: P,
                    L: S,
                    R: u,
                    V: N,
                    D: M,
                    I: R,
                    H,
                    N: I,
                    U: k,
                    B: L
                },
                eu = g.litHtmlPolyfillSupport;
            eu ? .(V, M), (g.litHtmlVersions ? ? = []).push("3.1.0")
        },
        53722: function(a, s, p) {
            "use strict";
            p.d(s, {
                sj: function() {
                    return proxy
                },
                iH: function() {
                    return ref
                },
                CO: function() {
                    return snapshot
                },
                Ld: function() {
                    return subscribe
                }
            }), Symbol();
            let g = Symbol(),
                m = Object.getPrototypeOf,
                v = new WeakMap,
                l = a => a && (v.has(a) ? v.get(a) : m(a) === Object.prototype || m(a) === Array.prototype),
                y = a => l(a) && a[g] || null,
                h = (a, s = !0) => {
                    v.set(a, s)
                },
                isObject = a => "object" == typeof a && null !== a,
                x = new WeakMap,
                _ = new WeakSet,
                buildProxyFunction = (a = Object.is, s = (a, s) => new Proxy(a, s), p = a => isObject(a) && !_.has(a) && (Array.isArray(a) || !(Symbol.iterator in a)) && !(a instanceof WeakMap) && !(a instanceof WeakSet) && !(a instanceof Error) && !(a instanceof Number) && !(a instanceof Date) && !(a instanceof String) && !(a instanceof RegExp) && !(a instanceof ArrayBuffer), g = a => {
                    switch (a.status) {
                        case "fulfilled":
                            return a.value;
                        case "rejected":
                            throw a.reason;
                        default:
                            throw a
                    }
                }, m = new WeakMap, v = (a, s, p = g) => {
                    let E = m.get(a);
                    if ((null == E ? void 0 : E[0]) === s) return E[1];
                    let T = Array.isArray(a) ? [] : Object.create(Object.getPrototypeOf(a));
                    return h(T, !0), m.set(a, [s, T]), Reflect.ownKeys(a).forEach(s => {
                        if (Object.getOwnPropertyDescriptor(T, s)) return;
                        let g = Reflect.get(a, s),
                            m = {
                                value: g,
                                enumerable: !0,
                                configurable: !0
                            };
                        if (_.has(g)) h(g, !1);
                        else if (g instanceof Promise) delete m.value, m.get = () => p(g);
                        else if (x.has(g)) {
                            let [a, s] = x.get(g);
                            m.value = v(a, s(), p)
                        }
                        Object.defineProperty(T, s, m)
                    }), Object.preventExtensions(T)
                }, E = new WeakMap, T = [1, 1], F = g => {
                    if (!isObject(g)) throw Error("object required");
                    let m = E.get(g);
                    if (m) return m;
                    let W = T[0],
                        z = new Set,
                        notifyUpdate = (a, s = ++T[0]) => {
                            W !== s && (W = s, z.forEach(p => p(a, s)))
                        },
                        Z = T[1],
                        ensureVersion = (a = ++T[1]) => (Z === a || z.size || (Z = a, Q.forEach(([s]) => {
                            let p = s[1](a);
                            p > W && (W = p)
                        })), W),
                        createPropListener = a => (s, p) => {
                            let g = [...s];
                            g[1] = [a, ...g[1]], notifyUpdate(g, p)
                        },
                        Q = new Map,
                        addPropListener = (a, s) => {
                            if (Q.has(a)) throw Error("prop listener already exists");
                            if (z.size) {
                                let p = s[3](createPropListener(a));
                                Q.set(a, [s, p])
                            } else Q.set(a, [s])
                        },
                        removePropListener = a => {
                            var s;
                            let p = Q.get(a);
                            p && (Q.delete(a), null == (s = p[1]) || s.call(p))
                        },
                        addListener = a => {
                            z.add(a), 1 === z.size && Q.forEach(([a, s], p) => {
                                if (s) throw Error("remove already exists");
                                let g = a[3](createPropListener(p));
                                Q.set(p, [a, g])
                            });
                            let removeListener = () => {
                                z.delete(a), 0 === z.size && Q.forEach(([a, s], p) => {
                                    s && (s(), Q.set(p, [a]))
                                })
                            };
                            return removeListener
                        },
                        Y = Array.isArray(g) ? [] : Object.create(Object.getPrototypeOf(g)),
                        X = {
                            deleteProperty(a, s) {
                                let p = Reflect.get(a, s);
                                removePropListener(s);
                                let g = Reflect.deleteProperty(a, s);
                                return g && notifyUpdate(["delete", [s], p]), g
                            },
                            set(s, g, m, v) {
                                let T = Reflect.has(s, g),
                                    W = Reflect.get(s, g, v);
                                if (T && (a(W, m) || E.has(m) && a(W, E.get(m)))) return !0;
                                removePropListener(g), isObject(m) && (m = y(m) || m);
                                let z = m;
                                if (m instanceof Promise) m.then(a => {
                                    m.status = "fulfilled", m.value = a, notifyUpdate(["resolve", [g], a])
                                }).catch(a => {
                                    m.status = "rejected", m.reason = a, notifyUpdate(["reject", [g], a])
                                });
                                else {
                                    !x.has(m) && p(m) && (z = F(m));
                                    let a = !_.has(z) && x.get(z);
                                    a && addPropListener(g, a)
                                }
                                return Reflect.set(s, g, z, v), notifyUpdate(["set", [g], m, W]), !0
                            }
                        },
                        J = s(Y, X);
                    E.set(g, J);
                    let ei = [Y, ensureVersion, v, addListener];
                    return x.set(J, ei), Reflect.ownKeys(g).forEach(a => {
                        let s = Object.getOwnPropertyDescriptor(g, a);
                        "value" in s && (J[a] = g[a], delete s.value, delete s.writable), Object.defineProperty(Y, a, s)
                    }), J
                }) => [F, x, _, a, s, p, g, m, v, E, T],
                [E] = buildProxyFunction();

            function proxy(a = {}) {
                return E(a)
            }

            function subscribe(a, s, p) {
                let g;
                let m = x.get(a);
                m || console.warn("Please use proxy object");
                let v = [],
                    _ = m[3],
                    E = !1,
                    T = _(a => {
                        if (v.push(a), p) {
                            s(v.splice(0));
                            return
                        }
                        g || (g = Promise.resolve().then(() => {
                            g = void 0, E && s(v.splice(0))
                        }))
                    });
                return E = !0, () => {
                    E = !1, T()
                }
            }

            function snapshot(a, s) {
                let p = x.get(a);
                p || console.warn("Please use proxy object");
                let [g, m, v] = p;
                return v(g, m(), s)
            }

            function ref(a) {
                return _.add(a), a
            }
        },
        4832: function(a, s, p) {
            "use strict";

            function parseAccount(a) {
                return "string" == typeof a ? {
                    address: a,
                    type: "json-rpc"
                } : a
            }
            p.d(s, {
                T: function() {
                    return parseAccount
                }
            })
        },
        98873: function(a, s, p) {
            "use strict";
            p.d(s, {
                R: function() {
                    return call
                }
            });
            var g = p(4832),
                m = p(42980),
                v = p(95950),
                x = p(27878),
                _ = p(98458),
                E = p(3458),
                T = p(53883),
                F = p(94540),
                W = p(21693),
                z = p(40009),
                Z = p(36074),
                Q = p(21028),
                Y = p(86868),
                X = p(33668),
                J = p(2445);
            async function call(a, s) {
                let {
                    account: m = a.account,
                    batch: E = !!a.batch ? .multicall,
                    blockNumber: T,
                    blockTag: F = "latest",
                    accessList: X,
                    data: ei,
                    gas: en,
                    gasPrice: eo,
                    maxFeePerGas: ea,
                    maxPriorityFeePerGas: es,
                    nonce: el,
                    to: ec,
                    value: eu,
                    ...ed
                } = s, eh = m ? (0, g.T)(m) : void 0;
                try {
                    (0, J.F)(s);
                    let p = T ? (0, W.eC)(T) : void 0,
                        g = p || F,
                        m = a.chain ? .formatters ? .transactionRequest ? .format,
                        v = m || Y.tG,
                        _ = v({ ...(0, Q.K)(ed, {
                                format: m
                            }),
                            from: eh ? .address,
                            accessList: X,
                            data: ei,
                            gas: en,
                            gasPrice: eo,
                            maxFeePerGas: ea,
                            maxPriorityFeePerGas: es,
                            nonce: el,
                            to: ec,
                            value: eu
                        });
                    if (E && function({
                            request: a
                        }) {
                            let {
                                data: s,
                                to: p,
                                ...g
                            } = a;
                            return !(!s || s.startsWith("0x82ad56cb")) && !!p && !(Object.values(g).filter(a => void 0 !== a).length > 0)
                        }({
                            request: _
                        })) try {
                        return await scheduleMulticall(a, { ..._,
                            blockNumber: T,
                            blockTag: F
                        })
                    } catch (a) {
                        if (!(a instanceof x.pZ) && !(a instanceof x.mm)) throw a
                    }
                    let z = await a.request({
                        method: "eth_call",
                        params: g ? [_, g] : [_]
                    });
                    if ("0x" === z) return {
                        data: void 0
                    };
                    return {
                        data: z
                    }
                } catch (E) {
                    let g = function(a) {
                            if (!(a instanceof v.G)) return;
                            let s = a.walk();
                            return "object" == typeof s.data ? s.data.data : s.data
                        }(E),
                        {
                            offchainLookup: m,
                            offchainLookupSignature: x
                        } = await p.e(5572).then(p.bind(p, 55018));
                    if (g ? .slice(0, 10) === x && ec) return {
                        data: await m(a, {
                            data: g,
                            to: ec
                        })
                    };
                    throw function(a, {
                        docsPath: s,
                        ...p
                    }) {
                        let g = (() => {
                            let s = (0, Z.k)(a, p);
                            return s instanceof z.cj ? a : s
                        })();
                        return new _.cg(g, {
                            docsPath: s,
                            ...p
                        })
                    }(E, { ...s,
                        account: eh,
                        chain: a.chain
                    })
                }
            }
            async function scheduleMulticall(a, s) {
                let {
                    batchSize: p = 1024,
                    wait: g = 0
                } = "object" == typeof a.batch ? .multicall ? a.batch.multicall : {}, {
                    blockNumber: v,
                    blockTag: z = "latest",
                    data: Z,
                    multicallAddress: Q,
                    to: Y
                } = s, J = Q;
                if (!J) {
                    if (!a.chain) throw new x.pZ;
                    J = (0, F.L)({
                        blockNumber: v,
                        chain: a.chain,
                        contract: "multicall3"
                    })
                }
                let ei = v ? (0, W.eC)(v) : void 0,
                    en = ei || z,
                    {
                        schedule: eo
                    } = (0, X.S)({
                        id: `${a.uid}.${en}`,
                        wait: g,
                        shouldSplitBatch(a) {
                            let s = a.reduce((a, {
                                data: s
                            }) => a + (s.length - 2), 0);
                            return s > 2 * p
                        },
                        fn: async s => {
                            let p = s.map(a => ({
                                    allowFailure: !0,
                                    callData: a.data,
                                    target: a.to
                                })),
                                g = (0, T.R)({
                                    abi: m.F8,
                                    args: [p],
                                    functionName: "aggregate3"
                                }),
                                v = await a.request({
                                    method: "eth_call",
                                    params: [{
                                        data: g,
                                        to: J
                                    }, en]
                                });
                            return (0, E.k)({
                                abi: m.F8,
                                args: [p],
                                functionName: "aggregate3",
                                data: v || "0x"
                            })
                        }
                    }),
                    [{
                        returnData: ea,
                        success: es
                    }] = await eo({
                        data: Z,
                        to: Y
                    });
                if (!es) throw new _.VQ({
                    data: ea
                });
                return "0x" === ea ? {
                    data: void 0
                } : {
                    data: ea
                }
            }
        },
        77451: function(a, s, p) {
            "use strict";
            p.d(s, {
                C: function() {
                    return internal_estimateFeesPerGas
                },
                X: function() {
                    return estimateFeesPerGas
                }
            });
            var g = p(84161),
                m = p(82600),
                v = p(17976),
                x = p(69059),
                _ = p(75188);
            async function estimateFeesPerGas(a, s) {
                return internal_estimateFeesPerGas(a, s)
            }
            async function internal_estimateFeesPerGas(a, s) {
                let {
                    block: p,
                    chain: E = a.chain,
                    request: T,
                    type: F = "eip1559"
                } = s || {}, W = await (async () => "function" == typeof E ? .fees ? .baseFeeMultiplier ? E.fees.baseFeeMultiplier({
                    block: p,
                    client: a,
                    request: T
                }) : E ? .fees ? .baseFeeMultiplier ? ? 1.2)();
                if (W < 1) throw new g.Fz;
                let z = W.toString().split(".")[1] ? .length ? ? 0,
                    Z = 10 ** z,
                    multiply = a => a * BigInt(Math.ceil(W * Z)) / BigInt(Z),
                    Q = p || await (0, m.s)(a, x.Q, "getBlock")({});
                if ("function" == typeof E ? .fees ? .estimateFeesPerGas) return E.fees.estimateFeesPerGas({
                    block: p,
                    client: a,
                    multiply,
                    request: T,
                    type: F
                });
                if ("eip1559" === F) {
                    if ("bigint" != typeof Q.baseFeePerGas) throw new g.e5;
                    let s = T ? .maxPriorityFeePerGas ? T.maxPriorityFeePerGas : await (0, v.h)(a, {
                            block: Q,
                            chain: E,
                            request: T
                        }),
                        p = multiply(Q.baseFeePerGas),
                        m = T ? .maxFeePerGas ? ? p + s;
                    return {
                        maxFeePerGas: m,
                        maxPriorityFeePerGas: s
                    }
                }
                let Y = T ? .gasPrice ? ? multiply(await (0, m.s)(a, _.o, "getGasPrice")({}));
                return {
                    gasPrice: Y
                }
            }
        },
        89412: function(a, s, p) {
            "use strict";
            p.d(s, {
                Q: function() {
                    return estimateGas
                }
            });
            var g = p(4832),
                m = p(67333),
                v = p(21693),
                x = p(79352),
                _ = p(32421),
                E = p(95950),
                T = p(44818);
            let EstimateGasExecutionError = class EstimateGasExecutionError extends E.G {
                constructor(a, {
                    account: s,
                    docsPath: p,
                    chain: g,
                    data: m,
                    gas: v,
                    gasPrice: E,
                    maxFeePerGas: F,
                    maxPriorityFeePerGas: W,
                    nonce: z,
                    to: Z,
                    value: Q
                }) {
                    let Y = (0, T.xr)({
                        from: s ? .address,
                        to: Z,
                        value: void 0 !== Q && `${(0,x.d)(Q)} ${g?.nativeCurrency?.symbol||"ETH"}`,
                        data: m,
                        gas: v,
                        gasPrice: void 0 !== E && `${(0,_.o)(E)} gwei`,
                        maxFeePerGas: void 0 !== F && `${(0,_.o)(F)} gwei`,
                        maxPriorityFeePerGas: void 0 !== W && `${(0,_.o)(W)} gwei`,
                        nonce: z
                    });
                    super(a.shortMessage, {
                        cause: a,
                        docsPath: p,
                        metaMessages: [...a.metaMessages ? [...a.metaMessages, " "] : [], "Estimate Gas Arguments:", Y].filter(Boolean)
                    }), Object.defineProperty(this, "cause", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "EstimateGasExecutionError"
                    }), this.cause = a
                }
            };
            var F = p(40009),
                W = p(36074),
                z = p(21028),
                Z = p(86868),
                Q = p(2445),
                Y = p(40044);
            async function estimateGas(a, s) {
                let p = s.account ? ? a.account;
                if (!p) throw new m.o({
                    docsPath: "/docs/actions/public/estimateGas"
                });
                let x = (0, g.T)(p);
                try {
                    let {
                        accessList: p,
                        blockNumber: g,
                        blockTag: m,
                        data: _,
                        gas: E,
                        gasPrice: T,
                        maxFeePerGas: F,
                        maxPriorityFeePerGas: W,
                        nonce: X,
                        to: J,
                        value: ei,
                        ...en
                    } = "local" === x.type ? await (0, Y.Z)(a, s) : s, eo = g ? (0, v.eC)(g) : void 0, ea = eo || m;
                    (0, Q.F)(s);
                    let es = a.chain ? .formatters ? .transactionRequest ? .format,
                        el = es || Z.tG,
                        ec = el({ ...(0, z.K)(en, {
                                format: es
                            }),
                            from: x.address,
                            accessList: p,
                            data: _,
                            gas: E,
                            gasPrice: T,
                            maxFeePerGas: F,
                            maxPriorityFeePerGas: W,
                            nonce: X,
                            to: J,
                            value: ei
                        }),
                        eu = await a.request({
                            method: "eth_estimateGas",
                            params: ea ? [ec, ea] : [ec]
                        });
                    return BigInt(eu)
                } catch (p) {
                    throw function(a, {
                        docsPath: s,
                        ...p
                    }) {
                        let g = (() => {
                            let s = (0, W.k)(a, p);
                            return s instanceof F.cj ? a : s
                        })();
                        return new EstimateGasExecutionError(g, {
                            docsPath: s,
                            ...p
                        })
                    }(p, { ...s,
                        account: x,
                        chain: a.chain
                    })
                }
            }
        },
        17976: function(a, s, p) {
            "use strict";
            p.d(s, {
                _: function() {
                    return estimateMaxPriorityFeePerGas
                },
                h: function() {
                    return internal_estimateMaxPriorityFeePerGas
                }
            });
            var g = p(84161),
                m = p(30838),
                v = p(82600),
                x = p(69059),
                _ = p(75188);
            async function estimateMaxPriorityFeePerGas(a, s) {
                return internal_estimateMaxPriorityFeePerGas(a, s)
            }
            async function internal_estimateMaxPriorityFeePerGas(a, s) {
                let {
                    block: p,
                    chain: E = a.chain,
                    request: T
                } = s || {};
                if ("function" == typeof E ? .fees ? .defaultPriorityFee) {
                    let s = p || await (0, v.s)(a, x.Q, "getBlock")({});
                    return E.fees.defaultPriorityFee({
                        block: s,
                        client: a,
                        request: T
                    })
                }
                if (void 0 !== E ? .fees ? .defaultPriorityFee) return E ? .fees ? .defaultPriorityFee;
                try {
                    let s = await a.request({
                        method: "eth_maxPriorityFeePerGas"
                    });
                    return (0, m.y_)(s)
                } catch {
                    let [s, m] = await Promise.all([p ? Promise.resolve(p) : (0, v.s)(a, x.Q, "getBlock")({}), (0, v.s)(a, _.o, "getGasPrice")({})]);
                    if ("bigint" != typeof s.baseFeePerGas) throw new g.e5;
                    let E = m - s.baseFeePerGas;
                    if (E < 0 n) return 0 n;
                    return E
                }
            }
        },
        69059: function(a, s, p) {
            "use strict";
            p.d(s, {
                Q: function() {
                    return getBlock
                }
            });
            var g = p(95950);
            let BlockNotFoundError = class BlockNotFoundError extends g.G {
                constructor({
                    blockHash: a,
                    blockNumber: s
                }) {
                    let p = "Block";
                    a && (p = `Block at hash "${a}"`), s && (p = `Block at number "${s}"`), super(`${p} could not be found.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "BlockNotFoundError"
                    })
                }
            };
            var m = p(21693),
                v = p(78723);
            async function getBlock(a, {
                blockHash: s,
                blockNumber: p,
                blockTag: g,
                includeTransactions: x
            } = {}) {
                let _ = x ? ? !1,
                    E = void 0 !== p ? (0, m.eC)(p) : void 0,
                    T = null;
                if (!(T = s ? await a.request({
                        method: "eth_getBlockByHash",
                        params: [s, _]
                    }) : await a.request({
                        method: "eth_getBlockByNumber",
                        params: [E || (g ? ? "latest"), _]
                    }))) throw new BlockNotFoundError({
                    blockHash: s,
                    blockNumber: p
                });
                let F = a.chain ? .formatters ? .block ? .format || v.Z;
                return F(T)
            }
        },
        13438: function(a, s, p) {
            "use strict";
            p.d(s, {
                L: function() {
                    return getChainId
                }
            });
            var g = p(30838);
            async function getChainId(a) {
                let s = await a.request({
                    method: "eth_chainId"
                });
                return (0, g.ly)(s)
            }
        },
        75188: function(a, s, p) {
            "use strict";
            async function getGasPrice(a) {
                let s = await a.request({
                    method: "eth_gasPrice"
                });
                return BigInt(s)
            }
            p.d(s, {
                o: function() {
                    return getGasPrice
                }
            })
        },
        31742: function(a, s, p) {
            "use strict";
            p.d(s, {
                K: function() {
                    return getTransactionCount
                }
            });
            var g = p(30838),
                m = p(21693);
            async function getTransactionCount(a, {
                address: s,
                blockTag: p = "latest",
                blockNumber: v
            }) {
                let x = await a.request({
                    method: "eth_getTransactionCount",
                    params: [s, v ? (0, m.eC)(v) : p]
                });
                return (0, g.ly)(x)
            }
        },
        40044: function(a, s, p) {
            "use strict";
            p.d(s, {
                Z: function() {
                    return prepareTransactionRequest
                }
            });
            var g = p(4832),
                m = p(77451),
                v = p(89412),
                x = p(69059),
                _ = p(31742),
                E = p(67333),
                T = p(84161),
                F = p(82600),
                W = p(2445),
                z = p(44818);
            async function prepareTransactionRequest(a, s) {
                let {
                    account: p = a.account,
                    chain: Z,
                    gas: Q,
                    nonce: Y,
                    type: X
                } = s;
                if (!p) throw new E.o;
                let J = (0, g.T)(p),
                    ei = await (0, F.s)(a, x.Q, "getBlock")({
                        blockTag: "latest"
                    }),
                    en = { ...s,
                        from: J.address
                    };
                if (void 0 === Y && (en.nonce = await (0, F.s)(a, _.K, "getTransactionCount")({
                        address: J.address,
                        blockTag: "pending"
                    })), void 0 === X) try {
                    en.type = function(a) {
                        if (a.type) return a.type;
                        if (void 0 !== a.maxFeePerGas || void 0 !== a.maxPriorityFeePerGas) return "eip1559";
                        if (void 0 !== a.gasPrice) return void 0 !== a.accessList ? "eip2930" : "legacy";
                        throw new z.j3({
                            transaction: a
                        })
                    }(en)
                } catch {
                    en.type = "bigint" == typeof ei.baseFeePerGas ? "eip1559" : "legacy"
                }
                if ("eip1559" === en.type) {
                    let {
                        maxFeePerGas: p,
                        maxPriorityFeePerGas: g
                    } = await (0, m.C)(a, {
                        block: ei,
                        chain: Z,
                        request: en
                    });
                    if (void 0 === s.maxPriorityFeePerGas && s.maxFeePerGas && s.maxFeePerGas < g) throw new T.ld({
                        maxPriorityFeePerGas: g
                    });
                    en.maxPriorityFeePerGas = g, en.maxFeePerGas = p
                } else {
                    if (void 0 !== s.maxFeePerGas || void 0 !== s.maxPriorityFeePerGas) throw new T.e5;
                    let {
                        gasPrice: p
                    } = await (0, m.C)(a, {
                        block: ei,
                        chain: Z,
                        request: en,
                        type: "legacy"
                    });
                    en.gasPrice = p
                }
                return void 0 === Q && (en.gas = await (0, F.s)(a, v.Q, "estimateGas")({ ...en,
                    account: {
                        address: J.address,
                        type: "json-rpc"
                    }
                })), (0, W.F)(en), en
            }
        },
        73971: function(a, s, p) {
            "use strict";
            async function sendRawTransaction(a, {
                serializedTransaction: s
            }) {
                return a.request({
                    method: "eth_sendRawTransaction",
                    params: [s]
                })
            }
            p.d(s, {
                p: function() {
                    return sendRawTransaction
                }
            })
        },
        75404: function(a, s, p) {
            "use strict";
            p.d(s, {
                R: function() {
                    return m
                }
            });
            var g = p(71186);
            let m = (0, g.a)({
                id: 1,
                network: "homestead",
                name: "Ethereum",
                nativeCurrency: {
                    name: "Ether",
                    symbol: "ETH",
                    decimals: 18
                },
                rpcUrls: {
                    alchemy: {
                        http: ["https://eth-mainnet.g.alchemy.com/v2"],
                        webSocket: ["wss://eth-mainnet.g.alchemy.com/v2"]
                    },
                    infura: {
                        http: ["https://mainnet.infura.io/v3"],
                        webSocket: ["wss://mainnet.infura.io/ws/v3"]
                    },
                    default: {
                        http: ["https://cloudflare-eth.com"]
                    },
                    public: {
                        http: ["https://cloudflare-eth.com"]
                    }
                },
                blockExplorers: {
                    etherscan: {
                        name: "Etherscan",
                        url: "https://etherscan.io"
                    },
                    default: {
                        name: "Etherscan",
                        url: "https://etherscan.io"
                    }
                },
                contracts: {
                    ensRegistry: {
                        address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
                    },
                    ensUniversalResolver: {
                        address: "0xc0497E381f536Be9ce14B0dD3817cBcAe57d2F62",
                        blockCreated: 16966585
                    },
                    multicall3: {
                        address: "0xca11bde05977b3631167028862be2a173976ca11",
                        blockCreated: 14353601
                    }
                }
            })
        },
        30315: function(a, s, p) {
            "use strict";
            let g;
            p.d(s, {
                e: function() {
                    return createClient
                }
            });
            var m = p(4832);
            let v = 256;

            function createClient(a) {
                let {
                    batch: s,
                    cacheTime: p = a.pollingInterval ? ? 4e3,
                    key: x = "base",
                    name: _ = "Base Client",
                    pollingInterval: E = 4e3,
                    type: T = "base"
                } = a, F = a.chain, W = a.account ? (0, m.T)(a.account) : void 0, {
                    config: z,
                    request: Z,
                    value: Q
                } = a.transport({
                    chain: F,
                    pollingInterval: E
                }), Y = { ...z,
                    ...Q
                }, X = {
                    account: W,
                    batch: s,
                    cacheTime: p,
                    chain: F,
                    key: x,
                    name: _,
                    pollingInterval: E,
                    request: Z,
                    transport: Y,
                    type: T,
                    uid: function(a = 11) {
                        if (!g || v + a > 512) {
                            g = "", v = 0;
                            for (let a = 0; a < 256; a++) g += (256 + 256 * Math.random() | 0).toString(16).substring(1)
                        }
                        return g.substring(v, v++ + a)
                    }()
                };
                return Object.assign(X, {
                    extend: function extend(a) {
                        return s => {
                            let p = s(a);
                            for (let a in X) delete p[a];
                            let g = { ...a,
                                ...p
                            };
                            return Object.assign(g, {
                                extend: extend(g)
                            })
                        }
                    }(X)
                })
            }
        },
        71061: function(a, s, p) {
            "use strict";
            p.d(s, {
                K: function() {
                    return createWalletClient
                }
            });
            var g = p(30315),
                m = p(13438),
                v = p(21693);
            async function addChain(a, {
                chain: s
            }) {
                let {
                    id: p,
                    name: g,
                    nativeCurrency: m,
                    rpcUrls: x,
                    blockExplorers: _
                } = s;
                await a.request({
                    method: "wallet_addEthereumChain",
                    params: [{
                        chainId: (0, v.eC)(p),
                        chainName: g,
                        nativeCurrency: m,
                        rpcUrls: x.default.http,
                        blockExplorerUrls: _ ? Object.values(_).map(({
                            url: a
                        }) => a) : void 0
                    }]
                })
            }
            var x = p(12732),
                _ = p(4832),
                E = p(67333),
                T = p(27878);

            function assertCurrentChain({
                chain: a,
                currentChainId: s
            }) {
                if (!a) throw new T.Bk;
                if (s !== a.id) throw new T.Yl({
                    chain: a,
                    currentChainId: s
                })
            }
            var F = p(40009),
                W = p(44818),
                z = p(36074),
                Z = p(21028),
                Q = p(86868),
                Y = p(82600),
                X = p(2445),
                J = p(40044),
                ei = p(73971);
            async function sendTransaction(a, s) {
                let {
                    account: p = a.account,
                    chain: g = a.chain,
                    accessList: v,
                    data: x,
                    gas: T,
                    gasPrice: en,
                    maxFeePerGas: eo,
                    maxPriorityFeePerGas: ea,
                    nonce: es,
                    to: el,
                    value: ec,
                    ...eu
                } = s;
                if (!p) throw new E.o({
                    docsPath: "/docs/actions/wallet/sendTransaction"
                });
                let ed = (0, _.T)(p);
                try {
                    let p;
                    if ((0, X.F)(s), null !== g && (p = await (0, Y.s)(a, m.L, "getChainId")({}), assertCurrentChain({
                            currentChainId: p,
                            chain: g
                        })), "local" === ed.type) {
                        let s = await (0, Y.s)(a, J.Z, "prepareTransactionRequest")({
                            account: ed,
                            accessList: v,
                            chain: g,
                            data: x,
                            gas: T,
                            gasPrice: en,
                            maxFeePerGas: eo,
                            maxPriorityFeePerGas: ea,
                            nonce: es,
                            to: el,
                            value: ec,
                            ...eu
                        });
                        p || (p = await (0, Y.s)(a, m.L, "getChainId")({}));
                        let _ = g ? .serializers ? .transaction,
                            E = await ed.signTransaction({ ...s,
                                chainId: p
                            }, {
                                serializer: _
                            });
                        return await (0, Y.s)(a, ei.p, "sendRawTransaction")({
                            serializedTransaction: E
                        })
                    }
                    let _ = a.chain ? .formatters ? .transactionRequest ? .format,
                        E = _ || Q.tG,
                        F = E({ ...(0, Z.K)(eu, {
                                format: _
                            }),
                            accessList: v,
                            data: x,
                            from: ed.address,
                            gas: T,
                            gasPrice: en,
                            maxFeePerGas: eo,
                            maxPriorityFeePerGas: ea,
                            nonce: es,
                            to: el,
                            value: ec
                        });
                    return await a.request({
                        method: "eth_sendTransaction",
                        params: [F]
                    })
                } catch (a) {
                    throw function(a, {
                        docsPath: s,
                        ...p
                    }) {
                        let g = (() => {
                            let s = (0, z.k)(a, p);
                            return s instanceof F.cj ? a : s
                        })();
                        return new W.mk(g, {
                            docsPath: s,
                            ...p
                        })
                    }(a, { ...s,
                        account: ed,
                        chain: s.chain || void 0
                    })
                }
            }
            var en = p(39803);
            async function getAddresses(a) {
                if (a.account ? .type === "local") return [a.account.address];
                let s = await a.request({
                    method: "eth_accounts"
                });
                return s.map(a => (0, en.x)(a))
            }
            async function getPermissions(a) {
                let s = await a.request({
                    method: "wallet_getPermissions"
                });
                return s
            }
            async function requestAddresses(a) {
                let s = await a.request({
                    method: "eth_requestAccounts"
                });
                return s.map(a => (0, en.K)(a))
            }
            async function requestPermissions(a, s) {
                return a.request({
                    method: "wallet_requestPermissions",
                    params: [s]
                })
            }
            async function signMessage(a, {
                account: s = a.account,
                message: p
            }) {
                if (!s) throw new E.o({
                    docsPath: "/docs/actions/wallet/signMessage"
                });
                let g = (0, _.T)(s);
                if ("local" === g.type) return g.signMessage({
                    message: p
                });
                let m = "string" == typeof p ? (0, v.$G)(p) : p.raw instanceof Uint8Array ? (0, v.NC)(p.raw) : p.raw;
                return a.request({
                    method: "personal_sign",
                    params: [m, g.address]
                })
            }
            async function signTransaction(a, s) {
                let {
                    account: p = a.account,
                    chain: g = a.chain,
                    ...x
                } = s;
                if (!p) throw new E.o({
                    docsPath: "/docs/actions/wallet/signTransaction"
                });
                let T = (0, _.T)(p);
                (0, X.F)({
                    account: T,
                    ...s
                });
                let F = await (0, Y.s)(a, m.L, "getChainId")({});
                null !== g && assertCurrentChain({
                    currentChainId: F,
                    chain: g
                });
                let W = g ? .formatters || a.chain ? .formatters,
                    z = W ? .transactionRequest ? .format || Q.tG;
                return "local" === T.type ? T.signTransaction({ ...x,
                    chainId: F
                }, {
                    serializer: a.chain ? .serializers ? .transaction
                }) : await a.request({
                    method: "eth_signTransaction",
                    params: [{ ...z(x),
                        chainId: (0, v.eC)(F),
                        from: T.address
                    }]
                })
            }
            var eo = p(45008),
                ea = p(71891),
                es = p(29578);
            async function signTypedData(a, {
                account: s = a.account,
                domain: p,
                message: g,
                primaryType: m,
                types: v
            }) {
                if (!s) throw new E.o({
                    docsPath: "/docs/actions/wallet/signTypedData"
                });
                let x = (0, _.T)(s),
                    T = {
                        EIP712Domain: (0, es.cj)({
                            domain: p
                        }),
                        ...v
                    };
                if ((0, es.iC)({
                        domain: p,
                        message: g,
                        primaryType: m,
                        types: T
                    }), "local" === x.type) return x.signTypedData({
                    domain: p,
                    primaryType: m,
                    types: T,
                    message: g
                });
                let F = (0, ea.P)({
                    domain: p ? ? {},
                    primaryType: m,
                    types: T,
                    message: g
                }, (a, s) => (0, eo.v)(s) ? s.toLowerCase() : s);
                return a.request({
                    method: "eth_signTypedData_v4",
                    params: [x.address, F]
                })
            }
            async function switchChain(a, {
                id: s
            }) {
                await a.request({
                    method: "wallet_switchEthereumChain",
                    params: [{
                        chainId: (0, v.eC)(s)
                    }]
                })
            }
            async function watchAsset(a, s) {
                let p = await a.request({
                    method: "wallet_watchAsset",
                    params: s
                });
                return p
            }
            var el = p(53883);
            async function writeContract(a, {
                abi: s,
                address: p,
                args: g,
                dataSuffix: m,
                functionName: v,
                ...x
            }) {
                let _ = (0, el.R)({
                        abi: s,
                        args: g,
                        functionName: v
                    }),
                    E = await (0, Y.s)(a, sendTransaction, "sendTransaction")({
                        data: `${_}${m?m.replace("0x",""):""}`,
                        to: p,
                        ...x
                    });
                return E
            }

            function walletActions(a) {
                return {
                    addChain: s => addChain(a, s),
                    deployContract: s => (function(a, {
                        abi: s,
                        args: p,
                        bytecode: g,
                        ...m
                    }) {
                        let v = (0, x.w)({
                            abi: s,
                            args: p,
                            bytecode: g
                        });
                        return sendTransaction(a, { ...m,
                            data: v
                        })
                    })(a, s),
                    getAddresses: () => getAddresses(a),
                    getChainId: () => (0, m.L)(a),
                    getPermissions: () => getPermissions(a),
                    prepareTransactionRequest: s => (0, J.Z)(a, s),
                    requestAddresses: () => requestAddresses(a),
                    requestPermissions: s => requestPermissions(a, s),
                    sendRawTransaction: s => (0, ei.p)(a, s),
                    sendTransaction: s => sendTransaction(a, s),
                    signMessage: s => signMessage(a, s),
                    signTransaction: s => signTransaction(a, s),
                    signTypedData: s => signTypedData(a, s),
                    switchChain: s => switchChain(a, s),
                    watchAsset: s => watchAsset(a, s),
                    writeContract: s => writeContract(a, s)
                }
            }

            function createWalletClient(a) {
                let {
                    key: s = "wallet",
                    name: p = "Wallet Client",
                    transport: m
                } = a, v = (0, g.e)({ ...a,
                    key: s,
                    name: p,
                    transport: a => m({ ...a,
                        retryCount: 0
                    }),
                    type: "walletClient"
                });
                return v.extend(walletActions)
            }
        },
        68124: function(a, s, p) {
            "use strict";
            p.d(s, {
                q: function() {
                    return createTransport
                }
            });
            var g = p(35215);

            function createTransport({
                key: a,
                name: s,
                request: p,
                retryCount: m = 3,
                retryDelay: v = 150,
                timeout: x,
                type: _
            }, E) {
                return {
                    config: {
                        key: a,
                        name: s,
                        request: p,
                        retryCount: m,
                        retryDelay: v,
                        timeout: x,
                        type: _
                    },
                    request: (0, g.n)(p, {
                        retryCount: m,
                        retryDelay: v
                    }),
                    value: E
                }
            }
        },
        39730: function(a, s, p) {
            "use strict";
            p.d(s, {
                P: function() {
                    return custom
                }
            });
            var g = p(68124);

            function custom(a, s = {}) {
                let {
                    key: p = "custom",
                    name: m = "Custom Provider",
                    retryDelay: v
                } = s;
                return ({
                    retryCount: x
                }) => (0, g.q)({
                    key: p,
                    name: m,
                    request: a.request.bind(a),
                    retryCount: s.retryCount ? ? x,
                    retryDelay: v,
                    type: "custom"
                })
            }
        },
        42980: function(a, s, p) {
            "use strict";
            p.d(s, {
                $o: function() {
                    return T
                },
                F8: function() {
                    return g
                },
                X$: function() {
                    return E
                },
                du: function() {
                    return x
                },
                k3: function() {
                    return v
                },
                nZ: function() {
                    return _
                }
            });
            let g = [{
                    inputs: [{
                        components: [{
                            name: "target",
                            type: "address"
                        }, {
                            name: "allowFailure",
                            type: "bool"
                        }, {
                            name: "callData",
                            type: "bytes"
                        }],
                        name: "calls",
                        type: "tuple[]"
                    }],
                    name: "aggregate3",
                    outputs: [{
                        components: [{
                            name: "success",
                            type: "bool"
                        }, {
                            name: "returnData",
                            type: "bytes"
                        }],
                        name: "returnData",
                        type: "tuple[]"
                    }],
                    stateMutability: "view",
                    type: "function"
                }],
                m = [{
                    inputs: [],
                    name: "ResolverNotFound",
                    type: "error"
                }, {
                    inputs: [],
                    name: "ResolverWildcardNotSupported",
                    type: "error"
                }],
                v = [...m, {
                    name: "resolve",
                    type: "function",
                    stateMutability: "view",
                    inputs: [{
                        name: "name",
                        type: "bytes"
                    }, {
                        name: "data",
                        type: "bytes"
                    }],
                    outputs: [{
                        name: "",
                        type: "bytes"
                    }, {
                        name: "address",
                        type: "address"
                    }]
                }],
                x = [...m, {
                    name: "reverse",
                    type: "function",
                    stateMutability: "view",
                    inputs: [{
                        type: "bytes",
                        name: "reverseName"
                    }],
                    outputs: [{
                        type: "string",
                        name: "resolvedName"
                    }, {
                        type: "address",
                        name: "resolvedAddress"
                    }, {
                        type: "address",
                        name: "reverseResolver"
                    }, {
                        type: "address",
                        name: "resolver"
                    }]
                }],
                _ = [{
                    name: "text",
                    type: "function",
                    stateMutability: "view",
                    inputs: [{
                        name: "name",
                        type: "bytes32"
                    }, {
                        name: "key",
                        type: "string"
                    }],
                    outputs: [{
                        name: "",
                        type: "string"
                    }]
                }],
                E = [{
                    name: "addr",
                    type: "function",
                    stateMutability: "view",
                    inputs: [{
                        name: "name",
                        type: "bytes32"
                    }],
                    outputs: [{
                        name: "",
                        type: "address"
                    }]
                }, {
                    name: "addr",
                    type: "function",
                    stateMutability: "view",
                    inputs: [{
                        name: "name",
                        type: "bytes32"
                    }, {
                        name: "coinType",
                        type: "uint256"
                    }],
                    outputs: [{
                        name: "",
                        type: "bytes"
                    }]
                }],
                T = [{
                    inputs: [{
                        internalType: "address",
                        name: "_signer",
                        type: "address"
                    }, {
                        internalType: "bytes32",
                        name: "_hash",
                        type: "bytes32"
                    }, {
                        internalType: "bytes",
                        name: "_signature",
                        type: "bytes"
                    }],
                    stateMutability: "nonpayable",
                    type: "constructor"
                }]
        },
        28483: function(a, s, p) {
            "use strict";
            p.d(s, {
                $: function() {
                    return g
                },
                Up: function() {
                    return m
                },
                hZ: function() {
                    return v
                }
            });
            let g = {
                    1: "An `assert` condition failed.",
                    17: "Arithmic operation resulted in underflow or overflow.",
                    18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
                    33: "Attempted to convert to an invalid type.",
                    34: "Attempted to access a storage byte array that is incorrectly encoded.",
                    49: "Performed `.pop()` on an empty array",
                    50: "Array index is out of bounds.",
                    65: "Allocated too much memory or created an array which is too large.",
                    81: "Attempted to call a zero-initialized variable of internal function type."
                },
                m = {
                    inputs: [{
                        name: "message",
                        type: "string"
                    }],
                    name: "Error",
                    type: "error"
                },
                v = {
                    inputs: [{
                        name: "reason",
                        type: "uint256"
                    }],
                    name: "Panic",
                    type: "error"
                }
        },
        36238: function(a, s, p) {
            "use strict";
            p.d(s, {
                Bd: function() {
                    return v
                },
                Zn: function() {
                    return m
                },
                ez: function() {
                    return g
                }
            });
            let g = {
                    gwei: 9,
                    wei: 18
                },
                m = {
                    ether: -9,
                    wei: 9
                },
                v = {
                    ether: -18,
                    gwei: -9
                }
        },
        71878: function(a, s, p) {
            "use strict";
            p.d(s, {
                CI: function() {
                    return InvalidAbiDecodingTypeError
                },
                FM: function() {
                    return AbiEventSignatureEmptyTopicsError
                },
                Gy: function() {
                    return DecodeLogTopicsMismatch
                },
                KY: function() {
                    return BytesSizeMismatchError
                },
                M4: function() {
                    return AbiEncodingBytesSizeMismatchError
                },
                MX: function() {
                    return AbiFunctionOutputsNotFoundError
                },
                SM: function() {
                    return DecodeLogDataMismatch
                },
                cO: function() {
                    return AbiConstructorParamsNotFoundError
                },
                dh: function() {
                    return InvalidAbiEncodingTypeError
                },
                fM: function() {
                    return AbiConstructorNotFoundError
                },
                fs: function() {
                    return AbiEncodingLengthMismatchError
                },
                gr: function() {
                    return AbiEncodingArrayLengthMismatchError
                },
                hn: function() {
                    return InvalidArrayError
                },
                lC: function() {
                    return AbiEventSignatureNotFoundError
                },
                mv: function() {
                    return AbiEventNotFoundError
                },
                wM: function() {
                    return InvalidDefinitionTypeError
                },
                wb: function() {
                    return AbiDecodingZeroDataError
                },
                xB: function() {
                    return AbiDecodingDataSizeTooSmallError
                },
                xL: function() {
                    return AbiFunctionNotFoundError
                },
                yP: function() {
                    return AbiErrorSignatureNotFoundError
                }
            });
            var g = p(40928),
                m = p(39868),
                v = p(95950);
            let AbiConstructorNotFoundError = class AbiConstructorNotFoundError extends v.G {
                constructor({
                    docsPath: a
                }) {
                    super("A constructor was not found on the ABI.\nMake sure you are using the correct ABI and that the constructor exists on it.", {
                        docsPath: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiConstructorNotFoundError"
                    })
                }
            };
            let AbiConstructorParamsNotFoundError = class AbiConstructorParamsNotFoundError extends v.G {
                constructor({
                    docsPath: a
                }) {
                    super("Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.\nMake sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.", {
                        docsPath: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiConstructorParamsNotFoundError"
                    })
                }
            };
            let AbiDecodingDataSizeTooSmallError = class AbiDecodingDataSizeTooSmallError extends v.G {
                constructor({
                    data: a,
                    params: s,
                    size: p
                }) {
                    super(`Data size of ${p} bytes is too small for given parameters.`, {
                        metaMessages: [`Params: (${(0,g.h)(s,{includeName:!0})})`, `Data:   ${a} (${p} bytes)`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiDecodingDataSizeTooSmallError"
                    }), Object.defineProperty(this, "data", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "params", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "size", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.data = a, this.params = s, this.size = p
                }
            };
            let AbiDecodingZeroDataError = class AbiDecodingZeroDataError extends v.G {
                constructor() {
                    super('Cannot decode zero data ("0x") with ABI parameters.'), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiDecodingZeroDataError"
                    })
                }
            };
            let AbiEncodingArrayLengthMismatchError = class AbiEncodingArrayLengthMismatchError extends v.G {
                constructor({
                    expectedLength: a,
                    givenLength: s,
                    type: p
                }) {
                    super(`ABI encoding array length mismatch for type ${p}.
Expected length: ${a}
Given length: ${s}`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiEncodingArrayLengthMismatchError"
                    })
                }
            };
            let AbiEncodingBytesSizeMismatchError = class AbiEncodingBytesSizeMismatchError extends v.G {
                constructor({
                    expectedSize: a,
                    value: s
                }) {
                    super(`Size of bytes "${s}" (bytes${(0,m.d)(s)}) does not match expected size (bytes${a}).`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiEncodingBytesSizeMismatchError"
                    })
                }
            };
            let AbiEncodingLengthMismatchError = class AbiEncodingLengthMismatchError extends v.G {
                constructor({
                    expectedLength: a,
                    givenLength: s
                }) {
                    super(`ABI encoding params/values length mismatch.
Expected length (params): ${a}
Given length (values): ${s}`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiEncodingLengthMismatchError"
                    })
                }
            };
            let AbiErrorSignatureNotFoundError = class AbiErrorSignatureNotFoundError extends v.G {
                constructor(a, {
                    docsPath: s
                }) {
                    super(`Encoded error signature "${a}" not found on ABI.
Make sure you are using the correct ABI and that the error exists on it.
You can look up the decoded signature here: https://openchain.xyz/signatures?query=${a}.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiErrorSignatureNotFoundError"
                    }), Object.defineProperty(this, "signature", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.signature = a
                }
            };
            let AbiEventSignatureEmptyTopicsError = class AbiEventSignatureEmptyTopicsError extends v.G {
                constructor({
                    docsPath: a
                }) {
                    super("Cannot extract event signature from empty topics.", {
                        docsPath: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiEventSignatureEmptyTopicsError"
                    })
                }
            };
            let AbiEventSignatureNotFoundError = class AbiEventSignatureNotFoundError extends v.G {
                constructor(a, {
                    docsPath: s
                }) {
                    super(`Encoded event signature "${a}" not found on ABI.
Make sure you are using the correct ABI and that the event exists on it.
You can look up the signature here: https://openchain.xyz/signatures?query=${a}.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiEventSignatureNotFoundError"
                    })
                }
            };
            let AbiEventNotFoundError = class AbiEventNotFoundError extends v.G {
                constructor(a, {
                    docsPath: s
                } = {}) {
                    super(`Event ${a?`"${a}" `:""}not found on ABI.
Make sure you are using the correct ABI and that the event exists on it.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiEventNotFoundError"
                    })
                }
            };
            let AbiFunctionNotFoundError = class AbiFunctionNotFoundError extends v.G {
                constructor(a, {
                    docsPath: s
                } = {}) {
                    super(`Function ${a?`"${a}" `:""}not found on ABI.
Make sure you are using the correct ABI and that the function exists on it.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiFunctionNotFoundError"
                    })
                }
            };
            let AbiFunctionOutputsNotFoundError = class AbiFunctionOutputsNotFoundError extends v.G {
                constructor(a, {
                    docsPath: s
                }) {
                    super(`Function "${a}" does not contain any \`outputs\` on ABI.
Cannot decode function result without knowing what the parameter types are.
Make sure you are using the correct ABI and that the function exists on it.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AbiFunctionOutputsNotFoundError"
                    })
                }
            };
            let BytesSizeMismatchError = class BytesSizeMismatchError extends v.G {
                constructor({
                    expectedSize: a,
                    givenSize: s
                }) {
                    super(`Expected bytes${a}, got bytes${s}.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "BytesSizeMismatchError"
                    })
                }
            };
            let DecodeLogDataMismatch = class DecodeLogDataMismatch extends v.G {
                constructor({
                    abiItem: a,
                    data: s,
                    params: p,
                    size: m
                }) {
                    super(`Data size of ${m} bytes is too small for non-indexed event parameters.`, {
                        metaMessages: [`Params: (${(0,g.h)(p,{includeName:!0})})`, `Data:   ${s} (${m} bytes)`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "DecodeLogDataMismatch"
                    }), Object.defineProperty(this, "abiItem", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "data", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "params", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "size", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.abiItem = a, this.data = s, this.params = p, this.size = m
                }
            };
            let DecodeLogTopicsMismatch = class DecodeLogTopicsMismatch extends v.G {
                constructor({
                    abiItem: a,
                    param: s
                }) {
                    super(`Expected a topic for indexed event parameter${s.name?` "${s.name}"`:""} on event "${(0,g.t)(a,{includeName:!0})}".`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "DecodeLogTopicsMismatch"
                    }), Object.defineProperty(this, "abiItem", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.abiItem = a
                }
            };
            let InvalidAbiEncodingTypeError = class InvalidAbiEncodingTypeError extends v.G {
                constructor(a, {
                    docsPath: s
                }) {
                    super(`Type "${a}" is not a valid encoding type.
Please provide a valid ABI type.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidAbiEncodingType"
                    })
                }
            };
            let InvalidAbiDecodingTypeError = class InvalidAbiDecodingTypeError extends v.G {
                constructor(a, {
                    docsPath: s
                }) {
                    super(`Type "${a}" is not a valid decoding type.
Please provide a valid ABI type.`, {
                        docsPath: s
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidAbiDecodingType"
                    })
                }
            };
            let InvalidArrayError = class InvalidArrayError extends v.G {
                constructor(a) {
                    super(`Value "${a}" is not a valid array.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidArrayError"
                    })
                }
            };
            let InvalidDefinitionTypeError = class InvalidDefinitionTypeError extends v.G {
                constructor(a) {
                    super(`"${a}" is not a valid definition type.
Valid types: "function", "event", "error"`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidDefinitionTypeError"
                    })
                }
            }
        },
        67333: function(a, s, p) {
            "use strict";
            p.d(s, {
                o: function() {
                    return AccountNotFoundError
                }
            });
            var g = p(95950);
            let AccountNotFoundError = class AccountNotFoundError extends g.G {
                constructor({
                    docsPath: a
                } = {}) {
                    super("Could not find an Account to execute with this Action.\nPlease provide an Account with the `account` argument on the Action, or by supplying an `account` to the WalletClient.", {
                        docsPath: a,
                        docsSlug: "account"
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "AccountNotFoundError"
                    })
                }
            }
        },
        21485: function(a, s, p) {
            "use strict";
            p.d(s, {
                b: function() {
                    return InvalidAddressError
                }
            });
            var g = p(95950);
            let InvalidAddressError = class InvalidAddressError extends g.G {
                constructor({
                    address: a
                }) {
                    super(`Address "${a}" is invalid.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidAddressError"
                    })
                }
            }
        },
        95950: function(a, s, p) {
            "use strict";
            p.d(s, {
                G: function() {
                    return BaseError
                }
            });
            var g = p(66291);
            let BaseError = class BaseError extends Error {
                constructor(a, s = {}) {
                    super(), Object.defineProperty(this, "details", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "docsPath", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "metaMessages", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "shortMessage", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ViemError"
                    }), Object.defineProperty(this, "version", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: (0, g.bo)()
                    });
                    let p = s.cause instanceof BaseError ? s.cause.details : s.cause ? .message ? s.cause.message : s.details,
                        m = s.cause instanceof BaseError && s.cause.docsPath || s.docsPath;
                    this.message = [a || "An error occurred.", "", ...s.metaMessages ? [...s.metaMessages, ""] : [], ...m ? [`Docs: https://viem.sh${m}.html${s.docsSlug?`#${s.docsSlug}`:""}`] : [], ...p ? [`Details: ${p}`] : [], `Version: ${this.version}`].join("\n"), s.cause && (this.cause = s.cause), this.details = p, this.docsPath = m, this.metaMessages = s.metaMessages, this.shortMessage = a
                }
                walk(a) {
                    return function walk(a, s) {
                        return s ? .(a) ? a : a && "object" == typeof a && "cause" in a ? walk(a.cause, s) : s ? null : a
                    }(this, a)
                }
            }
        },
        27878: function(a, s, p) {
            "use strict";
            p.d(s, {
                Bk: function() {
                    return ChainNotFoundError
                },
                Yl: function() {
                    return ChainMismatchError
                },
                mm: function() {
                    return ChainDoesNotSupportContract
                },
                pZ: function() {
                    return ClientChainNotConfiguredError
                }
            });
            var g = p(95950);
            let ChainDoesNotSupportContract = class ChainDoesNotSupportContract extends g.G {
                constructor({
                    blockNumber: a,
                    chain: s,
                    contract: p
                }) {
                    super(`Chain "${s.name}" does not support contract "${p.name}".`, {
                        metaMessages: ["This could be due to any of the following:", ...a && p.blockCreated && p.blockCreated > a ? [`- The contract "${p.name}" was not deployed until block ${p.blockCreated} (current block ${a}).`] : [`- The chain does not have the contract "${p.name}" configured.`]]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ChainDoesNotSupportContract"
                    })
                }
            };
            let ChainMismatchError = class ChainMismatchError extends g.G {
                constructor({
                    chain: a,
                    currentChainId: s
                }) {
                    super(`The current chain of the wallet (id: ${s}) does not match the target chain for the transaction (id: ${a.id} – ${a.name}).`, {
                        metaMessages: [`Current Chain ID:  ${s}`, `Expected Chain ID: ${a.id} – ${a.name}`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ChainMismatchError"
                    })
                }
            };
            let ChainNotFoundError = class ChainNotFoundError extends g.G {
                constructor() {
                    super("No chain was provided to the request.\nPlease provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ChainNotFoundError"
                    })
                }
            };
            let ClientChainNotConfiguredError = class ClientChainNotConfiguredError extends g.G {
                constructor() {
                    super("No chain was provided to the Client."), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ClientChainNotConfiguredError"
                    })
                }
            }
        },
        98458: function(a, s, p) {
            "use strict";
            p.d(s, {
                cg: function() {
                    return CallExecutionError
                },
                uq: function() {
                    return ContractFunctionExecutionError
                },
                Lu: function() {
                    return ContractFunctionRevertedError
                },
                Dk: function() {
                    return ContractFunctionZeroDataError
                },
                VQ: function() {
                    return RawContractError
                }
            });
            var g = p(4832),
                m = p(28483),
                v = p(49039),
                x = p(40928),
                _ = p(71891);

            function formatAbiItemWithArgs({
                abiItem: a,
                args: s,
                includeFunctionName: p = !0,
                includeName: g = !1
            }) {
                if ("name" in a && "inputs" in a && a.inputs) return `${p?a.name:""}(${a.inputs.map((a,p)=>`${g&&a.name?`${a.name}: `:""}${"object"==typeof s[p]?(0,_.P)(s[p]):s[p]}`).join(", ")})`
            }
            var E = p(77804),
                T = p(79352),
                F = p(32421),
                W = p(71878),
                z = p(95950),
                Z = p(44818),
                Q = p(66291);
            let CallExecutionError = class CallExecutionError extends z.G {
                constructor(a, {
                    account: s,
                    docsPath: p,
                    chain: m,
                    data: v,
                    gas: x,
                    gasPrice: _,
                    maxFeePerGas: E,
                    maxPriorityFeePerGas: W,
                    nonce: z,
                    to: Q,
                    value: Y
                }) {
                    let X = s ? (0, g.T)(s) : void 0,
                        J = (0, Z.xr)({
                            from: X ? .address,
                            to: Q,
                            value: void 0 !== Y && `${(0,T.d)(Y)} ${m?.nativeCurrency?.symbol||"ETH"}`,
                            data: v,
                            gas: x,
                            gasPrice: void 0 !== _ && `${(0,F.o)(_)} gwei`,
                            maxFeePerGas: void 0 !== E && `${(0,F.o)(E)} gwei`,
                            maxPriorityFeePerGas: void 0 !== W && `${(0,F.o)(W)} gwei`,
                            nonce: z
                        });
                    super(a.shortMessage, {
                        cause: a,
                        docsPath: p,
                        metaMessages: [...a.metaMessages ? [...a.metaMessages, " "] : [], "Raw Call Arguments:", J].filter(Boolean)
                    }), Object.defineProperty(this, "cause", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "CallExecutionError"
                    }), this.cause = a
                }
            };
            let ContractFunctionExecutionError = class ContractFunctionExecutionError extends z.G {
                constructor(a, {
                    abi: s,
                    args: p,
                    contractAddress: g,
                    docsPath: m,
                    functionName: v,
                    sender: _
                }) {
                    let T = (0, E.m)({
                            abi: s,
                            args: p,
                            name: v
                        }),
                        F = T ? formatAbiItemWithArgs({
                            abiItem: T,
                            args: p,
                            includeFunctionName: !1,
                            includeName: !1
                        }) : void 0,
                        W = T ? (0, x.t)(T, {
                            includeName: !0
                        }) : void 0,
                        z = (0, Z.xr)({
                            address: g && (0, Q.CR)(g),
                            function: W,
                            args: F && "()" !== F && `${[...Array(v?.length??0).keys()].map(()=>" ").join("")}${F}`,
                            sender: _
                        });
                    super(a.shortMessage || `An unknown error occurred while executing the contract function "${v}".`, {
                        cause: a,
                        docsPath: m,
                        metaMessages: [...a.metaMessages ? [...a.metaMessages, " "] : [], "Contract Call:", z].filter(Boolean)
                    }), Object.defineProperty(this, "abi", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "args", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "cause", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "contractAddress", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "formattedArgs", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "functionName", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "sender", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ContractFunctionExecutionError"
                    }), this.abi = s, this.args = p, this.cause = a, this.contractAddress = g, this.functionName = v, this.sender = _
                }
            };
            let ContractFunctionRevertedError = class ContractFunctionRevertedError extends z.G {
                constructor({
                    abi: a,
                    data: s,
                    functionName: p,
                    message: g
                }) {
                    let _, E, T, F, z;
                    if (s && "0x" !== s) try {
                        z = (0, v.p)({
                            abi: a,
                            data: s
                        });
                        let {
                            abiItem: p,
                            errorName: g,
                            args: _
                        } = z;
                        if ("Error" === g) T = _[0];
                        else if ("Panic" === g) {
                            let [a] = _;
                            T = m.$[a]
                        } else {
                            let a = p ? (0, x.t)(p, {
                                    includeName: !0
                                }) : void 0,
                                s = p && _ ? formatAbiItemWithArgs({
                                    abiItem: p,
                                    args: _,
                                    includeFunctionName: !1,
                                    includeName: !1
                                }) : void 0;
                            E = [a ? `Error: ${a}` : "", s && "()" !== s ? `       ${[...Array(g?.length??0).keys()].map(()=>" ").join("")}${s}` : ""]
                        }
                    } catch (a) {
                        _ = a
                    } else g && (T = g);
                    _ instanceof W.yP && (F = _.signature, E = [`Unable to decode signature "${F}" as it was not found on the provided ABI.`, "Make sure you are using the correct ABI and that the error exists on it.", `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${F}.`]), super(T && "execution reverted" !== T || F ? [`The contract function "${p}" reverted with the following ${F?"signature":"reason"}:`, T || F].join("\n") : `The contract function "${p}" reverted.`, {
                        cause: _,
                        metaMessages: E
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ContractFunctionRevertedError"
                    }), Object.defineProperty(this, "data", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "reason", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "signature", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.data = z, this.reason = T, this.signature = F
                }
            };
            let ContractFunctionZeroDataError = class ContractFunctionZeroDataError extends z.G {
                constructor({
                    functionName: a
                }) {
                    super(`The contract function "${a}" returned no data ("0x").`, {
                        metaMessages: ["This could be due to any of the following:", `  - The contract does not have the function "${a}",`, "  - The parameters passed to the contract function may be invalid, or", "  - The address is not a contract."]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ContractFunctionZeroDataError"
                    })
                }
            };
            let RawContractError = class RawContractError extends z.G {
                constructor({
                    data: a,
                    message: s
                }) {
                    super(s || ""), Object.defineProperty(this, "code", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: 3
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "RawContractError"
                    }), Object.defineProperty(this, "data", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.data = a
                }
            }
        },
        741: function(a, s, p) {
            "use strict";
            p.d(s, {
                $: function() {
                    return SizeExceedsPaddingSizeError
                },
                m: function() {
                    return SliceOffsetOutOfBoundsError
                }
            });
            var g = p(95950);
            let SliceOffsetOutOfBoundsError = class SliceOffsetOutOfBoundsError extends g.G {
                constructor({
                    offset: a,
                    position: s,
                    size: p
                }) {
                    super(`Slice ${"start"===s?"starting":"ending"} at offset "${a}" is out-of-bounds (size: ${p}).`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "SliceOffsetOutOfBoundsError"
                    })
                }
            };
            let SizeExceedsPaddingSizeError = class SizeExceedsPaddingSizeError extends g.G {
                constructor({
                    size: a,
                    targetSize: s,
                    type: p
                }) {
                    super(`${p.charAt(0).toUpperCase()}${p.slice(1).toLowerCase()} size (${a}) exceeds padding size (${s}).`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "SizeExceedsPaddingSizeError"
                    })
                }
            }
        },
        86714: function(a, s, p) {
            "use strict";
            p.d(s, {
                Cd: function() {
                    return InvalidHexBooleanError
                },
                J5: function() {
                    return IntegerOutOfRangeError
                },
                M6: function() {
                    return SizeOverflowError
                }
            });
            var g = p(95950);
            let IntegerOutOfRangeError = class IntegerOutOfRangeError extends g.G {
                constructor({
                    max: a,
                    min: s,
                    signed: p,
                    size: g,
                    value: m
                }) {
                    super(`Number "${m}" is not in safe ${g?`${8*g}-bit ${p?"signed":"unsigned"} `:""}integer range ${a?`(${s} to ${a})`:`(above ${s})`}`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "IntegerOutOfRangeError"
                    })
                }
            };
            let InvalidHexBooleanError = class InvalidHexBooleanError extends g.G {
                constructor(a) {
                    super(`Hex value "${a}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidHexBooleanError"
                    })
                }
            };
            let SizeOverflowError = class SizeOverflowError extends g.G {
                constructor({
                    givenSize: a,
                    maxSize: s
                }) {
                    super(`Size cannot exceed ${s} bytes. Given size: ${a} bytes.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "SizeOverflowError"
                    })
                }
            }
        },
        84161: function(a, s, p) {
            "use strict";
            p.d(s, {
                Fz: function() {
                    return BaseFeeScalarError
                },
                e5: function() {
                    return Eip1559FeesNotSupportedError
                },
                ld: function() {
                    return MaxFeePerGasTooLowError
                }
            });
            var g = p(32421),
                m = p(95950);
            let BaseFeeScalarError = class BaseFeeScalarError extends m.G {
                constructor() {
                    super("`baseFeeMultiplier` must be greater than 1."), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "BaseFeeScalarError"
                    })
                }
            };
            let Eip1559FeesNotSupportedError = class Eip1559FeesNotSupportedError extends m.G {
                constructor() {
                    super("Chain does not support EIP-1559 fees."), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "Eip1559FeesNotSupportedError"
                    })
                }
            };
            let MaxFeePerGasTooLowError = class MaxFeePerGasTooLowError extends m.G {
                constructor({
                    maxPriorityFeePerGas: a
                }) {
                    super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${(0,g.o)(a)} gwei).`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "MaxFeePerGasTooLowError"
                    })
                }
            }
        },
        40009: function(a, s, p) {
            "use strict";
            p.d(s, {
                C_: function() {
                    return InsufficientFundsError
                },
                G$: function() {
                    return FeeCapTooLowError
                },
                Hh: function() {
                    return FeeCapTooHighError
                },
                M_: function() {
                    return ExecutionRevertedError
                },
                WF: function() {
                    return IntrinsicGasTooHighError
                },
                ZI: function() {
                    return NonceTooHighError
                },
                cj: function() {
                    return UnknownNodeError
                },
                cs: function() {
                    return TipAboveFeeCapError
                },
                dR: function() {
                    return IntrinsicGasTooLowError
                },
                pZ: function() {
                    return TransactionTypeNotSupportedError
                },
                se: function() {
                    return NonceMaxValueError
                },
                vU: function() {
                    return NonceTooLowError
                }
            });
            var g = p(32421),
                m = p(95950);
            let ExecutionRevertedError = class ExecutionRevertedError extends m.G {
                constructor({
                    cause: a,
                    message: s
                } = {}) {
                    let p = s ? .replace("execution reverted: ", "") ? .replace("execution reverted", "");
                    super(`Execution reverted ${p?`with reason: ${p}`:"for an unknown reason"}.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ExecutionRevertedError"
                    })
                }
            };
            Object.defineProperty(ExecutionRevertedError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 3
            }), Object.defineProperty(ExecutionRevertedError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /execution reverted/
            });
            let FeeCapTooHighError = class FeeCapTooHighError extends m.G {
                constructor({
                    cause: a,
                    maxFeePerGas: s
                } = {}) {
                    super(`The fee cap (\`maxFeePerGas\`${s?` = ${(0,g.o)(s)} gwei`:""}) cannot be higher than the maximum allowed value (2^256-1).`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "FeeCapTooHigh"
                    })
                }
            };
            Object.defineProperty(FeeCapTooHighError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
            });
            let FeeCapTooLowError = class FeeCapTooLowError extends m.G {
                constructor({
                    cause: a,
                    maxFeePerGas: s
                } = {}) {
                    super(`The fee cap (\`maxFeePerGas\`${s?` = ${(0,g.o)(s)}`:""} gwei) cannot be lower than the block base fee.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "FeeCapTooLow"
                    })
                }
            };
            Object.defineProperty(FeeCapTooLowError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
            });
            let NonceTooHighError = class NonceTooHighError extends m.G {
                constructor({
                    cause: a,
                    nonce: s
                } = {}) {
                    super(`Nonce provided for the transaction ${s?`(${s}) `:""}is higher than the next one expected.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "NonceTooHighError"
                    })
                }
            };
            Object.defineProperty(NonceTooHighError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /nonce too high/
            });
            let NonceTooLowError = class NonceTooLowError extends m.G {
                constructor({
                    cause: a,
                    nonce: s
                } = {}) {
                    super(`Nonce provided for the transaction ${s?`(${s}) `:""}is lower than the current nonce of the account.
Try increasing the nonce or find the latest nonce with \`getTransactionCount\`.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "NonceTooLowError"
                    })
                }
            };
            Object.defineProperty(NonceTooLowError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /nonce too low|transaction already imported|already known/
            });
            let NonceMaxValueError = class NonceMaxValueError extends m.G {
                constructor({
                    cause: a,
                    nonce: s
                } = {}) {
                    super(`Nonce provided for the transaction ${s?`(${s}) `:""}exceeds the maximum allowed nonce.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "NonceMaxValueError"
                    })
                }
            };
            Object.defineProperty(NonceMaxValueError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /nonce has max value/
            });
            let InsufficientFundsError = class InsufficientFundsError extends m.G {
                constructor({
                    cause: a
                } = {}) {
                    super("The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.", {
                        cause: a,
                        metaMessages: ["This error could arise when the account does not have enough funds to:", " - pay for the total gas fee,", " - pay for the value to send.", " ", "The cost of the transaction is calculated as `gas * gas fee + value`, where:", " - `gas` is the amount of gas needed for transaction to execute,", " - `gas fee` is the gas fee,", " - `value` is the amount of ether to send to the recipient."]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InsufficientFundsError"
                    })
                }
            };
            Object.defineProperty(InsufficientFundsError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /insufficient funds/
            });
            let IntrinsicGasTooHighError = class IntrinsicGasTooHighError extends m.G {
                constructor({
                    cause: a,
                    gas: s
                } = {}) {
                    super(`The amount of gas ${s?`(${s}) `:""}provided for the transaction exceeds the limit allowed for the block.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "IntrinsicGasTooHighError"
                    })
                }
            };
            Object.defineProperty(IntrinsicGasTooHighError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /intrinsic gas too high|gas limit reached/
            });
            let IntrinsicGasTooLowError = class IntrinsicGasTooLowError extends m.G {
                constructor({
                    cause: a,
                    gas: s
                } = {}) {
                    super(`The amount of gas ${s?`(${s}) `:""}provided for the transaction is too low.`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "IntrinsicGasTooLowError"
                    })
                }
            };
            Object.defineProperty(IntrinsicGasTooLowError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /intrinsic gas too low/
            });
            let TransactionTypeNotSupportedError = class TransactionTypeNotSupportedError extends m.G {
                constructor({
                    cause: a
                }) {
                    super("The transaction type is not supported for this chain.", {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TransactionTypeNotSupportedError"
                    })
                }
            };
            Object.defineProperty(TransactionTypeNotSupportedError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /transaction type not valid/
            });
            let TipAboveFeeCapError = class TipAboveFeeCapError extends m.G {
                constructor({
                    cause: a,
                    maxPriorityFeePerGas: s,
                    maxFeePerGas: p
                } = {}) {
                    super(`The provided tip (\`maxPriorityFeePerGas\`${s?` = ${(0,g.o)(s)} gwei`:""}) cannot be higher than the fee cap (\`maxFeePerGas\`${p?` = ${(0,g.o)(p)} gwei`:""}).`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TipAboveFeeCapError"
                    })
                }
            };
            Object.defineProperty(TipAboveFeeCapError, "nodeMessage", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
            });
            let UnknownNodeError = class UnknownNodeError extends m.G {
                constructor({
                    cause: a
                }) {
                    super(`An error occurred while executing: ${a?.shortMessage}`, {
                        cause: a
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "UnknownNodeError"
                    })
                }
            }
        },
        20722: function(a, s, p) {
            "use strict";
            p.d(s, {
                Gg: function() {
                    return HttpRequestError
                },
                W5: function() {
                    return TimeoutError
                },
                bs: function() {
                    return RpcRequestError
                },
                c9: function() {
                    return WebSocketRequestError
                }
            });
            var g = p(71891),
                m = p(95950),
                v = p(66291);
            let HttpRequestError = class HttpRequestError extends m.G {
                constructor({
                    body: a,
                    details: s,
                    headers: p,
                    status: m,
                    url: x
                }) {
                    super("HTTP request failed.", {
                        details: s,
                        metaMessages: [m && `Status: ${m}`, `URL: ${(0,v.Gr)(x)}`, a && `Request body: ${(0,g.P)(a)}`].filter(Boolean)
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "HttpRequestError"
                    }), Object.defineProperty(this, "body", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "headers", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "status", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "url", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.body = a, this.headers = p, this.status = m, this.url = x
                }
            };
            let WebSocketRequestError = class WebSocketRequestError extends m.G {
                constructor({
                    body: a,
                    details: s,
                    url: p
                }) {
                    super("WebSocket request failed.", {
                        details: s,
                        metaMessages: [`URL: ${(0,v.Gr)(p)}`, `Request body: ${(0,g.P)(a)}`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "WebSocketRequestError"
                    })
                }
            };
            let RpcRequestError = class RpcRequestError extends m.G {
                constructor({
                    body: a,
                    error: s,
                    url: p
                }) {
                    super("RPC Request failed.", {
                        cause: s,
                        details: s.message,
                        metaMessages: [`URL: ${(0,v.Gr)(p)}`, `Request body: ${(0,g.P)(a)}`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "RpcRequestError"
                    }), Object.defineProperty(this, "code", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.code = s.code
                }
            };
            let TimeoutError = class TimeoutError extends m.G {
                constructor({
                    body: a,
                    url: s
                }) {
                    super("The request took too long to respond.", {
                        details: "The request timed out.",
                        metaMessages: [`URL: ${(0,v.Gr)(s)}`, `Request body: ${(0,g.P)(a)}`]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TimeoutError"
                    })
                }
            }
        },
        48519: function(a, s, p) {
            "use strict";
            p.d(s, {
                B: function() {
                    return InvalidRequestRpcError
                },
                GD: function() {
                    return JsonRpcVersionUnsupportedError
                },
                I0: function() {
                    return ChainDisconnectedError
                },
                KB: function() {
                    return TransactionRejectedRpcError
                },
                LX: function() {
                    return MethodNotFoundRpcError
                },
                Og: function() {
                    return ResourceNotFoundRpcError
                },
                PE: function() {
                    return UnauthorizedProviderError
                },
                Pv: function() {
                    return LimitExceededRpcError
                },
                Ts: function() {
                    return UnsupportedProviderMethodError
                },
                XS: function() {
                    return InternalRpcError
                },
                ab: function() {
                    return UserRejectedRequestError
                },
                gS: function() {
                    return MethodNotSupportedRpcError
                },
                ir: function() {
                    return UnknownRpcError
                },
                nY: function() {
                    return InvalidParamsRpcError
                },
                pT: function() {
                    return ResourceUnavailableRpcError
                },
                s7: function() {
                    return ParseRpcError
                },
                u5: function() {
                    return ProviderDisconnectedError
                },
                x3: function() {
                    return SwitchChainError
                },
                yR: function() {
                    return InvalidInputRpcError
                }
            });
            var g = p(95950),
                m = p(20722);
            let RpcError = class RpcError extends g.G {
                constructor(a, {
                    code: s,
                    docsPath: p,
                    metaMessages: g,
                    shortMessage: v
                }) {
                    super(v, {
                        cause: a,
                        docsPath: p,
                        metaMessages: g || a ? .metaMessages
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "RpcError"
                    }), Object.defineProperty(this, "code", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.name = a.name, this.code = a instanceof m.bs ? a.code : s ? ? -1
                }
            };
            let ProviderRpcError = class ProviderRpcError extends RpcError {
                constructor(a, s) {
                    super(a, s), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ProviderRpcError"
                    }), Object.defineProperty(this, "data", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), this.data = s.data
                }
            };
            let ParseRpcError = class ParseRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: ParseRpcError.code,
                        shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ParseRpcError"
                    })
                }
            };
            Object.defineProperty(ParseRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32700
            });
            let InvalidRequestRpcError = class InvalidRequestRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: InvalidRequestRpcError.code,
                        shortMessage: "JSON is not a valid request object."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidRequestRpcError"
                    })
                }
            };
            Object.defineProperty(InvalidRequestRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32600
            });
            let MethodNotFoundRpcError = class MethodNotFoundRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: MethodNotFoundRpcError.code,
                        shortMessage: "The method does not exist / is not available."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "MethodNotFoundRpcError"
                    })
                }
            };
            Object.defineProperty(MethodNotFoundRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32601
            });
            let InvalidParamsRpcError = class InvalidParamsRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: InvalidParamsRpcError.code,
                        shortMessage: "Invalid parameters were provided to the RPC method.\nDouble check you have provided the correct parameters."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidParamsRpcError"
                    })
                }
            };
            Object.defineProperty(InvalidParamsRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32602
            });
            let InternalRpcError = class InternalRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: InternalRpcError.code,
                        shortMessage: "An internal error was received."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InternalRpcError"
                    })
                }
            };
            Object.defineProperty(InternalRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32603
            });
            let InvalidInputRpcError = class InvalidInputRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: InvalidInputRpcError.code,
                        shortMessage: "Missing or invalid parameters.\nDouble check you have provided the correct parameters."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidInputRpcError"
                    })
                }
            };
            Object.defineProperty(InvalidInputRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32e3
            });
            let ResourceNotFoundRpcError = class ResourceNotFoundRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: ResourceNotFoundRpcError.code,
                        shortMessage: "Requested resource not found."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ResourceNotFoundRpcError"
                    })
                }
            };
            Object.defineProperty(ResourceNotFoundRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32001
            });
            let ResourceUnavailableRpcError = class ResourceUnavailableRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: ResourceUnavailableRpcError.code,
                        shortMessage: "Requested resource not available."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ResourceUnavailableRpcError"
                    })
                }
            };
            Object.defineProperty(ResourceUnavailableRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32002
            });
            let TransactionRejectedRpcError = class TransactionRejectedRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: TransactionRejectedRpcError.code,
                        shortMessage: "Transaction creation failed."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TransactionRejectedRpcError"
                    })
                }
            };
            Object.defineProperty(TransactionRejectedRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32003
            });
            let MethodNotSupportedRpcError = class MethodNotSupportedRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: MethodNotSupportedRpcError.code,
                        shortMessage: "Method is not implemented."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "MethodNotSupportedRpcError"
                    })
                }
            };
            Object.defineProperty(MethodNotSupportedRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32004
            });
            let LimitExceededRpcError = class LimitExceededRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: LimitExceededRpcError.code,
                        shortMessage: "Request exceeds defined limit."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "LimitExceededRpcError"
                    })
                }
            };
            Object.defineProperty(LimitExceededRpcError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32005
            });
            let JsonRpcVersionUnsupportedError = class JsonRpcVersionUnsupportedError extends RpcError {
                constructor(a) {
                    super(a, {
                        code: JsonRpcVersionUnsupportedError.code,
                        shortMessage: "Version of JSON-RPC protocol is not supported."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "JsonRpcVersionUnsupportedError"
                    })
                }
            };
            Object.defineProperty(JsonRpcVersionUnsupportedError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: -32006
            });
            let UserRejectedRequestError = class UserRejectedRequestError extends ProviderRpcError {
                constructor(a) {
                    super(a, {
                        code: UserRejectedRequestError.code,
                        shortMessage: "User rejected the request."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "UserRejectedRequestError"
                    })
                }
            };
            Object.defineProperty(UserRejectedRequestError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 4001
            });
            let UnauthorizedProviderError = class UnauthorizedProviderError extends ProviderRpcError {
                constructor(a) {
                    super(a, {
                        code: UnauthorizedProviderError.code,
                        shortMessage: "The requested method and/or account has not been authorized by the user."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "UnauthorizedProviderError"
                    })
                }
            };
            Object.defineProperty(UnauthorizedProviderError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 4100
            });
            let UnsupportedProviderMethodError = class UnsupportedProviderMethodError extends ProviderRpcError {
                constructor(a) {
                    super(a, {
                        code: UnsupportedProviderMethodError.code,
                        shortMessage: "The Provider does not support the requested method."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "UnsupportedProviderMethodError"
                    })
                }
            };
            Object.defineProperty(UnsupportedProviderMethodError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 4200
            });
            let ProviderDisconnectedError = class ProviderDisconnectedError extends ProviderRpcError {
                constructor(a) {
                    super(a, {
                        code: ProviderDisconnectedError.code,
                        shortMessage: "The Provider is disconnected from all chains."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ProviderDisconnectedError"
                    })
                }
            };
            Object.defineProperty(ProviderDisconnectedError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 4900
            });
            let ChainDisconnectedError = class ChainDisconnectedError extends ProviderRpcError {
                constructor(a) {
                    super(a, {
                        code: ChainDisconnectedError.code,
                        shortMessage: "The Provider is not connected to the requested chain."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "ChainDisconnectedError"
                    })
                }
            };
            Object.defineProperty(ChainDisconnectedError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 4901
            });
            let SwitchChainError = class SwitchChainError extends ProviderRpcError {
                constructor(a) {
                    super(a, {
                        code: SwitchChainError.code,
                        shortMessage: "An error occurred when attempting to switch chain."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "SwitchChainError"
                    })
                }
            };
            Object.defineProperty(SwitchChainError, "code", {
                enumerable: !0,
                configurable: !0,
                writable: !0,
                value: 4902
            });
            let UnknownRpcError = class UnknownRpcError extends RpcError {
                constructor(a) {
                    super(a, {
                        shortMessage: "An unknown RPC error occurred."
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "UnknownRpcError"
                    })
                }
            }
        },
        44818: function(a, s, p) {
            "use strict";
            p.d(s, {
                Bh: function() {
                    return TransactionNotFoundError
                },
                Yb: function() {
                    return TransactionReceiptNotFoundError
                },
                j3: function() {
                    return InvalidSerializableTransactionError
                },
                mc: function() {
                    return WaitForTransactionReceiptTimeoutError
                },
                mk: function() {
                    return TransactionExecutionError
                },
                xY: function() {
                    return FeeConflictError
                },
                xr: function() {
                    return prettyPrint
                }
            });
            var g = p(79352),
                m = p(32421),
                v = p(95950);

            function prettyPrint(a) {
                let s = Object.entries(a).map(([a, s]) => void 0 === s || !1 === s ? null : [a, s]).filter(Boolean),
                    p = s.reduce((a, [s]) => Math.max(a, s.length), 0);
                return s.map(([a, s]) => `  ${`${a}:`.padEnd(p+1)}  ${s}`).join("\n")
            }
            let FeeConflictError = class FeeConflictError extends v.G {
                constructor() {
                    super("Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.\nUse `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "FeeConflictError"
                    })
                }
            };
            let InvalidSerializableTransactionError = class InvalidSerializableTransactionError extends v.G {
                constructor({
                    transaction: a
                }) {
                    super("Cannot infer a transaction type from provided transaction.", {
                        metaMessages: ["Provided Transaction:", "{", prettyPrint(a), "}", "", "To infer the type, either provide:", "- a `type` to the Transaction, or", "- an EIP-1559 Transaction with `maxFeePerGas`, or", "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or", "- a Legacy Transaction with `gasPrice`"]
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "InvalidSerializableTransactionError"
                    })
                }
            };
            let TransactionExecutionError = class TransactionExecutionError extends v.G {
                constructor(a, {
                    account: s,
                    docsPath: p,
                    chain: v,
                    data: x,
                    gas: _,
                    gasPrice: E,
                    maxFeePerGas: T,
                    maxPriorityFeePerGas: F,
                    nonce: W,
                    to: z,
                    value: Z
                }) {
                    let Q = prettyPrint({
                        chain: v && `${v?.name} (id: ${v?.id})`,
                        from: s ? .address,
                        to: z,
                        value: void 0 !== Z && `${(0,g.d)(Z)} ${v?.nativeCurrency?.symbol||"ETH"}`,
                        data: x,
                        gas: _,
                        gasPrice: void 0 !== E && `${(0,m.o)(E)} gwei`,
                        maxFeePerGas: void 0 !== T && `${(0,m.o)(T)} gwei`,
                        maxPriorityFeePerGas: void 0 !== F && `${(0,m.o)(F)} gwei`,
                        nonce: W
                    });
                    super(a.shortMessage, {
                        cause: a,
                        docsPath: p,
                        metaMessages: [...a.metaMessages ? [...a.metaMessages, " "] : [], "Request Arguments:", Q].filter(Boolean)
                    }), Object.defineProperty(this, "cause", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: void 0
                    }), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TransactionExecutionError"
                    }), this.cause = a
                }
            };
            let TransactionNotFoundError = class TransactionNotFoundError extends v.G {
                constructor({
                    blockHash: a,
                    blockNumber: s,
                    blockTag: p,
                    hash: g,
                    index: m
                }) {
                    let v = "Transaction";
                    p && void 0 !== m && (v = `Transaction at block time "${p}" at index "${m}"`), a && void 0 !== m && (v = `Transaction at block hash "${a}" at index "${m}"`), s && void 0 !== m && (v = `Transaction at block number "${s}" at index "${m}"`), g && (v = `Transaction with hash "${g}"`), super(`${v} could not be found.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TransactionNotFoundError"
                    })
                }
            };
            let TransactionReceiptNotFoundError = class TransactionReceiptNotFoundError extends v.G {
                constructor({
                    hash: a
                }) {
                    super(`Transaction receipt with hash "${a}" could not be found. The Transaction may not be processed on a block yet.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "TransactionReceiptNotFoundError"
                    })
                }
            };
            let WaitForTransactionReceiptTimeoutError = class WaitForTransactionReceiptTimeoutError extends v.G {
                constructor({
                    hash: a
                }) {
                    super(`Timed out while waiting for transaction with hash "${a}" to be confirmed.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "WaitForTransactionReceiptTimeoutError"
                    })
                }
            }
        },
        66291: function(a, s, p) {
            "use strict";
            p.d(s, {
                CR: function() {
                    return getContractAddress
                },
                Gr: function() {
                    return getUrl
                },
                bo: function() {
                    return getVersion
                }
            });
            let getContractAddress = a => a,
                getUrl = a => a,
                getVersion = () => "viem@1.19.6"
        },
        87425: function(a, s, p) {
            "use strict";
            p.d(s, {
                r: function() {
                    return decodeAbiParameters
                }
            });
            var g = p(71878),
                m = p(39803),
                v = p(39868),
                x = p(72619),
                _ = p(94973),
                E = p(30838),
                T = p(98967);

            function decodeAbiParameters(a, s) {
                if ("0x" === s && a.length > 0) throw new g.wb;
                if ((0, v.d)(s) && 32 > (0, v.d)(s)) throw new g.xB({
                    data: s,
                    params: a,
                    size: (0, v.d)(s)
                });
                return function({
                    data: a,
                    params: s
                }) {
                    let p = [],
                        F = 0;
                    for (let W = 0; W < s.length; W++) {
                        if (F >= (0, v.d)(a)) throw new g.xB({
                            data: a,
                            params: s,
                            size: (0, v.d)(a)
                        });
                        let z = s[W],
                            {
                                consumed: Z,
                                value: Q
                            } = function decodeParam({
                                data: a,
                                param: s,
                                position: p
                            }) {
                                let v = (0, T.S)(s.type);
                                if (v) {
                                    let [g, m] = v;
                                    return function(a, {
                                        param: s,
                                        length: p,
                                        position: g
                                    }) {
                                        if (!p) {
                                            let p = (0, E.ly)((0, x.tP)(a, g, g + 32, {
                                                    strict: !0
                                                })),
                                                m = (0, E.ly)((0, x.tP)(a, p, p + 32, {
                                                    strict: !0
                                                })),
                                                v = 0,
                                                _ = [];
                                            for (let g = 0; g < m; ++g) {
                                                let g = decodeParam({
                                                    data: (0, x.tP)(a, p + 32),
                                                    param: s,
                                                    position: v
                                                });
                                                v += g.consumed, _.push(g.value)
                                            }
                                            return {
                                                value: _,
                                                consumed: 32
                                            }
                                        }
                                        if (hasDynamicChild(s)) {
                                            let m = (0, T.S)(s.type),
                                                v = !m ? .[0],
                                                _ = 0,
                                                F = [];
                                            for (let m = 0; m < p; ++m) {
                                                let p = (0, E.ly)((0, x.tP)(a, g, g + 32, {
                                                        strict: !0
                                                    })),
                                                    T = decodeParam({
                                                        data: (0, x.tP)(a, p),
                                                        param: s,
                                                        position: v ? _ : 32 * m
                                                    });
                                                _ += T.consumed, F.push(T.value)
                                            }
                                            return {
                                                value: F,
                                                consumed: 32
                                            }
                                        }
                                        let m = 0,
                                            v = [];
                                        for (let x = 0; x < p; ++x) {
                                            let p = decodeParam({
                                                data: a,
                                                param: s,
                                                position: g + m
                                            });
                                            m += p.consumed, v.push(p.value)
                                        }
                                        return {
                                            value: v,
                                            consumed: m
                                        }
                                    }(a, {
                                        length: g,
                                        param: { ...s,
                                            type: m
                                        },
                                        position: p
                                    })
                                }
                                if ("tuple" === s.type) return function(a, {
                                    param: s,
                                    position: p
                                }) {
                                    let g = 0 === s.components.length || s.components.some(({
                                            name: a
                                        }) => !a),
                                        m = g ? [] : {},
                                        v = 0;
                                    if (hasDynamicChild(s)) {
                                        let _ = (0, E.ly)((0, x.tP)(a, p, p + 32, {
                                            strict: !0
                                        }));
                                        for (let p = 0; p < s.components.length; ++p) {
                                            let E = s.components[p],
                                                T = decodeParam({
                                                    data: (0, x.tP)(a, _),
                                                    param: E,
                                                    position: v
                                                });
                                            v += T.consumed, m[g ? p : E ? .name] = T.value
                                        }
                                        return {
                                            consumed: 32,
                                            value: m
                                        }
                                    }
                                    for (let x = 0; x < s.components.length; ++x) {
                                        let _ = s.components[x],
                                            E = decodeParam({
                                                data: a,
                                                param: _,
                                                position: p + v
                                            });
                                        v += E.consumed, m[g ? x : _ ? .name] = E.value
                                    }
                                    return {
                                        consumed: v,
                                        value: m
                                    }
                                }(a, {
                                    param: s,
                                    position: p
                                });
                                if ("string" === s.type) return function(a, {
                                    position: s
                                }) {
                                    let p = (0, E.ly)((0, x.tP)(a, s, s + 32, {
                                            strict: !0
                                        })),
                                        g = (0, E.ly)((0, x.tP)(a, p, p + 32, {
                                            strict: !0
                                        }));
                                    if (0 === g) return {
                                        consumed: 32,
                                        value: ""
                                    };
                                    let m = (0, E.rR)((0, _.f)((0, x.tP)(a, p + 32, p + 32 + g, {
                                        strict: !0
                                    })));
                                    return {
                                        consumed: 32,
                                        value: m
                                    }
                                }(a, {
                                    position: p
                                });
                                if (s.type.startsWith("bytes")) return function(a, {
                                    param: s,
                                    position: p
                                }) {
                                    let [g, m] = s.type.split("bytes");
                                    if (!m) {
                                        let s = (0, E.ly)((0, x.tP)(a, p, p + 32, {
                                                strict: !0
                                            })),
                                            g = (0, E.ly)((0, x.tP)(a, s, s + 32, {
                                                strict: !0
                                            }));
                                        if (0 === g) return {
                                            consumed: 32,
                                            value: "0x"
                                        };
                                        let m = (0, x.tP)(a, s + 32, s + 32 + g, {
                                            strict: !0
                                        });
                                        return {
                                            consumed: 32,
                                            value: m
                                        }
                                    }
                                    let v = (0, x.tP)(a, p, p + parseInt(m), {
                                        strict: !0
                                    });
                                    return {
                                        consumed: 32,
                                        value: v
                                    }
                                }(a, {
                                    param: s,
                                    position: p
                                });
                                let F = (0, x.tP)(a, p, p + 32, {
                                    strict: !0
                                });
                                if (s.type.startsWith("uint") || s.type.startsWith("int")) return function(a, {
                                    param: s
                                }) {
                                    let p = s.type.startsWith("int"),
                                        g = parseInt(s.type.split("int")[1] || "256");
                                    return {
                                        consumed: 32,
                                        value: g > 48 ? (0, E.y_)(a, {
                                            signed: p
                                        }) : (0, E.ly)(a, {
                                            signed: p
                                        })
                                    }
                                }(F, {
                                    param: s
                                });
                                if ("address" === s.type) return {
                                    consumed: 32,
                                    value: (0, m.x)((0, x.tP)(F, -20))
                                };
                                if ("bool" === s.type) return {
                                    consumed: 32,
                                    value: (0, E.XA)(F)
                                };
                                throw new g.CI(s.type, {
                                    docsPath: "/docs/contract/decodeAbiParameters"
                                })
                            }({
                                data: a,
                                param: z,
                                position: F
                            });
                        p.push(Q), F += Z
                    }
                    return p
                }({
                    data: s,
                    params: a
                })
            }

            function hasDynamicChild(a) {
                let {
                    type: s
                } = a;
                if ("string" === s || "bytes" === s || s.endsWith("[]")) return !0;
                if ("tuple" === s) return a.components ? .some(hasDynamicChild);
                let p = (0, T.S)(a.type);
                return !!(p && hasDynamicChild({ ...a,
                    type: p[1]
                }))
            }
        },
        49039: function(a, s, p) {
            "use strict";
            p.d(s, {
                p: function() {
                    return decodeErrorResult
                }
            });
            var g = p(28483),
                m = p(71878),
                v = p(72619),
                x = p(33655),
                _ = p(87425),
                E = p(40928);

            function decodeErrorResult({
                abi: a,
                data: s
            }) {
                let p = (0, v.tP)(s, 0, 4);
                if ("0x" === p) throw new m.wb;
                let T = [...a || [], g.Up, g.hZ],
                    F = T.find(a => "error" === a.type && p === (0, x.o)((0, E.t)(a)));
                if (!F) throw new m.yP(p, {
                    docsPath: "/docs/contract/decodeErrorResult"
                });
                return {
                    abiItem: F,
                    args: "inputs" in F && F.inputs && F.inputs.length > 0 ? (0, _.r)(F.inputs, (0, v.tP)(s, 4)) : void 0,
                    errorName: F.name
                }
            }
        },
        3458: function(a, s, p) {
            "use strict";
            p.d(s, {
                k: function() {
                    return decodeFunctionResult
                }
            });
            var g = p(71878),
                m = p(87425),
                v = p(77804);
            let x = "/docs/contract/decodeFunctionResult";

            function decodeFunctionResult({
                abi: a,
                args: s,
                functionName: p,
                data: _
            }) {
                let E = a[0];
                if (p && !(E = (0, v.m)({
                        abi: a,
                        args: s,
                        name: p
                    }))) throw new g.xL(p, {
                    docsPath: x
                });
                if ("function" !== E.type) throw new g.xL(void 0, {
                    docsPath: x
                });
                if (!E.outputs) throw new g.MX(E.name, {
                    docsPath: x
                });
                let T = (0, m.r)(E.outputs, _);
                return T && T.length > 1 ? T : T && 1 === T.length ? T[0] : void 0
            }
        },
        98967: function(a, s, p) {
            "use strict";
            p.d(s, {
                E: function() {
                    return encodeAbiParameters
                },
                S: function() {
                    return getArrayComponents
                }
            });
            var g = p(71878),
                m = p(21485),
                v = p(87364),
                x = p(69809),
                _ = p(99725),
                E = p(39868),
                T = p(72619),
                F = p(21693);

            function encodeAbiParameters(a, s) {
                if (a.length !== s.length) throw new g.fs({
                    expectedLength: a.length,
                    givenLength: s.length
                });
                let p = function({
                        params: a,
                        values: s
                    }) {
                        let p = [];
                        for (let W = 0; W < a.length; W++) p.push(function prepareParam({
                            param: a,
                            value: s
                        }) {
                            let p = getArrayComponents(a.type);
                            if (p) {
                                let [m, v] = p;
                                return function(a, {
                                    length: s,
                                    param: p
                                }) {
                                    let m = null === s;
                                    if (!Array.isArray(a)) throw new g.hn(a);
                                    if (!m && a.length !== s) throw new g.gr({
                                        expectedLength: s,
                                        givenLength: a.length,
                                        type: `${p.type}[${s}]`
                                    });
                                    let v = !1,
                                        _ = [];
                                    for (let s = 0; s < a.length; s++) {
                                        let g = prepareParam({
                                            param: p,
                                            value: a[s]
                                        });
                                        g.dynamic && (v = !0), _.push(g)
                                    }
                                    if (m || v) {
                                        let a = encodeParams(_);
                                        if (m) {
                                            let s = (0, F.eC)(_.length, {
                                                size: 32
                                            });
                                            return {
                                                dynamic: !0,
                                                encoded: _.length > 0 ? (0, x.zo)([s, a]) : s
                                            }
                                        }
                                        if (v) return {
                                            dynamic: !0,
                                            encoded: a
                                        }
                                    }
                                    return {
                                        dynamic: !1,
                                        encoded: (0, x.zo)(_.map(({
                                            encoded: a
                                        }) => a))
                                    }
                                }(s, {
                                    length: m,
                                    param: { ...a,
                                        type: v
                                    }
                                })
                            }
                            if ("tuple" === a.type) return function(a, {
                                param: s
                            }) {
                                let p = !1,
                                    g = [];
                                for (let m = 0; m < s.components.length; m++) {
                                    let v = s.components[m],
                                        x = Array.isArray(a) ? m : v.name,
                                        _ = prepareParam({
                                            param: v,
                                            value: a[x]
                                        });
                                    g.push(_), _.dynamic && (p = !0)
                                }
                                return {
                                    dynamic: p,
                                    encoded: p ? encodeParams(g) : (0, x.zo)(g.map(({
                                        encoded: a
                                    }) => a))
                                }
                            }(s, {
                                param: a
                            });
                            if ("address" === a.type) return function(a) {
                                if (!(0, v.U)(a)) throw new m.b({
                                    address: a
                                });
                                return {
                                    dynamic: !1,
                                    encoded: (0, _.gc)(a.toLowerCase())
                                }
                            }(s);
                            if ("bool" === a.type) return {
                                dynamic: !1,
                                encoded: (0, _.gc)((0, F.C4)(s))
                            };
                            if (a.type.startsWith("uint") || a.type.startsWith("int")) {
                                let p = a.type.startsWith("int");
                                return function(a, {
                                    signed: s
                                }) {
                                    return {
                                        dynamic: !1,
                                        encoded: (0, F.eC)(a, {
                                            size: 32,
                                            signed: s
                                        })
                                    }
                                }(s, {
                                    signed: p
                                })
                            }
                            if (a.type.startsWith("bytes")) return function(a, {
                                param: s
                            }) {
                                let [, p] = s.type.split("bytes"), m = (0, E.d)(a);
                                if (!p) {
                                    let s = a;
                                    return m % 32 != 0 && (s = (0, _.gc)(s, {
                                        dir: "right",
                                        size: 32 * Math.ceil((a.length - 2) / 2 / 32)
                                    })), {
                                        dynamic: !0,
                                        encoded: (0, x.zo)([(0, _.gc)((0, F.eC)(m, {
                                            size: 32
                                        })), s])
                                    }
                                }
                                if (m !== parseInt(p)) throw new g.M4({
                                    expectedSize: parseInt(p),
                                    value: a
                                });
                                return {
                                    dynamic: !1,
                                    encoded: (0, _.gc)(a, {
                                        dir: "right"
                                    })
                                }
                            }(s, {
                                param: a
                            });
                            if ("string" === a.type) return function(a) {
                                let s = (0, F.$G)(a),
                                    p = Math.ceil((0, E.d)(s) / 32),
                                    g = [];
                                for (let a = 0; a < p; a++) g.push((0, _.gc)((0, T.tP)(s, 32 * a, (a + 1) * 32), {
                                    dir: "right"
                                }));
                                return {
                                    dynamic: !0,
                                    encoded: (0, x.zo)([(0, _.gc)((0, F.eC)((0, E.d)(s), {
                                        size: 32
                                    })), ...g])
                                }
                            }(s);
                            throw new g.dh(a.type, {
                                docsPath: "/docs/contract/encodeAbiParameters"
                            })
                        }({
                            param: a[W],
                            value: s[W]
                        }));
                        return p
                    }({
                        params: a,
                        values: s
                    }),
                    W = encodeParams(p);
                return 0 === W.length ? "0x" : W
            }

            function encodeParams(a) {
                let s = 0;
                for (let p = 0; p < a.length; p++) {
                    let {
                        dynamic: g,
                        encoded: m
                    } = a[p];
                    g ? s += 32 : s += (0, E.d)(m)
                }
                let p = [],
                    g = [],
                    m = 0;
                for (let v = 0; v < a.length; v++) {
                    let {
                        dynamic: x,
                        encoded: _
                    } = a[v];
                    x ? (p.push((0, F.eC)(s + m, {
                        size: 32
                    })), g.push(_), m += (0, E.d)(_)) : p.push(_)
                }
                return (0, x.zo)([...p, ...g])
            }

            function getArrayComponents(a) {
                let s = a.match(/^(.*)\[(\d+)?\]$/);
                return s ? [s[2] ? Number(s[2]) : null, s[1]] : void 0
            }
        },
        12732: function(a, s, p) {
            "use strict";
            p.d(s, {
                w: function() {
                    return encodeDeployData
                }
            });
            var g = p(71878),
                m = p(69809),
                v = p(98967);
            let x = "/docs/contract/encodeDeployData";

            function encodeDeployData({
                abi: a,
                args: s,
                bytecode: p
            }) {
                if (!s || 0 === s.length) return p;
                let _ = a.find(a => "type" in a && "constructor" === a.type);
                if (!_) throw new g.fM({
                    docsPath: x
                });
                if (!("inputs" in _) || !_.inputs || 0 === _.inputs.length) throw new g.cO({
                    docsPath: x
                });
                let E = (0, v.E)(_.inputs, s);
                return (0, m.SM)([p, E])
            }
        },
        53883: function(a, s, p) {
            "use strict";
            p.d(s, {
                R: function() {
                    return encodeFunctionData
                }
            });
            var g = p(71878),
                m = p(69809),
                v = p(33655),
                x = p(98967),
                _ = p(40928),
                E = p(77804);

            function encodeFunctionData({
                abi: a,
                args: s,
                functionName: p
            }) {
                let T = a[0];
                if (p && !(T = (0, E.m)({
                        abi: a,
                        args: s,
                        name: p
                    }))) throw new g.xL(p, {
                    docsPath: "/docs/contract/encodeFunctionData"
                });
                if ("function" !== T.type) throw new g.xL(void 0, {
                    docsPath: "/docs/contract/encodeFunctionData"
                });
                let F = (0, _.t)(T),
                    W = (0, v.o)(F),
                    z = "inputs" in T && T.inputs ? (0, x.E)(T.inputs, s ? ? []) : void 0;
                return (0, m.SM)([W, z ? ? "0x"])
            }
        },
        40928: function(a, s, p) {
            "use strict";
            p.d(s, {
                h: function() {
                    return formatAbiParams
                },
                t: function() {
                    return formatAbiItem
                }
            });
            var g = p(71878);

            function formatAbiItem(a, {
                includeName: s = !1
            } = {}) {
                if ("function" !== a.type && "event" !== a.type && "error" !== a.type) throw new g.wM(a.type);
                return `${a.name}(${formatAbiParams(a.inputs,{includeName:s})})`
            }

            function formatAbiParams(a, {
                includeName: s = !1
            } = {}) {
                return a ? a.map(a => (function(a, {
                    includeName: s
                }) {
                    return a.type.startsWith("tuple") ? `(${formatAbiParams(a.components,{includeName:s})})${a.type.slice(5)}` : a.type + (s && a.name ? ` ${a.name}` : "")
                })(a, {
                    includeName: s
                })).join(s ? ", " : ",") : ""
            }
        },
        77804: function(a, s, p) {
            "use strict";
            p.d(s, {
                m: function() {
                    return getAbiItem
                }
            });
            var g = p(45008),
                m = p(77688),
                v = p(33655),
                x = p(87364);

            function getAbiItem({
                abi: a,
                args: s = [],
                name: p
            }) {
                let _ = (0, g.v)(p, {
                        strict: !1
                    }),
                    E = a.filter(a => _ ? "function" === a.type ? (0, v.o)(a) === p : "event" === a.type && (0, m.e)(a) === p : "name" in a && a.name === p);
                if (0 !== E.length) {
                    if (1 === E.length) return E[0];
                    for (let a of E) {
                        if (!("inputs" in a)) continue;
                        if (!s || 0 === s.length) {
                            if (!a.inputs || 0 === a.inputs.length) return a;
                            continue
                        }
                        if (!a.inputs || 0 === a.inputs.length || a.inputs.length !== s.length) continue;
                        let p = s.every((s, p) => {
                            let g = "inputs" in a && a.inputs[p];
                            return !!g && function isArgOfType(a, s) {
                                let p = typeof a,
                                    g = s.type;
                                switch (g) {
                                    case "address":
                                        return (0, x.U)(a);
                                    case "bool":
                                        return "boolean" === p;
                                    case "function":
                                    case "string":
                                        return "string" === p;
                                    default:
                                        if ("tuple" === g && "components" in s) return Object.values(s.components).every((s, p) => isArgOfType(Object.values(a)[p], s));
                                        if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(g)) return "number" === p || "bigint" === p;
                                        if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(g)) return "string" === p || a instanceof Uint8Array;
                                        if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(g)) return Array.isArray(a) && a.every(a => isArgOfType(a, { ...s,
                                            type: g.replace(/(\[[0-9]{0,}\])$/, "")
                                        }));
                                        return !1
                                }
                            }(s, g)
                        });
                        if (p) return a
                    }
                    return E[0]
                }
            }
        },
        39803: function(a, s, p) {
            "use strict";
            p.d(s, {
                K: function() {
                    return getAddress
                },
                x: function() {
                    return checksumAddress
                }
            });
            var g = p(21485),
                m = p(56728),
                v = p(55852),
                x = p(87364);

            function checksumAddress(a, s) {
                let p = s ? `${s}${a.toLowerCase()}` : a.substring(2).toLowerCase(),
                    g = (0, v.w)((0, m.qX)(p), "bytes"),
                    x = (s ? p.substring(`${s}0x`.length) : p).split("");
                for (let a = 0; a < 40; a += 2) g[a >> 1] >> 4 >= 8 && x[a] && (x[a] = x[a].toUpperCase()), (15 & g[a >> 1]) >= 8 && x[a + 1] && (x[a + 1] = x[a + 1].toUpperCase());
                return `0x${x.join("")}`
            }

            function getAddress(a, s) {
                if (!(0, x.U)(a)) throw new g.b({
                    address: a
                });
                return checksumAddress(a, s)
            }
        },
        87364: function(a, s, p) {
            "use strict";
            p.d(s, {
                U: function() {
                    return isAddress
                }
            });
            let g = /^0x[a-fA-F0-9]{40}$/;

            function isAddress(a) {
                return g.test(a)
            }
        },
        35215: function(a, s, p) {
            "use strict";
            p.d(s, {
                n: function() {
                    return buildRequest
                },
                y: function() {
                    return isDeterministicError
                }
            });
            var g = p(95950),
                m = p(20722),
                v = p(48519),
                x = p(36063);
            let isDeterministicError = a => "code" in a ? -1 !== a.code && -32004 !== a.code && -32005 !== a.code && -32042 !== a.code && -32603 !== a.code : a instanceof m.Gg && !!a.status && 403 !== a.status && 408 !== a.status && 413 !== a.status && 429 !== a.status && 500 !== a.status && 502 !== a.status && 503 !== a.status && 504 !== a.status;

            function buildRequest(a, {
                retryDelay: s = 150,
                retryCount: p = 3
            } = {}) {
                return async _ => (0, x.J)(async () => {
                    try {
                        return await a(_)
                    } catch (a) {
                        switch (a.code) {
                            case v.s7.code:
                                throw new v.s7(a);
                            case v.B.code:
                                throw new v.B(a);
                            case v.LX.code:
                                throw new v.LX(a);
                            case v.nY.code:
                                throw new v.nY(a);
                            case v.XS.code:
                                throw new v.XS(a);
                            case v.yR.code:
                                throw new v.yR(a);
                            case v.Og.code:
                                throw new v.Og(a);
                            case v.pT.code:
                                throw new v.pT(a);
                            case v.KB.code:
                                throw new v.KB(a);
                            case v.gS.code:
                                throw new v.gS(a);
                            case v.Pv.code:
                                throw new v.Pv(a);
                            case v.GD.code:
                                throw new v.GD(a);
                            case v.ab.code:
                                throw new v.ab(a);
                            case v.PE.code:
                                throw new v.PE(a);
                            case v.Ts.code:
                                throw new v.Ts(a);
                            case v.u5.code:
                                throw new v.u5(a);
                            case v.I0.code:
                                throw new v.I0(a);
                            case v.x3.code:
                                throw new v.x3(a);
                            case 5e3:
                                throw new v.ab(a);
                            default:
                                if (a instanceof g.G) throw a;
                                throw new v.ir(a)
                        }
                    }
                }, {
                    delay: ({
                        count: a,
                        error: p
                    }) => {
                        if (p && p instanceof m.Gg) {
                            let a = p ? .headers ? .get("Retry-After");
                            if (a ? .match(/\d/)) return 1e3 * parseInt(a)
                        }
                        return ~~(1 << a) * s
                    },
                    retryCount: p,
                    shouldRetry: ({
                        error: a
                    }) => !isDeterministicError(a)
                })
            }
        },
        71186: function(a, s, p) {
            "use strict";

            function defineChain(a, s = {}) {
                let {
                    fees: p = a.fees,
                    formatters: g = a.formatters,
                    serializers: m = a.serializers
                } = s;
                return { ...a,
                    fees: p,
                    formatters: g,
                    serializers: m
                }
            }
            p.d(s, {
                a: function() {
                    return defineChain
                }
            })
        },
        94540: function(a, s, p) {
            "use strict";
            p.d(s, {
                L: function() {
                    return getChainContractAddress
                }
            });
            var g = p(27878);

            function getChainContractAddress({
                blockNumber: a,
                chain: s,
                contract: p
            }) {
                let m = s ? .contracts ? .[p];
                if (!m) throw new g.mm({
                    chain: s,
                    contract: {
                        name: p
                    }
                });
                if (a && m.blockCreated && m.blockCreated > a) throw new g.mm({
                    blockNumber: a,
                    chain: s,
                    contract: {
                        name: p,
                        blockCreated: m.blockCreated
                    }
                });
                return m.address
            }
        },
        69809: function(a, s, p) {
            "use strict";

            function concat(a) {
                return "string" == typeof a[0] ? concatHex(a) : function(a) {
                    let s = 0;
                    for (let p of a) s += p.length;
                    let p = new Uint8Array(s),
                        g = 0;
                    for (let s of a) p.set(s, g), g += s.length;
                    return p
                }(a)
            }

            function concatHex(a) {
                return `0x${a.reduce((a,s)=>a+s.replace("0x",""),"")}`
            }
            p.d(s, {
                SM: function() {
                    return concatHex
                },
                zo: function() {
                    return concat
                }
            })
        },
        45008: function(a, s, p) {
            "use strict";

            function isHex(a, {
                strict: s = !0
            } = {}) {
                return !!a && "string" == typeof a && (s ? /^0x[0-9a-fA-F]*$/.test(a) : a.startsWith("0x"))
            }
            p.d(s, {
                v: function() {
                    return isHex
                }
            })
        },
        99725: function(a, s, p) {
            "use strict";
            p.d(s, {
                gc: function() {
                    return padHex
                },
                vk: function() {
                    return pad
                }
            });
            var g = p(741);

            function pad(a, {
                dir: s,
                size: p = 32
            } = {}) {
                return "string" == typeof a ? padHex(a, {
                    dir: s,
                    size: p
                }) : function(a, {
                    dir: s,
                    size: p = 32
                } = {}) {
                    if (null === p) return a;
                    if (a.length > p) throw new g.$({
                        size: a.length,
                        targetSize: p,
                        type: "bytes"
                    });
                    let m = new Uint8Array(p);
                    for (let g = 0; g < p; g++) {
                        let v = "right" === s;
                        m[v ? g : p - g - 1] = a[v ? g : a.length - g - 1]
                    }
                    return m
                }(a, {
                    dir: s,
                    size: p
                })
            }

            function padHex(a, {
                dir: s,
                size: p = 32
            } = {}) {
                if (null === p) return a;
                let m = a.replace("0x", "");
                if (m.length > 2 * p) throw new g.$({
                    size: Math.ceil(m.length / 2),
                    targetSize: p,
                    type: "hex"
                });
                return `0x${m["right"===s?"padEnd":"padStart"](2*p,"0")}`
            }
        },
        39868: function(a, s, p) {
            "use strict";
            p.d(s, {
                d: function() {
                    return size
                }
            });
            var g = p(45008);

            function size(a) {
                return (0, g.v)(a, {
                    strict: !1
                }) ? Math.ceil((a.length - 2) / 2) : a.length
            }
        },
        72619: function(a, s, p) {
            "use strict";
            p.d(s, {
                tP: function() {
                    return slice
                }
            });
            var g = p(741),
                m = p(45008),
                v = p(39868);

            function slice(a, s, p, {
                strict: g
            } = {}) {
                return (0, m.v)(a, {
                    strict: !1
                }) ? function(a, s, p, {
                    strict: g
                } = {}) {
                    assertStartOffset(a, s);
                    let m = `0x${a.replace("0x","").slice((s??0)*2,(p??a.length)*2)}`;
                    return g && assertEndOffset(m, s, p), m
                }(a, s, p, {
                    strict: g
                }) : function(a, s, p, {
                    strict: g
                } = {}) {
                    assertStartOffset(a, s);
                    let m = a.slice(s, p);
                    return g && assertEndOffset(m, s, p), m
                }(a, s, p, {
                    strict: g
                })
            }

            function assertStartOffset(a, s) {
                if ("number" == typeof s && s > 0 && s > (0, v.d)(a) - 1) throw new g.m({
                    offset: s,
                    position: "start",
                    size: (0, v.d)(a)
                })
            }

            function assertEndOffset(a, s, p) {
                if ("number" == typeof s && "number" == typeof p && (0, v.d)(a) !== p - s) throw new g.m({
                    offset: p,
                    position: "end",
                    size: (0, v.d)(a)
                })
            }
        },
        94973: function(a, s, p) {
            "use strict";

            function trim(a, {
                dir: s = "left"
            } = {}) {
                let p = "string" == typeof a ? a.replace("0x", "") : a,
                    g = 0;
                for (let a = 0; a < p.length - 1 && "0" === p["left" === s ? a : p.length - a - 1].toString(); a++) g++;
                return (p = "left" === s ? p.slice(g) : p.slice(0, p.length - g), "string" == typeof a) ? (1 === p.length && "right" === s && (p = `${p}0`), `0x${p.length%2==1?`0${p}`:p}`) : p
            }
            p.d(s, {
                f: function() {
                    return trim
                }
            })
        },
        30838: function(a, s, p) {
            "use strict";
            p.d(s, {
                XA: function() {
                    return hexToBool
                },
                Yf: function() {
                    return assertSize
                },
                ly: function() {
                    return hexToNumber
                },
                rR: function() {
                    return hexToString
                },
                y_: function() {
                    return hexToBigInt
                }
            });
            var g = p(86714),
                m = p(39868),
                v = p(94973),
                x = p(56728);

            function assertSize(a, {
                size: s
            }) {
                if ((0, m.d)(a) > s) throw new g.M6({
                    givenSize: (0, m.d)(a),
                    maxSize: s
                })
            }

            function hexToBigInt(a, s = {}) {
                let {
                    signed: p
                } = s;
                s.size && assertSize(a, {
                    size: s.size
                });
                let g = BigInt(a);
                if (!p) return g;
                let m = (a.length - 2) / 2,
                    v = (1 n << 8 n * BigInt(m) - 1 n) - 1 n;
                return g <= v ? g : g - BigInt(`0x${"f".padStart(2*m,"f")}`) - 1 n
            }

            function hexToBool(a, s = {}) {
                let p = a;
                if (s.size && (assertSize(p, {
                        size: s.size
                    }), p = (0, v.f)(p)), "0x00" === (0, v.f)(p)) return !1;
                if ("0x01" === (0, v.f)(p)) return !0;
                throw new g.Cd(p)
            }

            function hexToNumber(a, s = {}) {
                return Number(hexToBigInt(a, s))
            }

            function hexToString(a, s = {}) {
                let p = (0, x.nr)(a);
                return s.size && (assertSize(p, {
                    size: s.size
                }), p = (0, v.f)(p, {
                    dir: "right"
                })), new TextDecoder().decode(p)
            }
        },
        56728: function(a, s, p) {
            "use strict";
            p.d(s, {
                O0: function() {
                    return toBytes
                },
                nr: function() {
                    return hexToBytes
                },
                qX: function() {
                    return stringToBytes
                }
            });
            var g = p(95950),
                m = p(45008),
                v = p(99725),
                x = p(30838),
                _ = p(21693);
            let E = new TextEncoder;

            function toBytes(a, s = {}) {
                return "number" == typeof a || "bigint" == typeof a ? function(a, s) {
                    let p = (0, _.eC)(a, s);
                    return hexToBytes(p)
                }(a, s) : "boolean" == typeof a ? function(a, s = {}) {
                    let p = new Uint8Array(1);
                    return (p[0] = Number(a), "number" == typeof s.size) ? ((0, x.Yf)(p, {
                        size: s.size
                    }), (0, v.vk)(p, {
                        size: s.size
                    })) : p
                }(a, s) : (0, m.v)(a) ? hexToBytes(a, s) : stringToBytes(a, s)
            }
            let T = {
                zero: 48,
                nine: 57,
                A: 65,
                F: 70,
                a: 97,
                f: 102
            };

            function charCodeToBase16(a) {
                return a >= T.zero && a <= T.nine ? a - T.zero : a >= T.A && a <= T.F ? a - (T.A - 10) : a >= T.a && a <= T.f ? a - (T.a - 10) : void 0
            }

            function hexToBytes(a, s = {}) {
                let p = a;
                s.size && ((0, x.Yf)(p, {
                    size: s.size
                }), p = (0, v.vk)(p, {
                    dir: "right",
                    size: s.size
                }));
                let m = p.slice(2);
                m.length % 2 && (m = `0${m}`);
                let _ = m.length / 2,
                    E = new Uint8Array(_);
                for (let a = 0, s = 0; a < _; a++) {
                    let p = charCodeToBase16(m.charCodeAt(s++)),
                        v = charCodeToBase16(m.charCodeAt(s++));
                    if (void 0 === p || void 0 === v) throw new g.G(`Invalid byte sequence ("${m[s-2]}${m[s-1]}" in "${m}").`);
                    E[a] = 16 * p + v
                }
                return E
            }

            function stringToBytes(a, s = {}) {
                let p = E.encode(a);
                return "number" == typeof s.size ? ((0, x.Yf)(p, {
                    size: s.size
                }), (0, v.vk)(p, {
                    dir: "right",
                    size: s.size
                })) : p
            }
        },
        21693: function(a, s, p) {
            "use strict";
            p.d(s, {
                $G: function() {
                    return stringToHex
                },
                C4: function() {
                    return boolToHex
                },
                NC: function() {
                    return toHex
                },
                ci: function() {
                    return bytesToHex
                },
                eC: function() {
                    return numberToHex
                }
            });
            var g = p(86714),
                m = p(99725),
                v = p(30838);
            let x = Array.from({
                length: 256
            }, (a, s) => s.toString(16).padStart(2, "0"));

            function toHex(a, s = {}) {
                return "number" == typeof a || "bigint" == typeof a ? numberToHex(a, s) : "string" == typeof a ? stringToHex(a, s) : "boolean" == typeof a ? boolToHex(a, s) : bytesToHex(a, s)
            }

            function boolToHex(a, s = {}) {
                let p = `0x${Number(a)}`;
                return "number" == typeof s.size ? ((0, v.Yf)(p, {
                    size: s.size
                }), (0, m.vk)(p, {
                    size: s.size
                })) : p
            }

            function bytesToHex(a, s = {}) {
                let p = "";
                for (let s = 0; s < a.length; s++) p += x[a[s]];
                let g = `0x${p}`;
                return "number" == typeof s.size ? ((0, v.Yf)(g, {
                    size: s.size
                }), (0, m.vk)(g, {
                    dir: "right",
                    size: s.size
                })) : g
            }

            function numberToHex(a, s = {}) {
                let p;
                let {
                    signed: v,
                    size: x
                } = s, _ = BigInt(a);
                x ? p = v ? (1 n << 8 n * BigInt(x) - 1 n) - 1 n : 2 n ** (8 n * BigInt(x)) - 1 n : "number" == typeof a && (p = BigInt(Number.MAX_SAFE_INTEGER));
                let E = "bigint" == typeof p && v ? -p - 1 n : 0;
                if (p && _ > p || _ < E) {
                    let s = "bigint" == typeof a ? "n" : "";
                    throw new g.J5({
                        max: p ? `${p}${s}` : void 0,
                        min: `${E}${s}`,
                        signed: v,
                        size: x,
                        value: `${a}${s}`
                    })
                }
                let T = `0x${(v&&_<0?(1n<<BigInt(8*x))+BigInt(_):_).toString(16)}`;
                return x ? (0, m.vk)(T, {
                    size: x
                }) : T
            }
            let _ = new TextEncoder;

            function stringToHex(a, s = {}) {
                let p = _.encode(a);
                return bytesToHex(p, s)
            }
        },
        36074: function(a, s, p) {
            "use strict";
            p.d(s, {
                k: function() {
                    return getNodeError
                }
            });
            var g = p(95950),
                m = p(40009);

            function getNodeError(a, s) {
                let p = (a.details || "").toLowerCase(),
                    v = a.walk(a => a.code === m.M_.code);
                if (v instanceof g.G) return new m.M_({
                    cause: a,
                    message: v.details
                });
                if (m.M_.nodeMessage.test(p)) return new m.M_({
                    cause: a,
                    message: a.details
                });
                if (m.Hh.nodeMessage.test(p)) return new m.Hh({
                    cause: a,
                    maxFeePerGas: s ? .maxFeePerGas
                });
                if (m.G$.nodeMessage.test(p)) return new m.G$({
                    cause: a,
                    maxFeePerGas: s ? .maxFeePerGas
                });
                if (m.ZI.nodeMessage.test(p)) return new m.ZI({
                    cause: a,
                    nonce: s ? .nonce
                });
                if (m.vU.nodeMessage.test(p)) return new m.vU({
                    cause: a,
                    nonce: s ? .nonce
                });
                if (m.se.nodeMessage.test(p)) return new m.se({
                    cause: a,
                    nonce: s ? .nonce
                });
                else if (m.C_.nodeMessage.test(p)) return new m.C_({
                    cause: a
                });
                else if (m.WF.nodeMessage.test(p)) return new m.WF({
                    cause: a,
                    gas: s ? .gas
                });
                else if (m.dR.nodeMessage.test(p)) return new m.dR({
                    cause: a,
                    gas: s ? .gas
                });
                else if (m.pZ.nodeMessage.test(p)) return new m.pZ({
                    cause: a
                });
                else if (m.cs.nodeMessage.test(p)) return new m.cs({
                    cause: a,
                    maxFeePerGas: s ? .maxFeePerGas,
                    maxPriorityFeePerGas: s ? .maxPriorityFeePerGas
                });
                return new m.cj({
                    cause: a
                })
            }
        },
        78723: function(a, s, p) {
            "use strict";
            p.d(s, {
                Z: function() {
                    return formatBlock
                }
            });
            var g = p(52017);

            function formatBlock(a) {
                let s = a.transactions ? .map(a => "string" == typeof a ? a : g.Tr(a));
                return { ...a,
                    baseFeePerGas: a.baseFeePerGas ? BigInt(a.baseFeePerGas) : null,
                    difficulty: a.difficulty ? BigInt(a.difficulty) : void 0,
                    gasLimit: a.gasLimit ? BigInt(a.gasLimit) : void 0,
                    gasUsed: a.gasUsed ? BigInt(a.gasUsed) : void 0,
                    hash: a.hash ? a.hash : null,
                    logsBloom: a.logsBloom ? a.logsBloom : null,
                    nonce: a.nonce ? a.nonce : null,
                    number: a.number ? BigInt(a.number) : null,
                    size: a.size ? BigInt(a.size) : void 0,
                    timestamp: a.timestamp ? BigInt(a.timestamp) : void 0,
                    transactions: s,
                    totalDifficulty: a.totalDifficulty ? BigInt(a.totalDifficulty) : null
                }
            }
        },
        21028: function(a, s, p) {
            "use strict";

            function extract(a, {
                format: s
            }) {
                if (!s) return {};
                let p = {},
                    g = s(a || {});
                return ! function extract_(s) {
                    let g = Object.keys(s);
                    for (let m of g) m in a && (p[m] = a[m]), s[m] && "object" == typeof s[m] && !Array.isArray(s[m]) && extract_(s[m])
                }(g), p
            }
            p.d(s, {
                K: function() {
                    return extract
                }
            })
        },
        52017: function(a, s, p) {
            "use strict";
            p.d(s, {
                Tr: function() {
                    return formatTransaction
                },
                c8: function() {
                    return m
                }
            });
            var g = p(30838);
            let m = {
                "0x0": "legacy",
                "0x1": "eip2930",
                "0x2": "eip1559"
            };

            function formatTransaction(a) {
                let s = { ...a,
                    blockHash: a.blockHash ? a.blockHash : null,
                    blockNumber: a.blockNumber ? BigInt(a.blockNumber) : null,
                    chainId: a.chainId ? (0, g.ly)(a.chainId) : void 0,
                    gas: a.gas ? BigInt(a.gas) : void 0,
                    gasPrice: a.gasPrice ? BigInt(a.gasPrice) : void 0,
                    maxFeePerGas: a.maxFeePerGas ? BigInt(a.maxFeePerGas) : void 0,
                    maxPriorityFeePerGas: a.maxPriorityFeePerGas ? BigInt(a.maxPriorityFeePerGas) : void 0,
                    nonce: a.nonce ? (0, g.ly)(a.nonce) : void 0,
                    to: a.to ? a.to : null,
                    transactionIndex: a.transactionIndex ? Number(a.transactionIndex) : null,
                    type: a.type ? m[a.type] : void 0,
                    typeHex: a.type ? a.type : void 0,
                    value: a.value ? BigInt(a.value) : void 0,
                    v: a.v ? BigInt(a.v) : void 0
                };
                return s.yParity = (() => {
                    if (a.yParity) return Number(a.yParity);
                    if ("bigint" == typeof s.v) {
                        if (0 n === s.v || 27 n === s.v) return 0;
                        if (1 n === s.v || 28 n === s.v) return 1;
                        if (s.v >= 35 n) return s.v % 2 n === 0 n ? 1 : 0
                    }
                })(), "legacy" === s.type && (delete s.accessList, delete s.maxFeePerGas, delete s.maxPriorityFeePerGas, delete s.yParity), "eip2930" === s.type && (delete s.maxFeePerGas, delete s.maxPriorityFeePerGas), s
            }
        },
        86868: function(a, s, p) {
            "use strict";
            p.d(s, {
                tG: function() {
                    return formatTransactionRequest
                }
            });
            var g = p(21693);
            let m = {
                legacy: "0x0",
                eip2930: "0x1",
                eip1559: "0x2"
            };

            function formatTransactionRequest(a) {
                return { ...a,
                    gas: void 0 !== a.gas ? (0, g.eC)(a.gas) : void 0,
                    gasPrice: void 0 !== a.gasPrice ? (0, g.eC)(a.gasPrice) : void 0,
                    maxFeePerGas: void 0 !== a.maxFeePerGas ? (0, g.eC)(a.maxFeePerGas) : void 0,
                    maxPriorityFeePerGas: void 0 !== a.maxPriorityFeePerGas ? (0, g.eC)(a.maxPriorityFeePerGas) : void 0,
                    nonce: void 0 !== a.nonce ? (0, g.eC)(a.nonce) : void 0,
                    type: void 0 !== a.type ? m[a.type] : void 0,
                    value: void 0 !== a.value ? (0, g.eC)(a.value) : void 0
                }
            }
        },
        82600: function(a, s, p) {
            "use strict";

            function getAction(a, s, p) {
                return g => a[s.name || p] ? .(g) ? ? s(a, g)
            }
            p.d(s, {
                s: function() {
                    return getAction
                }
            })
        },
        77688: function(a, s, p) {
            "use strict";
            p.d(s, {
                e: function() {
                    return getEventSelector
                }
            });
            var g = p(56728),
                m = p(40901);
            let getEventSignature = a => (0, m.r)(a);
            var v = p(55852);
            let hash = a => (0, v.w)((0, g.O0)(a)),
                getEventSelector = a => hash(getEventSignature(a))
        },
        33655: function(a, s, p) {
            "use strict";
            p.d(s, {
                o: function() {
                    return getFunctionSelector
                }
            });
            var g = p(72619),
                m = p(56728),
                v = p(40901),
                x = p(55852);
            let hash = a => (0, x.w)((0, m.O0)(a)),
                getFunctionSelector = a => (0, g.tP)(hash((0, v.r)(a)), 0, 4)
        },
        40901: function(a, s, p) {
            "use strict";
            p.d(s, {
                r: function() {
                    return getFunctionSignature
                }
            });
            let g = /^tuple(?<array>(\[(\d*)\])*)$/;

            function formatAbiParameters(a) {
                let s = "",
                    p = a.length;
                for (let m = 0; m < p; m++) {
                    let v = a[m];
                    s += function formatAbiParameter(a) {
                        let s = a.type;
                        if (g.test(a.type) && "components" in a) {
                            s = "(";
                            let p = a.components.length;
                            for (let g = 0; g < p; g++) {
                                let m = a.components[g];
                                s += formatAbiParameter(m), g < p - 1 && (s += ", ")
                            }
                            let m = function(a, s) {
                                let p = a.exec(s);
                                return p ? .groups
                            }(g, a.type);
                            return s += `)${m?.array??""}`, formatAbiParameter({ ...a,
                                type: s
                            })
                        }
                        return ("indexed" in a && a.indexed && (s = `${s} indexed`), a.name) ? `${s} ${a.name}` : s
                    }(v), m !== p - 1 && (s += ", ")
                }
                return s
            }
            var m = p(95950);
            let getFunctionSignature = a => {
                var s;
                let p = "string" == typeof a ? a : "function" === (s = a).type ? `function ${s.name}(${formatAbiParameters(s.inputs)})${s.stateMutability&&"nonpayable"!==s.stateMutability?` ${s.stateMutability}`:""}${s.outputs.length?` returns (${formatAbiParameters(s.outputs)})`:""}` : "event" === s.type ? `event ${s.name}(${formatAbiParameters(s.inputs)})` : "error" === s.type ? `error ${s.name}(${formatAbiParameters(s.inputs)})` : "constructor" === s.type ? `constructor(${formatAbiParameters(s.inputs)})${"payable"===s.stateMutability?" payable":""}` : "fallback" === s.type ? "fallback()" : "receive() external payable";
                return function(a) {
                    let s = !0,
                        p = "",
                        g = 0,
                        v = "",
                        x = !1;
                    for (let m = 0; m < a.length; m++) {
                        let _ = a[m];
                        if (["(", ")", ","].includes(_) && (s = !0), "(" === _ && g++, ")" === _ && g--, s) {
                            if (0 === g) {
                                if (" " === _ && ["event", "function", ""].includes(v)) v = "";
                                else if (v += _, ")" === _) {
                                    x = !0;
                                    break
                                }
                                continue
                            }
                            if (" " === _) {
                                "," !== a[m - 1] && "," !== p && ",(" !== p && (p = "", s = !1);
                                continue
                            }
                            v += _, p += _
                        }
                    }
                    if (!x) throw new m.G("Unable to normalize signature.");
                    return v
                }(p)
            }
        },
        55852: function(a, s, p) {
            "use strict";

            function number(a) {
                if (!Number.isSafeInteger(a) || a < 0) throw Error(`Wrong positive integer: ${a}`)
            }

            function bytes(a, ...s) {
                if (!(a instanceof Uint8Array)) throw Error("Expected Uint8Array");
                if (s.length > 0 && !s.includes(a.length)) throw Error(`Expected Uint8Array of length ${s}, not of length=${a.length}`)
            }

            function exists(a, s = !0) {
                if (a.destroyed) throw Error("Hash instance has been destroyed");
                if (s && a.finished) throw Error("Hash#digest() has already been called")
            }
            p.d(s, {
                w: function() {
                    return keccak256
                }
            });
            let g = BigInt(4294967296 - 1),
                m = BigInt(32),
                rotlSH = (a, s, p) => a << p | s >>> 32 - p,
                rotlSL = (a, s, p) => s << p | a >>> 32 - p,
                rotlBH = (a, s, p) => s << p - 32 | a >>> 64 - p,
                rotlBL = (a, s, p) => a << p - 32 | s >>> 64 - p,
                u8a = a => a instanceof Uint8Array,
                u32 = a => new Uint32Array(a.buffer, a.byteOffset, Math.floor(a.byteLength / 4)),
                v = 68 === new Uint8Array(new Uint32Array([287454020]).buffer)[0];
            if (!v) throw Error("Non little-endian hardware is not supported");

            function toBytes(a) {
                if ("string" == typeof a && (a = function(a) {
                        if ("string" != typeof a) throw Error(`utf8ToBytes expected string, got ${typeof a}`);
                        return new Uint8Array(new TextEncoder().encode(a))
                    }(a)), !u8a(a)) throw Error(`expected Uint8Array, got ${typeof a}`);
                return a
            }
            let Hash = class Hash {
                clone() {
                    return this._cloneInto()
                }
            };
            let [x, _, E] = [
                [],
                [],
                []
            ], T = BigInt(0), F = BigInt(1), W = BigInt(2), z = BigInt(7), Z = BigInt(256), Q = BigInt(113);
            for (let a = 0, s = F, p = 1, g = 0; a < 24; a++) {
                [p, g] = [g, (2 * p + 3 * g) % 5], x.push(2 * (5 * g + p)), _.push((a + 1) * (a + 2) / 2 % 64);
                let m = T;
                for (let a = 0; a < 7; a++)(s = (s << F ^ (s >> z) * Q) % Z) & W && (m ^= F << (F << BigInt(a)) - F);
                E.push(m)
            }
            let [Y, X] = function(a, s = !1) {
                let p = new Uint32Array(a.length),
                    v = new Uint32Array(a.length);
                for (let x = 0; x < a.length; x++) {
                    let {
                        h: _,
                        l: E
                    } = function(a, s = !1) {
                        return s ? {
                            h: Number(a & g),
                            l: Number(a >> m & g)
                        } : {
                            h: 0 | Number(a >> m & g),
                            l: 0 | Number(a & g)
                        }
                    }(a[x], s);
                    [p[x], v[x]] = [_, E]
                }
                return [p, v]
            }(E, !0), rotlH = (a, s, p) => p > 32 ? rotlBH(a, s, p) : rotlSH(a, s, p), rotlL = (a, s, p) => p > 32 ? rotlBL(a, s, p) : rotlSL(a, s, p);
            let Keccak = class Keccak extends Hash {
                constructor(a, s, p, g = !1, m = 24) {
                    if (super(), this.blockLen = a, this.suffix = s, this.outputLen = p, this.enableXOF = g, this.rounds = m, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, number(p), 0 >= this.blockLen || this.blockLen >= 200) throw Error("Sha3 supports only keccak-f1600 function");
                    this.state = new Uint8Array(200), this.state32 = u32(this.state)
                }
                keccak() {
                    ! function(a, s = 24) {
                        let p = new Uint32Array(10);
                        for (let g = 24 - s; g < 24; g++) {
                            for (let s = 0; s < 10; s++) p[s] = a[s] ^ a[s + 10] ^ a[s + 20] ^ a[s + 30] ^ a[s + 40];
                            for (let s = 0; s < 10; s += 2) {
                                let g = (s + 8) % 10,
                                    m = (s + 2) % 10,
                                    v = p[m],
                                    x = p[m + 1],
                                    _ = rotlH(v, x, 1) ^ p[g],
                                    E = rotlL(v, x, 1) ^ p[g + 1];
                                for (let p = 0; p < 50; p += 10) a[s + p] ^= _, a[s + p + 1] ^= E
                            }
                            let s = a[2],
                                m = a[3];
                            for (let p = 0; p < 24; p++) {
                                let g = _[p],
                                    v = rotlH(s, m, g),
                                    E = rotlL(s, m, g),
                                    T = x[p];
                                s = a[T], m = a[T + 1], a[T] = v, a[T + 1] = E
                            }
                            for (let s = 0; s < 50; s += 10) {
                                for (let g = 0; g < 10; g++) p[g] = a[s + g];
                                for (let g = 0; g < 10; g++) a[s + g] ^= ~p[(g + 2) % 10] & p[(g + 4) % 10]
                            }
                            a[0] ^= Y[g], a[1] ^= X[g]
                        }
                        p.fill(0)
                    }(this.state32, this.rounds), this.posOut = 0, this.pos = 0
                }
                update(a) {
                    exists(this);
                    let {
                        blockLen: s,
                        state: p
                    } = this;
                    a = toBytes(a);
                    let g = a.length;
                    for (let m = 0; m < g;) {
                        let v = Math.min(s - this.pos, g - m);
                        for (let s = 0; s < v; s++) p[this.pos++] ^= a[m++];
                        this.pos === s && this.keccak()
                    }
                    return this
                }
                finish() {
                    if (this.finished) return;
                    this.finished = !0;
                    let {
                        state: a,
                        suffix: s,
                        pos: p,
                        blockLen: g
                    } = this;
                    a[p] ^= s, (128 & s) != 0 && p === g - 1 && this.keccak(), a[g - 1] ^= 128, this.keccak()
                }
                writeInto(a) {
                    exists(this, !1), bytes(a), this.finish();
                    let s = this.state,
                        {
                            blockLen: p
                        } = this;
                    for (let g = 0, m = a.length; g < m;) {
                        this.posOut >= p && this.keccak();
                        let v = Math.min(p - this.posOut, m - g);
                        a.set(s.subarray(this.posOut, this.posOut + v), g), this.posOut += v, g += v
                    }
                    return a
                }
                xofInto(a) {
                    if (!this.enableXOF) throw Error("XOF is not possible for this instance");
                    return this.writeInto(a)
                }
                xof(a) {
                    return number(a), this.xofInto(new Uint8Array(a))
                }
                digestInto(a) {
                    if (! function(a, s) {
                            bytes(a);
                            let p = s.outputLen;
                            if (a.length < p) throw Error(`digestInto() expects output buffer of length at least ${p}`)
                        }(a, this), this.finished) throw Error("digest() was already called");
                    return this.writeInto(a), this.destroy(), a
                }
                digest() {
                    return this.digestInto(new Uint8Array(this.outputLen))
                }
                destroy() {
                    this.destroyed = !0, this.state.fill(0)
                }
                _cloneInto(a) {
                    let {
                        blockLen: s,
                        suffix: p,
                        outputLen: g,
                        rounds: m,
                        enableXOF: v
                    } = this;
                    return a || (a = new Keccak(s, p, g, v, m)), a.state32.set(this.state32), a.pos = this.pos, a.posOut = this.posOut, a.finished = this.finished, a.rounds = m, a.suffix = p, a.outputLen = g, a.enableXOF = v, a.destroyed = this.destroyed, a
                }
            };
            let J = function(a) {
                let hashC = s => a().update(toBytes(s)).digest(),
                    s = a();
                return hashC.outputLen = s.outputLen, hashC.blockLen = s.blockLen, hashC.create = () => a(), hashC
            }(() => new Keccak(136, 1, 32));
            var ei = p(45008),
                en = p(56728),
                eo = p(21693);

            function keccak256(a, s) {
                let p = J((0, ei.v)(a, {
                    strict: !1
                }) ? (0, en.O0)(a) : a);
                return "bytes" === (s || "hex") ? p : (0, eo.NC)(p)
            }
        },
        33668: function(a, s, p) {
            "use strict";
            p.d(s, {
                S: function() {
                    return createBatchScheduler
                }
            });
            let g = new Map;

            function createBatchScheduler({
                fn: a,
                id: s,
                shouldSplitBatch: p,
                wait: m = 0,
                sort: v
            }) {
                let exec = async () => {
                        let s = getScheduler();
                        flush();
                        let p = s.map(({
                            args: a
                        }) => a);
                        0 !== p.length && a(p).then(a => {
                            v && Array.isArray(a) && a.sort(v);
                            for (let p = 0; p < s.length; p++) {
                                let {
                                    pendingPromise: g
                                } = s[p];
                                g.resolve ? .([a[p], a])
                            }
                        }).catch(a => {
                            for (let p = 0; p < s.length; p++) {
                                let {
                                    pendingPromise: g
                                } = s[p];
                                g.reject ? .(a)
                            }
                        })
                    },
                    flush = () => g.delete(s),
                    getBatchedArgs = () => getScheduler().map(({
                        args: a
                    }) => a),
                    getScheduler = () => g.get(s) || [],
                    setScheduler = a => g.set(s, [...getScheduler(), a]);
                return {
                    flush,
                    async schedule(a) {
                        let s = {},
                            g = new Promise((a, p) => {
                                s.resolve = a, s.reject = p
                            }),
                            v = p ? .([...getBatchedArgs(), a]);
                        v && exec();
                        let x = getScheduler().length > 0;
                        return x ? setScheduler({
                            args: a,
                            pendingPromise: s
                        }) : (setScheduler({
                            args: a,
                            pendingPromise: s
                        }), setTimeout(exec, m)), g
                    }
                }
            }
        },
        36063: function(a, s, p) {
            "use strict";
            p.d(s, {
                J: function() {
                    return withRetry
                }
            });
            var g = p(21810);

            function withRetry(a, {
                delay: s = 100,
                retryCount: p = 2,
                shouldRetry: m = () => !0
            } = {}) {
                return new Promise((v, x) => {
                    let attemptRetry = async ({
                        count: _ = 0
                    } = {}) => {
                        let retry = async ({
                            error: a
                        }) => {
                            let p = "function" == typeof s ? s({
                                count: _,
                                error: a
                            }) : s;
                            p && await (0, g.D)(p), attemptRetry({
                                count: _ + 1
                            })
                        };
                        try {
                            let s = await a();
                            v(s)
                        } catch (a) {
                            if (_ < p && await m({
                                    count: _,
                                    error: a
                                })) return retry({
                                error: a
                            });
                            x(a)
                        }
                    };
                    attemptRetry()
                })
            }
        },
        71891: function(a, s, p) {
            "use strict";
            p.d(s, {
                P: function() {
                    return stringify
                }
            });
            let stringify = (a, s, p) => JSON.stringify(a, (a, p) => {
                let g = "bigint" == typeof p ? p.toString() : p;
                return "function" == typeof s ? s(a, g) : g
            }, p)
        },
        2445: function(a, s, p) {
            "use strict";
            p.d(s, {
                F: function() {
                    return assertRequest
                }
            });
            var g = p(4832),
                m = p(21485),
                v = p(40009),
                x = p(44818),
                _ = p(87364);

            function assertRequest(a) {
                let {
                    account: s,
                    gasPrice: p,
                    maxFeePerGas: E,
                    maxPriorityFeePerGas: T,
                    to: F
                } = a, W = s ? (0, g.T)(s) : void 0;
                if (W && !(0, _.U)(W.address)) throw new m.b({
                    address: W.address
                });
                if (F && !(0, _.U)(F)) throw new m.b({
                    address: F
                });
                if (void 0 !== p && (void 0 !== E || void 0 !== T)) throw new x.xY;
                if (E && E > 2 n ** 256 n - 1 n) throw new v.Hh({
                    maxFeePerGas: E
                });
                if (T && E && T > E) throw new v.cs({
                    maxFeePerGas: E,
                    maxPriorityFeePerGas: T
                })
            }
        },
        29578: function(a, s, p) {
            "use strict";
            p.d(s, {
                cj: function() {
                    return getTypesForEIP712Domain
                },
                iC: function() {
                    return validateTypedData
                }
            });
            var g = p(71878),
                m = p(21485),
                v = p(87364),
                x = p(39868),
                _ = p(21693);
            let E = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/,
                T = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;

            function validateTypedData({
                domain: a,
                message: s,
                primaryType: p,
                types: F
            }) {
                let validateData = (a, s) => {
                    for (let p of a) {
                        let {
                            name: a,
                            type: W
                        } = p, z = s[a], Z = W.match(T);
                        if (Z && ("number" == typeof z || "bigint" == typeof z)) {
                            let [a, s, p] = Z;
                            (0, _.eC)(z, {
                                signed: "int" === s,
                                size: parseInt(p) / 8
                            })
                        }
                        if ("address" === W && "string" == typeof z && !(0, v.U)(z)) throw new m.b({
                            address: z
                        });
                        let Q = W.match(E);
                        if (Q) {
                            let [a, s] = Q;
                            if (s && (0, x.d)(z) !== parseInt(s)) throw new g.KY({
                                expectedSize: parseInt(s),
                                givenSize: (0, x.d)(z)
                            })
                        }
                        let Y = F[W];
                        Y && validateData(Y, z)
                    }
                };
                if (F.EIP712Domain && a && validateData(F.EIP712Domain, a), "EIP712Domain" !== p) {
                    let a = F[p];
                    validateData(a, s)
                }
            }

            function getTypesForEIP712Domain({
                domain: a
            }) {
                return ["string" == typeof a ? .name && {
                    name: "name",
                    type: "string"
                }, a ? .version && {
                    name: "version",
                    type: "string"
                }, "number" == typeof a ? .chainId && {
                    name: "chainId",
                    type: "uint256"
                }, a ? .verifyingContract && {
                    name: "verifyingContract",
                    type: "address"
                }, a ? .salt && {
                    name: "salt",
                    type: "bytes32"
                }].filter(Boolean)
            }
        },
        79352: function(a, s, p) {
            "use strict";
            p.d(s, {
                d: function() {
                    return formatEther
                }
            });
            var g = p(36238),
                m = p(16775);

            function formatEther(a, s = "wei") {
                return (0, m.b)(a, g.ez[s])
            }
        },
        32421: function(a, s, p) {
            "use strict";
            p.d(s, {
                o: function() {
                    return formatGwei
                }
            });
            var g = p(36238),
                m = p(16775);

            function formatGwei(a, s = "wei") {
                return (0, m.b)(a, g.Zn[s])
            }
        },
        16775: function(a, s, p) {
            "use strict";

            function formatUnits(a, s) {
                let p = a.toString(),
                    g = p.startsWith("-");
                g && (p = p.slice(1));
                let [m, v] = [(p = p.padStart(s, "0")).slice(0, p.length - s), p.slice(p.length - s)];
                return v = v.replace(/(0+)$/, ""), `${g?"-":""}${m||"0"}${v?`.${v}`:""}`
            }
            p.d(s, {
                b: function() {
                    return formatUnits
                }
            })
        },
        21810: function(a, s, p) {
            "use strict";
            async function wait(a) {
                return new Promise(s => setTimeout(s, a))
            }
            p.d(s, {
                D: function() {
                    return wait
                }
            })
        },
        15900: function(a, s, p) {
            "use strict";
            let g;

            function noop() {}
            p.d(s, {
                eM: function() {
                    return WagmiConfig
                },
                _g: function() {
                    return createConfig
                },
                mA: function() {
                    return useAccount
                },
                KQ: function() {
                    return useBalance
                },
                do: function() {
                    return useContractRead
                }
            });
            let m = "undefined" == typeof window || "Deno" in window;

            function utils_noop() {}

            function isValidTimeout(a) {
                return "number" == typeof a && a >= 0 && a !== 1 / 0
            }

            function timeUntilStale(a, s) {
                return Math.max(a + (s || 0) - Date.now(), 0)
            }

            function parseQueryArgs(a, s, p) {
                return isQueryKey(a) ? "function" == typeof s ? { ...p,
                    queryKey: a,
                    queryFn: s
                } : { ...s,
                    queryKey: a
                } : a
            }

            function parseFilterArgs(a, s, p) {
                return isQueryKey(a) ? [{ ...s,
                    queryKey: a
                }, p] : [a || {}, s]
            }

            function matchQuery(a, s) {
                let {
                    type: p = "all",
                    exact: g,
                    fetchStatus: m,
                    predicate: v,
                    queryKey: x,
                    stale: _
                } = a;
                if (isQueryKey(x)) {
                    if (g) {
                        if (s.queryHash !== hashQueryKeyByOptions(x, s.options)) return !1
                    } else {
                        if (!partialDeepEqual(s.queryKey, x)) return !1
                    }
                }
                if ("all" !== p) {
                    let a = s.isActive();
                    if ("active" === p && !a || "inactive" === p && a) return !1
                }
                return ("boolean" != typeof _ || s.isStale() === _) && (void 0 === m || m === s.state.fetchStatus) && (!v || !!v(s))
            }

            function matchMutation(a, s) {
                let {
                    exact: p,
                    fetching: g,
                    predicate: m,
                    mutationKey: v
                } = a;
                if (isQueryKey(v)) {
                    if (!s.options.mutationKey) return !1;
                    if (p) {
                        if (hashQueryKey(s.options.mutationKey) !== hashQueryKey(v)) return !1
                    } else {
                        if (!partialDeepEqual(s.options.mutationKey, v)) return !1
                    }
                }
                return ("boolean" != typeof g || "loading" === s.state.status === g) && (!m || !!m(s))
            }

            function hashQueryKeyByOptions(a, s) {
                let p = (null == s ? void 0 : s.queryKeyHashFn) || hashQueryKey;
                return p(a)
            }

            function hashQueryKey(a) {
                return JSON.stringify(a, (a, s) => isPlainObject(s) ? Object.keys(s).sort().reduce((a, p) => (a[p] = s[p], a), {}) : s)
            }

            function partialDeepEqual(a, s) {
                return a === s || typeof a == typeof s && !!a && !!s && "object" == typeof a && "object" == typeof s && !Object.keys(s).some(p => !partialDeepEqual(a[p], s[p]))
            }

            function utils_replaceEqualDeep(a, s) {
                if (a === s) return a;
                let p = isPlainArray(a) && isPlainArray(s);
                if (p || isPlainObject(a) && isPlainObject(s)) {
                    let g = p ? a.length : Object.keys(a).length,
                        m = p ? s : Object.keys(s),
                        v = m.length,
                        x = p ? [] : {},
                        _ = 0;
                    for (let g = 0; g < v; g++) {
                        let v = p ? g : m[g];
                        x[v] = utils_replaceEqualDeep(a[v], s[v]), x[v] === a[v] && _++
                    }
                    return g === v && _ === g ? a : x
                }
                return s
            }

            function shallowEqualObjects(a, s) {
                if (a && !s || s && !a) return !1;
                for (let p in a)
                    if (a[p] !== s[p]) return !1;
                return !0
            }

            function isPlainArray(a) {
                return Array.isArray(a) && a.length === Object.keys(a).length
            }

            function isPlainObject(a) {
                if (!hasObjectPrototype(a)) return !1;
                let s = a.constructor;
                if (void 0 === s) return !0;
                let p = s.prototype;
                return !!(hasObjectPrototype(p) && p.hasOwnProperty("isPrototypeOf"))
            }

            function hasObjectPrototype(a) {
                return "[object Object]" === Object.prototype.toString.call(a)
            }

            function isQueryKey(a) {
                return Array.isArray(a)
            }

            function sleep(a) {
                return new Promise(s => {
                    setTimeout(s, a)
                })
            }

            function scheduleMicrotask(a) {
                sleep(0).then(a)
            }

            function replaceData(a, s, p) {
                return null != p.isDataEqual && p.isDataEqual(a, s) ? a : "function" == typeof p.structuralSharing ? p.structuralSharing(a, s) : !1 !== p.structuralSharing ? utils_replaceEqualDeep(a, s) : s
            }
            let v = console,
                x = function() {
                    let a = [],
                        s = 0,
                        notifyFn = a => {
                            a()
                        },
                        batchNotifyFn = a => {
                            a()
                        },
                        schedule = p => {
                            s ? a.push(p) : scheduleMicrotask(() => {
                                notifyFn(p)
                            })
                        },
                        flush = () => {
                            let s = a;
                            a = [], s.length && scheduleMicrotask(() => {
                                batchNotifyFn(() => {
                                    s.forEach(a => {
                                        notifyFn(a)
                                    })
                                })
                            })
                        };
                    return {
                        batch: a => {
                            let p;
                            s++;
                            try {
                                p = a()
                            } finally {
                                --s || flush()
                            }
                            return p
                        },
                        batchCalls: a => (...s) => {
                            schedule(() => {
                                a(...s)
                            })
                        },
                        schedule,
                        setNotifyFunction: a => {
                            notifyFn = a
                        },
                        setBatchNotifyFunction: a => {
                            batchNotifyFn = a
                        }
                    }
                }();
            let Subscribable = class Subscribable {
                constructor() {
                    this.listeners = new Set, this.subscribe = this.subscribe.bind(this)
                }
                subscribe(a) {
                    let s = {
                        listener: a
                    };
                    return this.listeners.add(s), this.onSubscribe(), () => {
                        this.listeners.delete(s), this.onUnsubscribe()
                    }
                }
                hasListeners() {
                    return this.listeners.size > 0
                }
                onSubscribe() {}
                onUnsubscribe() {}
            };
            let _ = new class extends Subscribable {
                    constructor() {
                        super(), this.setup = a => {
                            if (!m && window.addEventListener) {
                                let listener = () => a();
                                return window.addEventListener("visibilitychange", listener, !1), window.addEventListener("focus", listener, !1), () => {
                                    window.removeEventListener("visibilitychange", listener), window.removeEventListener("focus", listener)
                                }
                            }
                        }
                    }
                    onSubscribe() {
                        this.cleanup || this.setEventListener(this.setup)
                    }
                    onUnsubscribe() {
                        if (!this.hasListeners()) {
                            var a;
                            null == (a = this.cleanup) || a.call(this), this.cleanup = void 0
                        }
                    }
                    setEventListener(a) {
                        var s;
                        this.setup = a, null == (s = this.cleanup) || s.call(this), this.cleanup = a(a => {
                            "boolean" == typeof a ? this.setFocused(a) : this.onFocus()
                        })
                    }
                    setFocused(a) {
                        let s = this.focused !== a;
                        s && (this.focused = a, this.onFocus())
                    }
                    onFocus() {
                        this.listeners.forEach(({
                            listener: a
                        }) => {
                            a()
                        })
                    }
                    isFocused() {
                        return "boolean" == typeof this.focused ? this.focused : "undefined" == typeof document || [void 0, "visible", "prerender"].includes(document.visibilityState)
                    }
                },
                E = ["online", "offline"],
                T = new class extends Subscribable {
                    constructor() {
                        super(), this.setup = a => {
                            if (!m && window.addEventListener) {
                                let listener = () => a();
                                return E.forEach(a => {
                                    window.addEventListener(a, listener, !1)
                                }), () => {
                                    E.forEach(a => {
                                        window.removeEventListener(a, listener)
                                    })
                                }
                            }
                        }
                    }
                    onSubscribe() {
                        this.cleanup || this.setEventListener(this.setup)
                    }
                    onUnsubscribe() {
                        if (!this.hasListeners()) {
                            var a;
                            null == (a = this.cleanup) || a.call(this), this.cleanup = void 0
                        }
                    }
                    setEventListener(a) {
                        var s;
                        this.setup = a, null == (s = this.cleanup) || s.call(this), this.cleanup = a(a => {
                            "boolean" == typeof a ? this.setOnline(a) : this.onOnline()
                        })
                    }
                    setOnline(a) {
                        let s = this.online !== a;
                        s && (this.online = a, this.onOnline())
                    }
                    onOnline() {
                        this.listeners.forEach(({
                            listener: a
                        }) => {
                            a()
                        })
                    }
                    isOnline() {
                        return "boolean" == typeof this.online ? this.online : "undefined" == typeof navigator || void 0 === navigator.onLine || navigator.onLine
                    }
                };

            function defaultRetryDelay(a) {
                return Math.min(1e3 * 2 ** a, 3e4)
            }

            function canFetch(a) {
                return (null != a ? a : "online") !== "online" || T.isOnline()
            }
            let CancelledError = class CancelledError {
                constructor(a) {
                    this.revert = null == a ? void 0 : a.revert, this.silent = null == a ? void 0 : a.silent
                }
            };

            function isCancelledError(a) {
                return a instanceof CancelledError
            }

            function createRetryer(a) {
                let s, p, g, m = !1,
                    v = 0,
                    x = !1,
                    E = new Promise((a, s) => {
                        p = a, g = s
                    }),
                    shouldPause = () => !_.isFocused() || "always" !== a.networkMode && !T.isOnline(),
                    resolve = g => {
                        x || (x = !0, null == a.onSuccess || a.onSuccess(g), null == s || s(), p(g))
                    },
                    reject = p => {
                        x || (x = !0, null == a.onError || a.onError(p), null == s || s(), g(p))
                    },
                    pause = () => new Promise(p => {
                        s = a => {
                            let s = x || !shouldPause();
                            return s && p(a), s
                        }, null == a.onPause || a.onPause()
                    }).then(() => {
                        s = void 0, x || null == a.onContinue || a.onContinue()
                    }),
                    run = () => {
                        let s;
                        if (!x) {
                            try {
                                s = a.fn()
                            } catch (a) {
                                s = Promise.reject(a)
                            }
                            Promise.resolve(s).then(resolve).catch(s => {
                                var p, g;
                                if (x) return;
                                let _ = null != (p = a.retry) ? p : 3,
                                    E = null != (g = a.retryDelay) ? g : defaultRetryDelay,
                                    T = "function" == typeof E ? E(v, s) : E,
                                    F = !0 === _ || "number" == typeof _ && v < _ || "function" == typeof _ && _(v, s);
                                if (m || !F) {
                                    reject(s);
                                    return
                                }
                                v++, null == a.onFail || a.onFail(v, s), sleep(T).then(() => {
                                    if (shouldPause()) return pause()
                                }).then(() => {
                                    m ? reject(s) : run()
                                })
                            })
                        }
                    };
                return canFetch(a.networkMode) ? run() : pause().then(run), {
                    promise: E,
                    cancel: s => {
                        x || (reject(new CancelledError(s)), null == a.abort || a.abort())
                    },
                    continue: () => {
                        let a = null == s ? void 0 : s();
                        return a ? E : Promise.resolve()
                    },
                    cancelRetry: () => {
                        m = !0
                    },
                    continueRetry: () => {
                        m = !1
                    }
                }
            }
            let Removable = class Removable {
                destroy() {
                    this.clearGcTimeout()
                }
                scheduleGc() {
                    this.clearGcTimeout(), isValidTimeout(this.cacheTime) && (this.gcTimeout = setTimeout(() => {
                        this.optionalRemove()
                    }, this.cacheTime))
                }
                updateCacheTime(a) {
                    this.cacheTime = Math.max(this.cacheTime || 0, null != a ? a : m ? 1 / 0 : 3e5)
                }
                clearGcTimeout() {
                    this.gcTimeout && (clearTimeout(this.gcTimeout), this.gcTimeout = void 0)
                }
            };
            let Query = class Query extends Removable {
                constructor(a) {
                    super(), this.abortSignalConsumed = !1, this.defaultOptions = a.defaultOptions, this.setOptions(a.options), this.observers = [], this.cache = a.cache, this.logger = a.logger || v, this.queryKey = a.queryKey, this.queryHash = a.queryHash, this.initialState = a.state || function(a) {
                        let s = "function" == typeof a.initialData ? a.initialData() : a.initialData,
                            p = void 0 !== s,
                            g = p ? "function" == typeof a.initialDataUpdatedAt ? a.initialDataUpdatedAt() : a.initialDataUpdatedAt : 0;
                        return {
                            data: s,
                            dataUpdateCount: 0,
                            dataUpdatedAt: p ? null != g ? g : Date.now() : 0,
                            error: null,
                            errorUpdateCount: 0,
                            errorUpdatedAt: 0,
                            fetchFailureCount: 0,
                            fetchFailureReason: null,
                            fetchMeta: null,
                            isInvalidated: !1,
                            status: p ? "success" : "loading",
                            fetchStatus: "idle"
                        }
                    }(this.options), this.state = this.initialState, this.scheduleGc()
                }
                get meta() {
                    return this.options.meta
                }
                setOptions(a) {
                    this.options = { ...this.defaultOptions,
                        ...a
                    }, this.updateCacheTime(this.options.cacheTime)
                }
                optionalRemove() {
                    this.observers.length || "idle" !== this.state.fetchStatus || this.cache.remove(this)
                }
                setData(a, s) {
                    let p = replaceData(this.state.data, a, this.options);
                    return this.dispatch({
                        data: p,
                        type: "success",
                        dataUpdatedAt: null == s ? void 0 : s.updatedAt,
                        manual: null == s ? void 0 : s.manual
                    }), p
                }
                setState(a, s) {
                    this.dispatch({
                        type: "setState",
                        state: a,
                        setStateOptions: s
                    })
                }
                cancel(a) {
                    var s;
                    let p = this.promise;
                    return null == (s = this.retryer) || s.cancel(a), p ? p.then(utils_noop).catch(utils_noop) : Promise.resolve()
                }
                destroy() {
                    super.destroy(), this.cancel({
                        silent: !0
                    })
                }
                reset() {
                    this.destroy(), this.setState(this.initialState)
                }
                isActive() {
                    return this.observers.some(a => !1 !== a.options.enabled)
                }
                isDisabled() {
                    return this.getObserversCount() > 0 && !this.isActive()
                }
                isStale() {
                    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(a => a.getCurrentResult().isStale)
                }
                isStaleByTime(a = 0) {
                    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, a)
                }
                onFocus() {
                    var a;
                    let s = this.observers.find(a => a.shouldFetchOnWindowFocus());
                    s && s.refetch({
                        cancelRefetch: !1
                    }), null == (a = this.retryer) || a.continue()
                }
                onOnline() {
                    var a;
                    let s = this.observers.find(a => a.shouldFetchOnReconnect());
                    s && s.refetch({
                        cancelRefetch: !1
                    }), null == (a = this.retryer) || a.continue()
                }
                addObserver(a) {
                    this.observers.includes(a) || (this.observers.push(a), this.clearGcTimeout(), this.cache.notify({
                        type: "observerAdded",
                        query: this,
                        observer: a
                    }))
                }
                removeObserver(a) {
                    this.observers.includes(a) && (this.observers = this.observers.filter(s => s !== a), this.observers.length || (this.retryer && (this.abortSignalConsumed ? this.retryer.cancel({
                        revert: !0
                    }) : this.retryer.cancelRetry()), this.scheduleGc()), this.cache.notify({
                        type: "observerRemoved",
                        query: this,
                        observer: a
                    }))
                }
                getObserversCount() {
                    return this.observers.length
                }
                invalidate() {
                    this.state.isInvalidated || this.dispatch({
                        type: "invalidate"
                    })
                }
                fetch(a, s) {
                    var p, g, m, v;
                    if ("idle" !== this.state.fetchStatus) {
                        if (this.state.dataUpdatedAt && null != s && s.cancelRefetch) this.cancel({
                            silent: !0
                        });
                        else if (this.promise) return null == (m = this.retryer) || m.continueRetry(), this.promise
                    }
                    if (a && this.setOptions(a), !this.options.queryFn) {
                        let a = this.observers.find(a => a.options.queryFn);
                        a && this.setOptions(a.options)
                    }
                    let x = function() {
                            if ("function" == typeof AbortController) return new AbortController
                        }(),
                        _ = {
                            queryKey: this.queryKey,
                            pageParam: void 0,
                            meta: this.meta
                        },
                        addSignalProperty = a => {
                            Object.defineProperty(a, "signal", {
                                enumerable: !0,
                                get: () => {
                                    if (x) return this.abortSignalConsumed = !0, x.signal
                                }
                            })
                        };
                    addSignalProperty(_);
                    let E = {
                        fetchOptions: s,
                        options: this.options,
                        queryKey: this.queryKey,
                        state: this.state,
                        fetchFn: () => this.options.queryFn ? (this.abortSignalConsumed = !1, this.options.queryFn(_)) : Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'")
                    };
                    addSignalProperty(E), null == (p = this.options.behavior) || p.onFetch(E), this.revertState = this.state, ("idle" === this.state.fetchStatus || this.state.fetchMeta !== (null == (g = E.fetchOptions) ? void 0 : g.meta)) && this.dispatch({
                        type: "fetch",
                        meta: null == (v = E.fetchOptions) ? void 0 : v.meta
                    });
                    let onError = a => {
                        if (isCancelledError(a) && a.silent || this.dispatch({
                                type: "error",
                                error: a
                            }), !isCancelledError(a)) {
                            var s, p, g, m;
                            null == (s = (p = this.cache.config).onError) || s.call(p, a, this), null == (g = (m = this.cache.config).onSettled) || g.call(m, this.state.data, a, this)
                        }
                        this.isFetchingOptimistic || this.scheduleGc(), this.isFetchingOptimistic = !1
                    };
                    return this.retryer = createRetryer({
                        fn: E.fetchFn,
                        abort: null == x ? void 0 : x.abort.bind(x),
                        onSuccess: a => {
                            var s, p, g, m;
                            if (void 0 === a) {
                                onError(Error(this.queryHash + " data is undefined"));
                                return
                            }
                            this.setData(a), null == (s = (p = this.cache.config).onSuccess) || s.call(p, a, this), null == (g = (m = this.cache.config).onSettled) || g.call(m, a, this.state.error, this), this.isFetchingOptimistic || this.scheduleGc(), this.isFetchingOptimistic = !1
                        },
                        onError,
                        onFail: (a, s) => {
                            this.dispatch({
                                type: "failed",
                                failureCount: a,
                                error: s
                            })
                        },
                        onPause: () => {
                            this.dispatch({
                                type: "pause"
                            })
                        },
                        onContinue: () => {
                            this.dispatch({
                                type: "continue"
                            })
                        },
                        retry: E.options.retry,
                        retryDelay: E.options.retryDelay,
                        networkMode: E.options.networkMode
                    }), this.promise = this.retryer.promise, this.promise
                }
                dispatch(a) {
                    this.state = (s => {
                        var p, g;
                        switch (a.type) {
                            case "failed":
                                return { ...s,
                                    fetchFailureCount: a.failureCount,
                                    fetchFailureReason: a.error
                                };
                            case "pause":
                                return { ...s,
                                    fetchStatus: "paused"
                                };
                            case "continue":
                                return { ...s,
                                    fetchStatus: "fetching"
                                };
                            case "fetch":
                                return { ...s,
                                    fetchFailureCount: 0,
                                    fetchFailureReason: null,
                                    fetchMeta: null != (p = a.meta) ? p : null,
                                    fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
                                    ...!s.dataUpdatedAt && {
                                        error: null,
                                        status: "loading"
                                    }
                                };
                            case "success":
                                return { ...s,
                                    data: a.data,
                                    dataUpdateCount: s.dataUpdateCount + 1,
                                    dataUpdatedAt: null != (g = a.dataUpdatedAt) ? g : Date.now(),
                                    error: null,
                                    isInvalidated: !1,
                                    status: "success",
                                    ...!a.manual && {
                                        fetchStatus: "idle",
                                        fetchFailureCount: 0,
                                        fetchFailureReason: null
                                    }
                                };
                            case "error":
                                let m = a.error;
                                if (isCancelledError(m) && m.revert && this.revertState) return { ...this.revertState,
                                    fetchStatus: "idle"
                                };
                                return { ...s,
                                    error: m,
                                    errorUpdateCount: s.errorUpdateCount + 1,
                                    errorUpdatedAt: Date.now(),
                                    fetchFailureCount: s.fetchFailureCount + 1,
                                    fetchFailureReason: m,
                                    fetchStatus: "idle",
                                    status: "error"
                                };
                            case "invalidate":
                                return { ...s,
                                    isInvalidated: !0
                                };
                            case "setState":
                                return { ...s,
                                    ...a.state
                                }
                        }
                    })(this.state), x.batch(() => {
                        this.observers.forEach(s => {
                            s.onQueryUpdate(a)
                        }), this.cache.notify({
                            query: this,
                            type: "updated",
                            action: a
                        })
                    })
                }
            };
            let QueryCache = class QueryCache extends Subscribable {
                constructor(a) {
                    super(), this.config = a || {}, this.queries = [], this.queriesMap = {}
                }
                build(a, s, p) {
                    var g;
                    let m = s.queryKey,
                        v = null != (g = s.queryHash) ? g : hashQueryKeyByOptions(m, s),
                        x = this.get(v);
                    return x || (x = new Query({
                        cache: this,
                        logger: a.getLogger(),
                        queryKey: m,
                        queryHash: v,
                        options: a.defaultQueryOptions(s),
                        state: p,
                        defaultOptions: a.getQueryDefaults(m)
                    }), this.add(x)), x
                }
                add(a) {
                    this.queriesMap[a.queryHash] || (this.queriesMap[a.queryHash] = a, this.queries.push(a), this.notify({
                        type: "added",
                        query: a
                    }))
                }
                remove(a) {
                    let s = this.queriesMap[a.queryHash];
                    s && (a.destroy(), this.queries = this.queries.filter(s => s !== a), s === a && delete this.queriesMap[a.queryHash], this.notify({
                        type: "removed",
                        query: a
                    }))
                }
                clear() {
                    x.batch(() => {
                        this.queries.forEach(a => {
                            this.remove(a)
                        })
                    })
                }
                get(a) {
                    return this.queriesMap[a]
                }
                getAll() {
                    return this.queries
                }
                find(a, s) {
                    let [p] = parseFilterArgs(a, s);
                    return void 0 === p.exact && (p.exact = !0), this.queries.find(a => matchQuery(p, a))
                }
                findAll(a, s) {
                    let [p] = parseFilterArgs(a, s);
                    return Object.keys(p).length > 0 ? this.queries.filter(a => matchQuery(p, a)) : this.queries
                }
                notify(a) {
                    x.batch(() => {
                        this.listeners.forEach(({
                            listener: s
                        }) => {
                            s(a)
                        })
                    })
                }
                onFocus() {
                    x.batch(() => {
                        this.queries.forEach(a => {
                            a.onFocus()
                        })
                    })
                }
                onOnline() {
                    x.batch(() => {
                        this.queries.forEach(a => {
                            a.onOnline()
                        })
                    })
                }
            };
            let Mutation = class Mutation extends Removable {
                constructor(a) {
                    super(), this.defaultOptions = a.defaultOptions, this.mutationId = a.mutationId, this.mutationCache = a.mutationCache, this.logger = a.logger || v, this.observers = [], this.state = a.state || {
                        context: void 0,
                        data: void 0,
                        error: null,
                        failureCount: 0,
                        failureReason: null,
                        isPaused: !1,
                        status: "idle",
                        variables: void 0
                    }, this.setOptions(a.options), this.scheduleGc()
                }
                setOptions(a) {
                    this.options = { ...this.defaultOptions,
                        ...a
                    }, this.updateCacheTime(this.options.cacheTime)
                }
                get meta() {
                    return this.options.meta
                }
                setState(a) {
                    this.dispatch({
                        type: "setState",
                        state: a
                    })
                }
                addObserver(a) {
                    this.observers.includes(a) || (this.observers.push(a), this.clearGcTimeout(), this.mutationCache.notify({
                        type: "observerAdded",
                        mutation: this,
                        observer: a
                    }))
                }
                removeObserver(a) {
                    this.observers = this.observers.filter(s => s !== a), this.scheduleGc(), this.mutationCache.notify({
                        type: "observerRemoved",
                        mutation: this,
                        observer: a
                    })
                }
                optionalRemove() {
                    this.observers.length || ("loading" === this.state.status ? this.scheduleGc() : this.mutationCache.remove(this))
                }
                continue () {
                    var a, s;
                    return null != (a = null == (s = this.retryer) ? void 0 : s.continue()) ? a : this.execute()
                }
                async execute() {
                    var a, s, p, g, m, v, x, _, E, T, F, W, z, Z, Q, Y, X, J, ei, en;
                    let eo = "loading" === this.state.status;
                    try {
                        if (!eo) {
                            this.dispatch({
                                type: "loading",
                                variables: this.options.variables
                            }), await (null == (E = (T = this.mutationCache.config).onMutate) ? void 0 : E.call(T, this.state.variables, this));
                            let a = await (null == (F = (W = this.options).onMutate) ? void 0 : F.call(W, this.state.variables));
                            a !== this.state.context && this.dispatch({
                                type: "loading",
                                context: a,
                                variables: this.state.variables
                            })
                        }
                        let z = await (() => {
                            var a;
                            return this.retryer = createRetryer({
                                fn: () => this.options.mutationFn ? this.options.mutationFn(this.state.variables) : Promise.reject("No mutationFn found"),
                                onFail: (a, s) => {
                                    this.dispatch({
                                        type: "failed",
                                        failureCount: a,
                                        error: s
                                    })
                                },
                                onPause: () => {
                                    this.dispatch({
                                        type: "pause"
                                    })
                                },
                                onContinue: () => {
                                    this.dispatch({
                                        type: "continue"
                                    })
                                },
                                retry: null != (a = this.options.retry) ? a : 0,
                                retryDelay: this.options.retryDelay,
                                networkMode: this.options.networkMode
                            }), this.retryer.promise
                        })();
                        return await (null == (a = (s = this.mutationCache.config).onSuccess) ? void 0 : a.call(s, z, this.state.variables, this.state.context, this)), await (null == (p = (g = this.options).onSuccess) ? void 0 : p.call(g, z, this.state.variables, this.state.context)), await (null == (m = (v = this.mutationCache.config).onSettled) ? void 0 : m.call(v, z, null, this.state.variables, this.state.context, this)), await (null == (x = (_ = this.options).onSettled) ? void 0 : x.call(_, z, null, this.state.variables, this.state.context)), this.dispatch({
                            type: "success",
                            data: z
                        }), z
                    } catch (a) {
                        try {
                            throw await (null == (z = (Z = this.mutationCache.config).onError) ? void 0 : z.call(Z, a, this.state.variables, this.state.context, this)), await (null == (Q = (Y = this.options).onError) ? void 0 : Q.call(Y, a, this.state.variables, this.state.context)), await (null == (X = (J = this.mutationCache.config).onSettled) ? void 0 : X.call(J, void 0, a, this.state.variables, this.state.context, this)), await (null == (ei = (en = this.options).onSettled) ? void 0 : ei.call(en, void 0, a, this.state.variables, this.state.context)), a
                        } finally {
                            this.dispatch({
                                type: "error",
                                error: a
                            })
                        }
                    }
                }
                dispatch(a) {
                    this.state = (s => {
                        switch (a.type) {
                            case "failed":
                                return { ...s,
                                    failureCount: a.failureCount,
                                    failureReason: a.error
                                };
                            case "pause":
                                return { ...s,
                                    isPaused: !0
                                };
                            case "continue":
                                return { ...s,
                                    isPaused: !1
                                };
                            case "loading":
                                return { ...s,
                                    context: a.context,
                                    data: void 0,
                                    failureCount: 0,
                                    failureReason: null,
                                    error: null,
                                    isPaused: !canFetch(this.options.networkMode),
                                    status: "loading",
                                    variables: a.variables
                                };
                            case "success":
                                return { ...s,
                                    data: a.data,
                                    failureCount: 0,
                                    failureReason: null,
                                    error: null,
                                    status: "success",
                                    isPaused: !1
                                };
                            case "error":
                                return { ...s,
                                    data: void 0,
                                    error: a.error,
                                    failureCount: s.failureCount + 1,
                                    failureReason: a.error,
                                    isPaused: !1,
                                    status: "error"
                                };
                            case "setState":
                                return { ...s,
                                    ...a.state
                                }
                        }
                    })(this.state), x.batch(() => {
                        this.observers.forEach(s => {
                            s.onMutationUpdate(a)
                        }), this.mutationCache.notify({
                            mutation: this,
                            type: "updated",
                            action: a
                        })
                    })
                }
            };
            let MutationCache = class MutationCache extends Subscribable {
                constructor(a) {
                    super(), this.config = a || {}, this.mutations = [], this.mutationId = 0
                }
                build(a, s, p) {
                    let g = new Mutation({
                        mutationCache: this,
                        logger: a.getLogger(),
                        mutationId: ++this.mutationId,
                        options: a.defaultMutationOptions(s),
                        state: p,
                        defaultOptions: s.mutationKey ? a.getMutationDefaults(s.mutationKey) : void 0
                    });
                    return this.add(g), g
                }
                add(a) {
                    this.mutations.push(a), this.notify({
                        type: "added",
                        mutation: a
                    })
                }
                remove(a) {
                    this.mutations = this.mutations.filter(s => s !== a), this.notify({
                        type: "removed",
                        mutation: a
                    })
                }
                clear() {
                    x.batch(() => {
                        this.mutations.forEach(a => {
                            this.remove(a)
                        })
                    })
                }
                getAll() {
                    return this.mutations
                }
                find(a) {
                    return void 0 === a.exact && (a.exact = !0), this.mutations.find(s => matchMutation(a, s))
                }
                findAll(a) {
                    return this.mutations.filter(s => matchMutation(a, s))
                }
                notify(a) {
                    x.batch(() => {
                        this.listeners.forEach(({
                            listener: s
                        }) => {
                            s(a)
                        })
                    })
                }
                resumePausedMutations() {
                    var a;
                    return this.resuming = (null != (a = this.resuming) ? a : Promise.resolve()).then(() => {
                        let a = this.mutations.filter(a => a.state.isPaused);
                        return x.batch(() => a.reduce((a, s) => a.then(() => s.continue().catch(utils_noop)), Promise.resolve()))
                    }).then(() => {
                        this.resuming = void 0
                    }), this.resuming
                }
            };

            function getNextPageParam(a, s) {
                return null == a.getNextPageParam ? void 0 : a.getNextPageParam(s[s.length - 1], s)
            }
            let QueryClient = class QueryClient {
                constructor(a = {}) {
                    this.queryCache = a.queryCache || new QueryCache, this.mutationCache = a.mutationCache || new MutationCache, this.logger = a.logger || v, this.defaultOptions = a.defaultOptions || {}, this.queryDefaults = [], this.mutationDefaults = [], this.mountCount = 0
                }
                mount() {
                    this.mountCount++, 1 === this.mountCount && (this.unsubscribeFocus = _.subscribe(() => {
                        _.isFocused() && (this.resumePausedMutations(), this.queryCache.onFocus())
                    }), this.unsubscribeOnline = T.subscribe(() => {
                        T.isOnline() && (this.resumePausedMutations(), this.queryCache.onOnline())
                    }))
                }
                unmount() {
                    var a, s;
                    this.mountCount--, 0 === this.mountCount && (null == (a = this.unsubscribeFocus) || a.call(this), this.unsubscribeFocus = void 0, null == (s = this.unsubscribeOnline) || s.call(this), this.unsubscribeOnline = void 0)
                }
                isFetching(a, s) {
                    let [p] = parseFilterArgs(a, s);
                    return p.fetchStatus = "fetching", this.queryCache.findAll(p).length
                }
                isMutating(a) {
                    return this.mutationCache.findAll({ ...a,
                        fetching: !0
                    }).length
                }
                getQueryData(a, s) {
                    var p;
                    return null == (p = this.queryCache.find(a, s)) ? void 0 : p.state.data
                }
                ensureQueryData(a, s, p) {
                    let g = parseQueryArgs(a, s, p),
                        m = this.getQueryData(g.queryKey);
                    return m ? Promise.resolve(m) : this.fetchQuery(g)
                }
                getQueriesData(a) {
                    return this.getQueryCache().findAll(a).map(({
                        queryKey: a,
                        state: s
                    }) => {
                        let p = s.data;
                        return [a, p]
                    })
                }
                setQueryData(a, s, p) {
                    let g = this.queryCache.find(a),
                        m = null == g ? void 0 : g.state.data,
                        v = "function" == typeof s ? s(m) : s;
                    if (void 0 === v) return;
                    let x = parseQueryArgs(a),
                        _ = this.defaultQueryOptions(x);
                    return this.queryCache.build(this, _).setData(v, { ...p,
                        manual: !0
                    })
                }
                setQueriesData(a, s, p) {
                    return x.batch(() => this.getQueryCache().findAll(a).map(({
                        queryKey: a
                    }) => [a, this.setQueryData(a, s, p)]))
                }
                getQueryState(a, s) {
                    var p;
                    return null == (p = this.queryCache.find(a, s)) ? void 0 : p.state
                }
                removeQueries(a, s) {
                    let [p] = parseFilterArgs(a, s), g = this.queryCache;
                    x.batch(() => {
                        g.findAll(p).forEach(a => {
                            g.remove(a)
                        })
                    })
                }
                resetQueries(a, s, p) {
                    let [g, m] = parseFilterArgs(a, s, p), v = this.queryCache, _ = {
                        type: "active",
                        ...g
                    };
                    return x.batch(() => (v.findAll(g).forEach(a => {
                        a.reset()
                    }), this.refetchQueries(_, m)))
                }
                cancelQueries(a, s, p) {
                    let [g, m = {}] = parseFilterArgs(a, s, p);
                    void 0 === m.revert && (m.revert = !0);
                    let v = x.batch(() => this.queryCache.findAll(g).map(a => a.cancel(m)));
                    return Promise.all(v).then(utils_noop).catch(utils_noop)
                }
                invalidateQueries(a, s, p) {
                    let [g, m] = parseFilterArgs(a, s, p);
                    return x.batch(() => {
                        var a, s;
                        if (this.queryCache.findAll(g).forEach(a => {
                                a.invalidate()
                            }), "none" === g.refetchType) return Promise.resolve();
                        let p = { ...g,
                            type: null != (a = null != (s = g.refetchType) ? s : g.type) ? a : "active"
                        };
                        return this.refetchQueries(p, m)
                    })
                }
                refetchQueries(a, s, p) {
                    let [g, m] = parseFilterArgs(a, s, p), v = x.batch(() => this.queryCache.findAll(g).filter(a => !a.isDisabled()).map(a => {
                        var s;
                        return a.fetch(void 0, { ...m,
                            cancelRefetch: null == (s = null == m ? void 0 : m.cancelRefetch) || s,
                            meta: {
                                refetchPage: g.refetchPage
                            }
                        })
                    })), _ = Promise.all(v).then(utils_noop);
                    return null != m && m.throwOnError || (_ = _.catch(utils_noop)), _
                }
                fetchQuery(a, s, p) {
                    let g = parseQueryArgs(a, s, p),
                        m = this.defaultQueryOptions(g);
                    void 0 === m.retry && (m.retry = !1);
                    let v = this.queryCache.build(this, m);
                    return v.isStaleByTime(m.staleTime) ? v.fetch(m) : Promise.resolve(v.state.data)
                }
                prefetchQuery(a, s, p) {
                    return this.fetchQuery(a, s, p).then(utils_noop).catch(utils_noop)
                }
                fetchInfiniteQuery(a, s, p) {
                    let g = parseQueryArgs(a, s, p);
                    return g.behavior = {
                        onFetch: a => {
                            a.fetchFn = () => {
                                var s, p, g, m, v, x, _;
                                let E;
                                let T = null == (s = a.fetchOptions) ? void 0 : null == (p = s.meta) ? void 0 : p.refetchPage,
                                    F = null == (g = a.fetchOptions) ? void 0 : null == (m = g.meta) ? void 0 : m.fetchMore,
                                    W = null == F ? void 0 : F.pageParam,
                                    z = (null == F ? void 0 : F.direction) === "forward",
                                    Z = (null == F ? void 0 : F.direction) === "backward",
                                    Q = (null == (v = a.state.data) ? void 0 : v.pages) || [],
                                    Y = (null == (x = a.state.data) ? void 0 : x.pageParams) || [],
                                    X = Y,
                                    J = !1,
                                    addSignalProperty = s => {
                                        Object.defineProperty(s, "signal", {
                                            enumerable: !0,
                                            get: () => {
                                                var s, p;
                                                return null != (s = a.signal) && s.aborted ? J = !0 : null == (p = a.signal) || p.addEventListener("abort", () => {
                                                    J = !0
                                                }), a.signal
                                            }
                                        })
                                    },
                                    ei = a.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + a.options.queryHash + "'")),
                                    buildNewPages = (a, s, p, g) => (X = g ? [s, ...X] : [...X, s], g ? [p, ...a] : [...a, p]),
                                    fetchPage = (s, p, g, m) => {
                                        if (J) return Promise.reject("Cancelled");
                                        if (void 0 === g && !p && s.length) return Promise.resolve(s);
                                        let v = {
                                            queryKey: a.queryKey,
                                            pageParam: g,
                                            meta: a.options.meta
                                        };
                                        addSignalProperty(v);
                                        let x = ei(v),
                                            _ = Promise.resolve(x).then(a => buildNewPages(s, g, a, m));
                                        return _
                                    };
                                if (Q.length) {
                                    if (z) {
                                        let s = void 0 !== W,
                                            p = s ? W : getNextPageParam(a.options, Q);
                                        E = fetchPage(Q, s, p)
                                    } else if (Z) {
                                        let s = void 0 !== W,
                                            p = s ? W : null == (_ = a.options).getPreviousPageParam ? void 0 : _.getPreviousPageParam(Q[0], Q);
                                        E = fetchPage(Q, s, p, !0)
                                    } else {
                                        X = [];
                                        let s = void 0 === a.options.getNextPageParam,
                                            p = !T || !Q[0] || T(Q[0], 0, Q);
                                        E = p ? fetchPage([], s, Y[0]) : Promise.resolve(buildNewPages([], Y[0], Q[0]));
                                        for (let p = 1; p < Q.length; p++) E = E.then(g => {
                                            let m = !T || !Q[p] || T(Q[p], p, Q);
                                            if (m) {
                                                let m = s ? Y[p] : getNextPageParam(a.options, g);
                                                return fetchPage(g, s, m)
                                            }
                                            return Promise.resolve(buildNewPages(g, Y[p], Q[p]))
                                        })
                                    }
                                } else E = fetchPage([]);
                                let en = E.then(a => ({
                                    pages: a,
                                    pageParams: X
                                }));
                                return en
                            }
                        }
                    }, this.fetchQuery(g)
                }
                prefetchInfiniteQuery(a, s, p) {
                    return this.fetchInfiniteQuery(a, s, p).then(utils_noop).catch(utils_noop)
                }
                resumePausedMutations() {
                    return this.mutationCache.resumePausedMutations()
                }
                getQueryCache() {
                    return this.queryCache
                }
                getMutationCache() {
                    return this.mutationCache
                }
                getLogger() {
                    return this.logger
                }
                getDefaultOptions() {
                    return this.defaultOptions
                }
                setDefaultOptions(a) {
                    this.defaultOptions = a
                }
                setQueryDefaults(a, s) {
                    let p = this.queryDefaults.find(s => hashQueryKey(a) === hashQueryKey(s.queryKey));
                    p ? p.defaultOptions = s : this.queryDefaults.push({
                        queryKey: a,
                        defaultOptions: s
                    })
                }
                getQueryDefaults(a) {
                    if (!a) return;
                    let s = this.queryDefaults.find(s => partialDeepEqual(a, s.queryKey));
                    return null == s ? void 0 : s.defaultOptions
                }
                setMutationDefaults(a, s) {
                    let p = this.mutationDefaults.find(s => hashQueryKey(a) === hashQueryKey(s.mutationKey));
                    p ? p.defaultOptions = s : this.mutationDefaults.push({
                        mutationKey: a,
                        defaultOptions: s
                    })
                }
                getMutationDefaults(a) {
                    if (!a) return;
                    let s = this.mutationDefaults.find(s => partialDeepEqual(a, s.mutationKey));
                    return null == s ? void 0 : s.defaultOptions
                }
                defaultQueryOptions(a) {
                    if (null != a && a._defaulted) return a;
                    let s = { ...this.defaultOptions.queries,
                        ...this.getQueryDefaults(null == a ? void 0 : a.queryKey),
                        ...a,
                        _defaulted: !0
                    };
                    return !s.queryHash && s.queryKey && (s.queryHash = hashQueryKeyByOptions(s.queryKey, s)), void 0 === s.refetchOnReconnect && (s.refetchOnReconnect = "always" !== s.networkMode), void 0 === s.useErrorBoundary && (s.useErrorBoundary = !!s.suspense), s
                }
                defaultMutationOptions(a) {
                    return null != a && a._defaulted ? a : { ...this.defaultOptions.mutations,
                        ...this.getMutationDefaults(null == a ? void 0 : a.mutationKey),
                        ...a,
                        _defaulted: !0
                    }
                }
                clear() {
                    this.queryCache.clear(), this.mutationCache.clear()
                }
            };

            function defaultShouldDehydrateMutation(a) {
                return a.state.isPaused
            }

            function defaultShouldDehydrateQuery(a) {
                return "success" === a.state.status
            }
            let F = ["added", "removed", "updated"];

            function isCacheableEventType(a) {
                return F.includes(a)
            }
            async function persistQueryClientRestore({
                queryClient: a,
                persister: s,
                maxAge: p = 864e5,
                buster: g = "",
                hydrateOptions: m
            }) {
                try {
                    let v = await s.restoreClient();
                    if (v) {
                        if (v.timestamp) {
                            let x = Date.now() - v.timestamp > p,
                                _ = v.buster !== g;
                            x || _ ? s.removeClient() : function(a, s, p) {
                                if ("object" != typeof s || null === s) return;
                                let g = a.getMutationCache(),
                                    m = a.getQueryCache(),
                                    v = s.mutations || [],
                                    x = s.queries || [];
                                v.forEach(s => {
                                    var m;
                                    g.build(a, { ...null == p ? void 0 : null == (m = p.defaultOptions) ? void 0 : m.mutations,
                                        mutationKey: s.mutationKey
                                    }, s.state)
                                }), x.forEach(({
                                    queryKey: s,
                                    state: g,
                                    queryHash: v
                                }) => {
                                    var x;
                                    let _ = m.get(v);
                                    if (_) {
                                        if (_.state.dataUpdatedAt < g.dataUpdatedAt) {
                                            let {
                                                fetchStatus: a,
                                                ...s
                                            } = g;
                                            _.setState(s)
                                        }
                                        return
                                    }
                                    m.build(a, { ...null == p ? void 0 : null == (x = p.defaultOptions) ? void 0 : x.queries,
                                        queryKey: s,
                                        queryHash: v
                                    }, { ...g,
                                        fetchStatus: "idle"
                                    })
                                })
                            }(a, v.clientState, m)
                        } else s.removeClient()
                    }
                } catch (a) {
                    s.removeClient()
                }
            }
            async function persistQueryClientSave({
                queryClient: a,
                persister: s,
                buster: p = "",
                dehydrateOptions: g
            }) {
                let m = {
                    buster: p,
                    timestamp: Date.now(),
                    clientState: function(a, s = {}) {
                        let p = [],
                            g = [];
                        if (!1 !== s.dehydrateMutations) {
                            let g = s.shouldDehydrateMutation || defaultShouldDehydrateMutation;
                            a.getMutationCache().getAll().forEach(a => {
                                g(a) && p.push({
                                    mutationKey: a.options.mutationKey,
                                    state: a.state
                                })
                            })
                        }
                        if (!1 !== s.dehydrateQueries) {
                            let p = s.shouldDehydrateQuery || defaultShouldDehydrateQuery;
                            a.getQueryCache().getAll().forEach(a => {
                                p(a) && g.push({
                                    state: a.state,
                                    queryKey: a.queryKey,
                                    queryHash: a.queryHash
                                })
                            })
                        }
                        return {
                            mutations: p,
                            queries: g
                        }
                    }(a, g)
                };
                await s.persistClient(m)
            }
            var W = p(10953),
                z = p(2265);
            let Z = z.createContext(void 0),
                Q = z.createContext(!1);

            function getQueryClientContext(a, s) {
                return a || (s && "undefined" != typeof window ? (window.ReactQueryClientContext || (window.ReactQueryClientContext = Z), window.ReactQueryClientContext) : Z)
            }
            let useQueryClient = ({
                    context: a
                } = {}) => {
                    let s = z.useContext(getQueryClientContext(a, z.useContext(Q)));
                    if (!s) throw Error("No QueryClient set, use QueryClientProvider to set one");
                    return s
                },
                QueryClientProvider = ({
                    client: a,
                    children: s,
                    context: p,
                    contextSharing: g = !1
                }) => {
                    z.useEffect(() => (a.mount(), () => {
                        a.unmount()
                    }), [a]);
                    let m = getQueryClientContext(p, g);
                    return z.createElement(Q.Provider, {
                        value: !p && g
                    }, z.createElement(m.Provider, {
                        value: a
                    }, s))
                },
                Y = z.createContext(!1),
                useIsRestoring = () => z.useContext(Y);
            Y.Provider;
            let X = z.createContext((g = !1, {
                    clearReset: () => {
                        g = !1
                    },
                    reset: () => {
                        g = !0
                    },
                    isReset: () => g
                })),
                useQueryErrorResetBoundary = () => z.useContext(X);
            var J = p(26272);
            let QueryObserver = class QueryObserver extends Subscribable {
                constructor(a, s) {
                    super(), this.client = a, this.options = s, this.trackedProps = new Set, this.selectError = null, this.bindMethods(), this.setOptions(s)
                }
                bindMethods() {
                    this.remove = this.remove.bind(this), this.refetch = this.refetch.bind(this)
                }
                onSubscribe() {
                    1 === this.listeners.size && (this.currentQuery.addObserver(this), shouldFetchOnMount(this.currentQuery, this.options) && this.executeFetch(), this.updateTimers())
                }
                onUnsubscribe() {
                    this.hasListeners() || this.destroy()
                }
                shouldFetchOnReconnect() {
                    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect)
                }
                shouldFetchOnWindowFocus() {
                    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus)
                }
                destroy() {
                    this.listeners = new Set, this.clearStaleTimeout(), this.clearRefetchInterval(), this.currentQuery.removeObserver(this)
                }
                setOptions(a, s) {
                    let p = this.options,
                        g = this.currentQuery;
                    if (this.options = this.client.defaultQueryOptions(a), shallowEqualObjects(p, this.options) || this.client.getQueryCache().notify({
                            type: "observerOptionsUpdated",
                            query: this.currentQuery,
                            observer: this
                        }), void 0 !== this.options.enabled && "boolean" != typeof this.options.enabled) throw Error("Expected enabled to be a boolean");
                    this.options.queryKey || (this.options.queryKey = p.queryKey), this.updateQuery();
                    let m = this.hasListeners();
                    m && shouldFetchOptionally(this.currentQuery, g, this.options, p) && this.executeFetch(), this.updateResult(s), m && (this.currentQuery !== g || this.options.enabled !== p.enabled || this.options.staleTime !== p.staleTime) && this.updateStaleTimeout();
                    let v = this.computeRefetchInterval();
                    m && (this.currentQuery !== g || this.options.enabled !== p.enabled || v !== this.currentRefetchInterval) && this.updateRefetchInterval(v)
                }
                getOptimisticResult(a) {
                    let s = this.client.getQueryCache().build(this.client, a),
                        p = this.createResult(s, a);
                    return a.keepPreviousData || (void 0 !== a.placeholderData ? !p.isPlaceholderData : shallowEqualObjects(this.getCurrentResult(), p)) || (this.currentResult = p, this.currentResultOptions = this.options, this.currentResultState = this.currentQuery.state), p
                }
                getCurrentResult() {
                    return this.currentResult
                }
                trackResult(a) {
                    let s = {};
                    return Object.keys(a).forEach(p => {
                        Object.defineProperty(s, p, {
                            configurable: !1,
                            enumerable: !0,
                            get: () => (this.trackedProps.add(p), a[p])
                        })
                    }), s
                }
                getCurrentQuery() {
                    return this.currentQuery
                }
                remove() {
                    this.client.getQueryCache().remove(this.currentQuery)
                }
                refetch({
                    refetchPage: a,
                    ...s
                } = {}) {
                    return this.fetch({ ...s,
                        meta: {
                            refetchPage: a
                        }
                    })
                }
                fetchOptimistic(a) {
                    let s = this.client.defaultQueryOptions(a),
                        p = this.client.getQueryCache().build(this.client, s);
                    return p.isFetchingOptimistic = !0, p.fetch().then(() => this.createResult(p, s))
                }
                fetch(a) {
                    var s;
                    return this.executeFetch({ ...a,
                        cancelRefetch: null == (s = a.cancelRefetch) || s
                    }).then(() => (this.updateResult(), this.currentResult))
                }
                executeFetch(a) {
                    this.updateQuery();
                    let s = this.currentQuery.fetch(this.options, a);
                    return null != a && a.throwOnError || (s = s.catch(utils_noop)), s
                }
                updateStaleTimeout() {
                    if (this.clearStaleTimeout(), m || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) return;
                    let a = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
                    this.staleTimeoutId = setTimeout(() => {
                        this.currentResult.isStale || this.updateResult()
                    }, a + 1)
                }
                computeRefetchInterval() {
                    var a;
                    return "function" == typeof this.options.refetchInterval ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : null != (a = this.options.refetchInterval) && a
                }
                updateRefetchInterval(a) {
                    this.clearRefetchInterval(), this.currentRefetchInterval = a, !m && !1 !== this.options.enabled && isValidTimeout(this.currentRefetchInterval) && 0 !== this.currentRefetchInterval && (this.refetchIntervalId = setInterval(() => {
                        (this.options.refetchIntervalInBackground || _.isFocused()) && this.executeFetch()
                    }, this.currentRefetchInterval))
                }
                updateTimers() {
                    this.updateStaleTimeout(), this.updateRefetchInterval(this.computeRefetchInterval())
                }
                clearStaleTimeout() {
                    this.staleTimeoutId && (clearTimeout(this.staleTimeoutId), this.staleTimeoutId = void 0)
                }
                clearRefetchInterval() {
                    this.refetchIntervalId && (clearInterval(this.refetchIntervalId), this.refetchIntervalId = void 0)
                }
                createResult(a, s) {
                    let p;
                    let g = this.currentQuery,
                        m = this.options,
                        v = this.currentResult,
                        x = this.currentResultState,
                        _ = this.currentResultOptions,
                        E = a !== g,
                        T = E ? a.state : this.currentQueryInitialState,
                        F = E ? this.currentResult : this.previousQueryResult,
                        {
                            state: W
                        } = a,
                        {
                            dataUpdatedAt: z,
                            error: Z,
                            errorUpdatedAt: Q,
                            fetchStatus: Y,
                            status: X
                        } = W,
                        J = !1,
                        ei = !1;
                    if (s._optimisticResults) {
                        let p = this.hasListeners(),
                            v = !p && shouldFetchOnMount(a, s),
                            x = p && shouldFetchOptionally(a, g, s, m);
                        (v || x) && (Y = canFetch(a.options.networkMode) ? "fetching" : "paused", z || (X = "loading")), "isRestoring" === s._optimisticResults && (Y = "idle")
                    }
                    if (s.keepPreviousData && !W.dataUpdatedAt && null != F && F.isSuccess && "error" !== X) p = F.data, z = F.dataUpdatedAt, X = F.status, J = !0;
                    else if (s.select && void 0 !== W.data) {
                        if (v && W.data === (null == x ? void 0 : x.data) && s.select === this.selectFn) p = this.selectResult;
                        else try {
                            this.selectFn = s.select, p = s.select(W.data), p = replaceData(null == v ? void 0 : v.data, p, s), this.selectResult = p, this.selectError = null
                        } catch (a) {
                            this.selectError = a
                        }
                    } else p = W.data;
                    if (void 0 !== s.placeholderData && void 0 === p && "loading" === X) {
                        let a;
                        if (null != v && v.isPlaceholderData && s.placeholderData === (null == _ ? void 0 : _.placeholderData)) a = v.data;
                        else if (a = "function" == typeof s.placeholderData ? s.placeholderData() : s.placeholderData, s.select && void 0 !== a) try {
                            a = s.select(a), this.selectError = null
                        } catch (a) {
                            this.selectError = a
                        }
                        void 0 !== a && (X = "success", p = replaceData(null == v ? void 0 : v.data, a, s), ei = !0)
                    }
                    this.selectError && (Z = this.selectError, p = this.selectResult, Q = Date.now(), X = "error");
                    let en = "fetching" === Y,
                        eo = "loading" === X,
                        ea = "error" === X,
                        es = {
                            status: X,
                            fetchStatus: Y,
                            isLoading: eo,
                            isSuccess: "success" === X,
                            isError: ea,
                            isInitialLoading: eo && en,
                            data: p,
                            dataUpdatedAt: z,
                            error: Z,
                            errorUpdatedAt: Q,
                            failureCount: W.fetchFailureCount,
                            failureReason: W.fetchFailureReason,
                            errorUpdateCount: W.errorUpdateCount,
                            isFetched: W.dataUpdateCount > 0 || W.errorUpdateCount > 0,
                            isFetchedAfterMount: W.dataUpdateCount > T.dataUpdateCount || W.errorUpdateCount > T.errorUpdateCount,
                            isFetching: en,
                            isRefetching: en && !eo,
                            isLoadingError: ea && 0 === W.dataUpdatedAt,
                            isPaused: "paused" === Y,
                            isPlaceholderData: ei,
                            isPreviousData: J,
                            isRefetchError: ea && 0 !== W.dataUpdatedAt,
                            isStale: isStale(a, s),
                            refetch: this.refetch,
                            remove: this.remove
                        };
                    return es
                }
                updateResult(a) {
                    let s = this.currentResult,
                        p = this.createResult(this.currentQuery, this.options);
                    if (this.currentResultState = this.currentQuery.state, this.currentResultOptions = this.options, shallowEqualObjects(p, s)) return;
                    this.currentResult = p;
                    let g = {
                        cache: !0
                    };
                    (null == a ? void 0 : a.listeners) !== !1 && (() => {
                        if (!s) return !0;
                        let {
                            notifyOnChangeProps: a
                        } = this.options, p = "function" == typeof a ? a() : a;
                        if ("all" === p || !p && !this.trackedProps.size) return !0;
                        let g = new Set(null != p ? p : this.trackedProps);
                        return this.options.useErrorBoundary && g.add("error"), Object.keys(this.currentResult).some(a => {
                            let p = this.currentResult[a] !== s[a];
                            return p && g.has(a)
                        })
                    })() && (g.listeners = !0), this.notify({ ...g,
                        ...a
                    })
                }
                updateQuery() {
                    let a = this.client.getQueryCache().build(this.client, this.options);
                    if (a === this.currentQuery) return;
                    let s = this.currentQuery;
                    this.currentQuery = a, this.currentQueryInitialState = a.state, this.previousQueryResult = this.currentResult, this.hasListeners() && (null == s || s.removeObserver(this), a.addObserver(this))
                }
                onQueryUpdate(a) {
                    let s = {};
                    "success" === a.type ? s.onSuccess = !a.manual : "error" !== a.type || isCancelledError(a.error) || (s.onError = !0), this.updateResult(s), this.hasListeners() && this.updateTimers()
                }
                notify(a) {
                    x.batch(() => {
                        var s, p, g, m, v, x, _, E;
                        a.onSuccess ? (null == (s = (p = this.options).onSuccess) || s.call(p, this.currentResult.data), null == (g = (m = this.options).onSettled) || g.call(m, this.currentResult.data, null)) : a.onError && (null == (v = (x = this.options).onError) || v.call(x, this.currentResult.error), null == (_ = (E = this.options).onSettled) || _.call(E, void 0, this.currentResult.error)), a.listeners && this.listeners.forEach(({
                            listener: a
                        }) => {
                            a(this.currentResult)
                        }), a.cache && this.client.getQueryCache().notify({
                            query: this.currentQuery,
                            type: "observerResultsUpdated"
                        })
                    })
                }
            };

            function shouldFetchOnMount(a, s) {
                return !1 !== s.enabled && !a.state.dataUpdatedAt && !("error" === a.state.status && !1 === s.retryOnMount) || a.state.dataUpdatedAt > 0 && shouldFetchOn(a, s, s.refetchOnMount)
            }

            function shouldFetchOn(a, s, p) {
                if (!1 !== s.enabled) {
                    let g = "function" == typeof p ? p(a) : p;
                    return "always" === g || !1 !== g && isStale(a, s)
                }
                return !1
            }

            function shouldFetchOptionally(a, s, p, g) {
                return !1 !== p.enabled && (a !== s || !1 === g.enabled) && (!p.suspense || "error" !== a.state.status) && isStale(a, p)
            }

            function isStale(a, s) {
                return a.isStaleByTime(s.staleTime)
            }
            var ei = p(65401);

            function createConfig({
                queryClient: a = new QueryClient({
                    defaultOptions: {
                        queries: {
                            cacheTime: 864e5,
                            networkMode: "offlineFirst",
                            refetchOnWindowFocus: !1,
                            retry: 0
                        },
                        mutations: {
                            networkMode: "offlineFirst"
                        }
                    }
                }),
                storage: s = (0, W.o6)({
                    storage: "undefined" != typeof window && window.localStorage ? window.localStorage : W.wp
                }),
                persister: p = "undefined" != typeof window ? function({
                    storage: a,
                    key: s = "REACT_QUERY_OFFLINE_CACHE",
                    throttleTime: p = 1e3,
                    serialize: g = JSON.stringify,
                    deserialize: m = JSON.parse,
                    retry: v
                }) {
                    if (a) {
                        let trySave = p => {
                            try {
                                a.setItem(s, g(p));
                                return
                            } catch (a) {
                                return a
                            }
                        };
                        return {
                            persistClient: function(a, s = 100) {
                                let p, g = null;
                                return function(...m) {
                                    p = m, null === g && (g = setTimeout(() => {
                                        a(...p), g = null
                                    }, s))
                                }
                            }(a => {
                                let s = a,
                                    p = trySave(s),
                                    g = 0;
                                for (; p && s;) g++, (s = null == v ? void 0 : v({
                                    persistedClient: s,
                                    error: p,
                                    errorCount: g
                                })) && (p = trySave(s))
                            }, p),
                            restoreClient: () => {
                                let p = a.getItem(s);
                                if (p) return m(p)
                            },
                            removeClient: () => {
                                a.removeItem(s)
                            }
                        }
                    }
                    return {
                        persistClient: noop,
                        restoreClient: () => void 0,
                        removeClient: noop
                    }
                }({
                    key: "cache",
                    storage: s,
                    serialize: a => a,
                    deserialize: a => a
                }) : void 0,
                ...g
            }) {
                let m = (0, W._g)({ ...g,
                    storage: s
                });
                return p && function(a) {
                    persistQueryClientRestore(a).then(() => {
                        (function(a) {
                            let s = a.queryClient.getQueryCache().subscribe(s => {
                                    isCacheableEventType(s.type) && persistQueryClientSave(a)
                                }),
                                p = a.queryClient.getMutationCache().subscribe(s => {
                                    isCacheableEventType(s.type) && persistQueryClientSave(a)
                                })
                        })(a)
                    })
                }({
                    queryClient: a,
                    persister: p,
                    dehydrateOptions: {
                        shouldDehydrateQuery: a => 0 !== a.cacheTime && !1 !== a.queryKey[0].persist
                    }
                }), Object.assign(m, {
                    queryClient: a
                })
            }
            var en = z.createContext(void 0),
                eo = z.createContext(void 0);

            function WagmiConfig({
                children: a,
                config: s
            }) {
                return z.createElement(en.Provider, {
                    children: z.createElement(QueryClientProvider, {
                        children: a,
                        client: s.queryClient,
                        context: eo
                    }),
                    value: s
                })
            }
            var ea = J.useSyncExternalStore;

            function dist_hasObjectPrototype(a) {
                return "[object Object]" === Object.prototype.toString.call(a)
            }

            function queryKeyHashFn(a) {
                return JSON.stringify(a, (a, s) => ! function(a) {
                    if (!dist_hasObjectPrototype(a)) return !1;
                    let s = a.constructor;
                    if (void 0 === s) return !0;
                    let p = s.prototype;
                    return !!(dist_hasObjectPrototype(p) && p.hasOwnProperty("isPrototypeOf"))
                }(s) ? "bigint" == typeof s ? s.toString() : s : Object.keys(s).sort().reduce((a, p) => (a[p] = s[p], a), {}))
            }

            function useQuery(a, s, p) {
                let g = Array.isArray(a) ? "function" == typeof s ? { ...p,
                        queryKey: a,
                        queryFn: s
                    } : { ...s,
                        queryKey: a
                    } : a,
                    m = function(a, s) {
                        var p, g;
                        let m = useQueryClient({
                                context: a.context
                            }),
                            v = useIsRestoring(),
                            _ = useQueryErrorResetBoundary(),
                            E = m.defaultQueryOptions({ ...a,
                                queryKeyHashFn
                            });
                        E._optimisticResults = v ? "isRestoring" : "optimistic", E.onError && (E.onError = x.batchCalls(E.onError)), E.onSuccess && (E.onSuccess = x.batchCalls(E.onSuccess)), E.onSettled && (E.onSettled = x.batchCalls(E.onSettled)), E.suspense && "number" != typeof E.staleTime && (E.staleTime = 1e3), (E.suspense || E.useErrorBoundary) && !_.isReset() && (E.retryOnMount = !1);
                        let [T] = z.useState(() => new s(m, E)), F = T.getOptimisticResult(E);
                        if (ea(z.useCallback(a => v ? () => void 0 : T.subscribe(x.batchCalls(a)), [T, v]), () => T.getCurrentResult(), () => T.getCurrentResult()), z.useEffect(() => {
                                _.clearReset()
                            }, [_]), z.useEffect(() => {
                                T.setOptions(E, {
                                    listeners: !1
                                })
                            }, [E, T]), E.suspense && F.isLoading && F.isFetching && !v) throw T.fetchOptimistic(E).then(({
                            data: a
                        }) => {
                            E.onSuccess ? .(a), E.onSettled ? .(a, null)
                        }).catch(a => {
                            _.clearReset(), E.onError ? .(a), E.onSettled ? .(void 0, a)
                        });
                        if (F.isError && !_.isReset() && !F.isFetching && (p = E.useErrorBoundary, g = [F.error, T.getCurrentQuery()], "function" == typeof p ? p(...g) : !!p)) throw F.error;
                        let W = "loading" === F.status && "idle" === F.fetchStatus ? "idle" : F.status,
                            Z = "loading" === W && "fetching" === F.fetchStatus;
                        return { ...F,
                            defaultedOptions: E,
                            isIdle: "idle" === W,
                            isLoading: Z,
                            observer: T,
                            status: W
                        }
                    }({
                        context: eo,
                        ...g
                    }, QueryObserver),
                    v = {
                        data: m.data,
                        error: m.error,
                        fetchStatus: m.fetchStatus,
                        isError: m.isError,
                        isFetched: m.isFetched,
                        isFetchedAfterMount: m.isFetchedAfterMount,
                        isFetching: m.isFetching,
                        isIdle: m.isIdle,
                        isLoading: m.isLoading,
                        isRefetching: m.isRefetching,
                        isSuccess: m.isSuccess,
                        refetch: m.refetch,
                        status: m.status,
                        internal: {
                            dataUpdatedAt: m.dataUpdatedAt,
                            errorUpdatedAt: m.errorUpdatedAt,
                            failureCount: m.failureCount,
                            isFetchedAfterMount: m.isFetchedAfterMount,
                            isLoadingError: m.isLoadingError,
                            isPaused: m.isPaused,
                            isPlaceholderData: m.isPlaceholderData,
                            isPreviousData: m.isPreviousData,
                            isRefetchError: m.isRefetchError,
                            isStale: m.isStale,
                            remove: m.remove
                        }
                    };
                return m.defaultedOptions.notifyOnChangeProps ? v : function(a, s) {
                    let p = {};
                    return Object.keys(a).forEach(g => {
                        Object.defineProperty(p, g, {
                            configurable: !1,
                            enumerable: !0,
                            get: () => (s.trackedProps.add(g), a[g])
                        })
                    }), p
                }(v, m.observer)
            }
            var useQueryClient2 = () => useQueryClient({
                context: eo
            });

            function usePublicClient({
                chainId: a
            } = {}) {
                return (0, ei.useSyncExternalStoreWithSelector)(s => (0, W.pC)({
                    chainId: a
                }, s), () => (0, W.uV)({
                    chainId: a
                }), () => (0, W.uV)({
                    chainId: a
                }), a => a, (a, s) => a.uid === s.uid)
            }

            function useChainId({
                chainId: a
            } = {}) {
                let s = usePublicClient({
                    chainId: a
                });
                return s.chain.id
            }

            function queryKey2({
                chainId: a,
                scopeKey: s
            }) {
                return [{
                    entity: "blockNumber",
                    chainId: a,
                    scopeKey: s
                }]
            }

            function queryFn2({
                queryKey: [{
                    chainId: a
                }]
            }) {
                return (0, W.RQ)({
                    chainId: a
                })
            }

            function useBlockNumber({
                cacheTime: a = 0,
                chainId: s,
                enabled: p = !0,
                scopeKey: g,
                staleTime: m,
                suspense: v,
                watch: x = !1,
                onBlock: _,
                onError: E,
                onSettled: T,
                onSuccess: F
            } = {}) {
                let Z = useChainId({
                        chainId: s
                    }),
                    Q = usePublicClient({
                        chainId: Z
                    }),
                    Y = function({
                        chainId: a
                    } = {}) {
                        return (0, ei.useSyncExternalStoreWithSelector)(s => (0, W.fq)({
                            chainId: a
                        }, s), () => (0, W.jr)({
                            chainId: a
                        }), () => (0, W.jr)({
                            chainId: a
                        }), a => a, (a, s) => a ? .uid === s ? .uid)
                    }({
                        chainId: Z
                    }),
                    X = useQueryClient2();
                return z.useEffect(() => {
                    if (!p || !x && !_) return;
                    let a = Y ? ? Q,
                        s = a.watchBlockNumber({
                            onBlockNumber: a => {
                                x && X.setQueryData(queryKey2({
                                    chainId: Z,
                                    scopeKey: g
                                }), a), _ && _(a)
                            },
                            emitOnBegin: !0
                        });
                    return s
                }, [Z, g, _, Q, X, x, Y, p]), useQuery(queryKey2({
                    scopeKey: g,
                    chainId: Z
                }), queryFn2, {
                    cacheTime: a,
                    enabled: p,
                    staleTime: m,
                    suspense: v,
                    onError: E,
                    onSettled: T,
                    onSuccess: F
                })
            }

            function useInvalidateOnBlock({
                chainId: a,
                enabled: s,
                queryKey: p
            }) {
                let g = useQueryClient2(),
                    m = z.useCallback(() => g.invalidateQueries({
                        queryKey: p
                    }, {
                        cancelRefetch: !1
                    }), [g, p]);
                useBlockNumber({
                    chainId: a,
                    enabled: s,
                    onBlock: s ? m : void 0,
                    scopeKey: s ? void 0 : "idle"
                })
            }
            var isPlainObject2 = a => "object" == typeof a && !Array.isArray(a);

            function useAccount({
                onConnect: a,
                onDisconnect: s
            } = {}) {
                let p = function() {
                        let a = z.useContext(en);
                        if (!a) throw Error("`useConfig` must be used within `WagmiConfig`.\n\nRead more: https://wagmi.sh/react/WagmiConfig");
                        return a
                    }(),
                    g = z.useCallback(a => (0, W.uH)(a), [p]),
                    m = function(a, s, p = s, g = W.vZ) {
                        let m = z.useRef([]),
                            v = (0, ei.useSyncExternalStoreWithSelector)(a, s, p, a => a, (a, s) => {
                                if (isPlainObject2(a) && isPlainObject2(s) && m.current.length) {
                                    for (let p of m.current) {
                                        let m = g(a[p], s[p]);
                                        if (!m) return !1
                                    }
                                    return !0
                                }
                                return g(a, s)
                            });
                        if (isPlainObject2(v)) {
                            let a = { ...v
                            };
                            return Object.defineProperties(a, Object.entries(a).reduce((a, [s, p]) => ({ ...a,
                                [s]: {
                                    configurable: !1,
                                    enumerable: !0,
                                    get: () => (m.current.includes(s) || m.current.push(s), p)
                                }
                            }), {})), a
                        }
                        return v
                    }(g, W.D0),
                    v = z.useRef(),
                    x = v.current;
                return z.useEffect(() => {
                    x ? .status !== "connected" && "connected" === m.status && a ? .({
                        address: m.address,
                        connector: m.connector,
                        isReconnected: x ? .status === "reconnecting" || x ? .status === void 0
                    }), x ? .status === "connected" && "disconnected" === m.status && s ? .(), v.current = m
                }, [a, s, x, m]), m
            }

            function queryFn4({
                queryKey: [{
                    address: a,
                    chainId: s,
                    formatUnits: p,
                    token: g
                }]
            }) {
                if (!a) throw Error("address is required");
                return (0, W.EG)({
                    address: a,
                    chainId: s,
                    formatUnits: p,
                    token: g
                })
            }

            function useBalance({
                address: a,
                cacheTime: s,
                chainId: p,
                enabled: g = !0,
                formatUnits: m,
                scopeKey: v,
                staleTime: x,
                suspense: _,
                token: E,
                watch: T,
                onError: F,
                onSettled: W,
                onSuccess: Z
            } = {}) {
                let Q = useChainId({
                        chainId: p
                    }),
                    Y = z.useMemo(() => (function({
                        address: a,
                        chainId: s,
                        formatUnits: p,
                        scopeKey: g,
                        token: m
                    }) {
                        return [{
                            entity: "balance",
                            address: a,
                            chainId: s,
                            formatUnits: p,
                            scopeKey: g,
                            token: m
                        }]
                    })({
                        address: a,
                        chainId: Q,
                        formatUnits: m,
                        scopeKey: v,
                        token: E
                    }), [a, Q, m, v, E]),
                    X = useQuery(Y, queryFn4, {
                        cacheTime: s,
                        enabled: !!(g && a),
                        staleTime: x,
                        suspense: _,
                        onError: F,
                        onSettled: W,
                        onSuccess: Z
                    });
                return useInvalidateOnBlock({
                    chainId: Q,
                    enabled: !!(g && T && a),
                    queryKey: Y
                }), X
            }

            function useContractRead({
                abi: a,
                address: s,
                account: p,
                args: g,
                blockNumber: m,
                blockTag: v,
                cacheOnBlock: x = !1,
                cacheTime: _,
                chainId: E,
                enabled: T = !0,
                functionName: F,
                isDataEqual: Z,
                keepPreviousData: Q,
                onError: Y,
                onSettled: X,
                onSuccess: J,
                scopeKey: ei,
                select: en,
                staleTime: eo,
                structuralSharing: ea = (a, s) => (0, W.vZ)(a, s) ? a : utils_replaceEqualDeep(a, s),
                suspense: es,
                watch: el
            } = {}) {
                let ec = useChainId({
                        chainId: E
                    }),
                    {
                        data: eu
                    } = useBlockNumber({
                        chainId: ec,
                        enabled: el || x,
                        scopeKey: el || x ? void 0 : "idle",
                        watch: el
                    }),
                    ed = m ? ? eu,
                    eh = z.useMemo(() => (function({
                        account: a,
                        address: s,
                        args: p,
                        blockNumber: g,
                        blockTag: m,
                        chainId: v,
                        functionName: x,
                        scopeKey: _
                    }) {
                        return [{
                            entity: "readContract",
                            account: a,
                            address: s,
                            args: p,
                            blockNumber: g,
                            blockTag: m,
                            chainId: v,
                            functionName: x,
                            scopeKey: _
                        }]
                    })({
                        account: p,
                        address: s,
                        args: g,
                        blockNumber: x ? ed : void 0,
                        blockTag: v,
                        chainId: ec,
                        functionName: F,
                        scopeKey: ei
                    }), [p, s, g, ed, v, x, ec, F, ei]),
                    ep = z.useMemo(() => {
                        let p = !!(T && a && s && F);
                        return x && (p = !!(p && ed)), p
                    }, [a, s, ed, x, T, F]);
                return useInvalidateOnBlock({
                    chainId: ec,
                    enabled: !!(ep && el && !x),
                    queryKey: eh
                }), useQuery(eh, function({
                    abi: a
                }) {
                    return async ({
                        queryKey: [{
                            account: s,
                            address: p,
                            args: g,
                            blockNumber: m,
                            blockTag: v,
                            chainId: x,
                            functionName: _
                        }]
                    }) => {
                        if (!a) throw Error("abi is required");
                        if (!p) throw Error("address is required");
                        return await (0, W.a4)({
                            account: s,
                            address: p,
                            args: g,
                            blockNumber: m,
                            blockTag: v,
                            chainId: x,
                            abi: a,
                            functionName: _
                        }) ? ? null
                    }
                }({
                    abi: a
                }), {
                    cacheTime: _,
                    enabled: ep,
                    isDataEqual: Z,
                    keepPreviousData: Q,
                    select: en,
                    staleTime: eo,
                    structuralSharing: ea,
                    suspense: es,
                    onError: Y,
                    onSettled: X,
                    onSuccess: J
                })
            }
        }
    }
]);